<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>W4ter5heep&#39;s site</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.w4ter5heep.com/"/>
  <updated>2018-06-28T12:56:06.286Z</updated>
  <id>http://www.w4ter5heep.com/</id>
  
  <author>
    <name>W4ter5heep</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MWebTest</title>
    <link href="http://www.w4ter5heep.com/2018/06/04/MWeb-hexotest/"/>
    <id>http://www.w4ter5heep.com/2018/06/04/MWeb-hexotest/</id>
    <published>2018-06-04T13:01:02.000Z</published>
    <updated>2018-06-28T12:56:06.286Z</updated>
    
    <content type="html"><![CDATA[<h1 id="just-test"><a href="#just-test" class="headerlink" title="just test"></a>just test</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/15301896405359.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;just-test&quot;&gt;&lt;a href=&quot;#just-test&quot; class=&quot;headerlink&quot; title=&quot;just test&quot;&gt;&lt;/a&gt;just test&lt;/h1&gt;&lt;figure class=&quot;image-bubble&quot;&gt;
               
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SUCTF复盘——三个RE</title>
    <link href="http://www.w4ter5heep.com/2018/06/04/SUCTF%E5%A4%8D%E7%9B%98%E2%80%94%E2%80%94%E4%B8%89%E4%B8%AARE/"/>
    <id>http://www.w4ter5heep.com/2018/06/04/SUCTF复盘——三个RE/</id>
    <published>2018-06-04T13:01:02.000Z</published>
    <updated>2018-06-04T13:24:23.101Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RoughLike与期末大作业"><a href="#RoughLike与期末大作业" class="headerlink" title="RoughLike与期末大作业"></a>RoughLike与期末大作业</h2><p>.Net逆向<br>首先承认，比赛的时候因为手比较快下载的是有img文件夹的压缩包，但是很迷，上午提交截图的flag提示错误，下午就对了。。。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527601594188.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527601674717.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure></p><p>更新后题目的目录结构如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527642510738.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><p>可以发现dll文件非常大，反倒是主程序比较小<br>在test_Data中找到比较多的文件<br>但好像运行报错？<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527866689432.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br>还要改文件夹名字。。。</p><p>hint提示要看过场动画<br>首先可以看到开始的过场动画：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527866932928.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br>说明flag有两段？有点牵强。。。</p><p>尝试玩了几关，没什么发现，并且动作缓慢</p><p>得到第二段flag的一种方法：<br>查看Data文件夹中的level1文件，使用010editor直接搜索字符串，找到：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527869996737.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br>得到第二段flag：<code>_70_5uc7F</code><br>有点不讲道理</p><p>得到第一段flag方法：<br>首先要知道Managed文件夹中Dotfuscated是因为对.NET进行了混淆：<br>使用De4dot对Dotfuscated的Assembly-CSharp.dll进行去混淆，该工具在吾爱破解工具包中就有。<br>然后使用.NET Reflator进行反编译，搜索关键词找到关键函数：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527871120681.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br>有两个decrypt函数：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527871198779.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure></p><p>内容：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527871225771.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527871268243.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br>满足这两个条件即会在地图上随机位置生成一个flag，但是条件比较苛刻：<br>12&lt;&lt;8|12&gt;&gt;0x18<br>目测是一个很大的数<br>第二个也同样</p><p>可以通过修改初始参数值使条件满足，但是这里想办法分析函数：<br>这里要查找S3cretArray数组初始化的位置是LoadBundle：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527872148100.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br>继续追踪到解密函数：<br>DecryptAssetBundle(<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527872277037.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br>前几天刚做了一个题，目测是索引表变了以后的base64</p><p>要解密的文件是：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527872767267.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br>解密脚本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import string</span><br><span class="line">import base64</span><br><span class="line"> </span><br><span class="line">custom  = &quot;QRSTUVWXYZABCDEFGHIJKLMNOPabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span><br><span class="line">standard= &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span><br><span class="line"> </span><br><span class="line">plainText=&quot;GetProcAddr&quot;</span><br><span class="line"> </span><br><span class="line">def decryptbundle(pathname,dst):</span><br><span class="line">decode=&quot;&quot;</span><br><span class="line">with open(&quot;/Users/ilan/Desktop/SUCTF/re/Output/test_Data/StreamingAssets/bundles/%s&quot;%(pathname),&quot;rb&quot;) as f:</span><br><span class="line">encode=f.read()</span><br><span class="line">for ch in encode:</span><br><span class="line">if(ch in custom):</span><br><span class="line">decode=decode+standard[string.find(custom,str(ch))]</span><br><span class="line">elif(ch == &apos;=&apos;):</span><br><span class="line">decode= decode+&apos;=&apos;</span><br><span class="line">decode=base64.b64decode(decode)</span><br><span class="line">with open(dst,&quot;wb&quot;) as f:</span><br><span class="line">f.write(decode)</span><br><span class="line"> </span><br><span class="line">decryptbundle(&quot;WeaponYourself.assetbundle&quot;,&quot;ext1&quot;)</span><br></pre></td></tr></table></figure></p><p>此时对解密后的文件进行解析即可：<br>利用工具解析文件，中间需要经过一步解压缩，搜索二进制文件的“flag”可以得到：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527874571861.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br>第一部分flag的base64<br>也可以使用python的第三方库解压读取文件内容：<br><a href="https://github.com/HearthSim/UnityPack" target="_blank" rel="noopener">https://github.com/HearthSim/UnityPack</a></p><p>在此基础上，可以通过分析代码的方式找到前半段Flag：<br>在场景初始化函数中找到：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527874804833.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure></p><p>满足判断条件会设置为True<br>条件为满足关卡数目和99整除且defeatedBoss数量大于0x72000000且defeatedMonster大于514时，会设置一个文本SPText标志位为true。</p><p>不可能完成的任务</p><p>因此可以直接设置SPText标志为True：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527875069592.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br>然后重新进入游戏就会直接显示flag了</p><p>官方的wp比较简单，通过修改程序执行逻辑使flag可以在程序运行时就显示flag以及相关道具</p><h2 id="simpleformat"><a href="#simpleformat" class="headerlink" title="simpleformat"></a>simpleformat</h2><p>就是一个printf输出格式化的问题<br>程序逻辑比较简单：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527900424443.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br>需要输入36个字符，主要变换在sub_4006F6函数，然后将数据写入了/dev/null<br>该函数比较恶心，有一大堆的dprintf<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527900566263.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure></p><p>分析这一大堆奇怪的字符串，可以发现一些规律：<br>格式基本类似于<code>%1$*2$s</code>，每个函数中字符串的结尾都是<code>%20$n</code><br>首先要知道参数的用法：<br><code>%n</code>指的是向任意地址写入任意值，作用是将之前输出的字符个数写入对应的参数指向的地址<br>printf的<code>$</code>的用法则是指定这个格式串解析的参数偏移量。<code>%2$s</code>即为取出后面的第2个参数，以%s的形式输出。<br>因此<code>%20$n</code>就是将之前输出的字符个数写到第20个参数的地址里。即<strong>unk_627200</strong>用于计数，因此每个dprintf最后第20个参数都是一个int数组中的元素，并且是用于memcmp的比较<br>接下来就是每次写入的字符数量是如何获得的，分析<code>%1$*2$s</code>格式的含义<br><code>*</code>有指定宽度的效果，宽度取自后面的参数，<code>%1$*2$s</code>就是将第一个参数以第二个参数的宽度输出<br>当输出<code>%1$*2$s</code>的串之后，当前输出长度即为第二个参数。继续遇到<code>%1$*2$s</code>则再次输出第二个参数长度，当前输出长度就变成了两倍第二个参数，最后会将输出总长度写入<strong>unk_627200</strong>因此起到了一个求和的效果：<br>n1<em>l1 + n2</em>l3 + …… + n19*l19 = m1<br>······<br>总共18个方程，18元一次方程组<br>大佬的脚本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">from zio import *</span><br><span class="line">from z3 import *</span><br><span class="line">formats = [] #数据太多太长给删掉了。。。可以自己补</span><br><span class="line">results = [5462280L, 4346506L, 5891159L, 6839864L, 7912833L, 7049790L, 7455784L, 7311612L, 6299256L, 7114100L, 7037043L, 6873051L, 5644794L, 8014197L, 6432215L, 6638450L, 6959905L, 6705884L]</span><br><span class="line">print len(formats)</span><br><span class="line">print len(results)</span><br><span class="line">s = Solver()</span><br><span class="line">d = [BitVec(&quot;d&#123;0&#125;&quot;.format(i), 16) for i in range(18)]</span><br><span class="line">for j in range(len(formats)):</span><br><span class="line">    fmt = formats[j]</span><br><span class="line">    left = 0</span><br><span class="line">    left_str = &apos;&apos;</span><br><span class="line">    for i in range(2, 20):</span><br><span class="line">        c = &apos;%1$*&apos;+str(i)+&apos;$s&apos;</span><br><span class="line"></span><br><span class="line">        left += fmt.count(c)*d[i-2]</span><br><span class="line">        #left_str += str(fmt.count(c))+&apos;*d[&apos;+str(i-2)+&apos;] + &apos;</span><br><span class="line"></span><br><span class="line">    #print left_str</span><br><span class="line">    s.add(left == results[j])</span><br><span class="line"></span><br><span class="line">print s.check()</span><br><span class="line">print s.model()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">model = s.model()</span><br><span class="line">init_state = &#123;&#125;</span><br><span class="line">for k in model:</span><br><span class="line">    idx = int(str(k)[1:])</span><br><span class="line">    val = model[k].as_long()</span><br><span class="line">    #print idx, val</span><br><span class="line">    init_state[idx] = val</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = &apos;&apos;</span><br><span class="line">for i in range(18):</span><br><span class="line">    flag += l16(init_state[i])</span><br><span class="line"></span><br><span class="line">print flag</span><br></pre></td></tr></table></figure></p><p>注意细节，flag每两位作为了一个数<br>伏地膜</p><h2 id="enigma"><a href="#enigma" class="headerlink" title="enigma"></a>enigma</h2><p>即二战时德国所使用的转轮密码机<br>简单查看了密码机的原理，实际上enigma采用复式字母替换加密方法，利用键盘、转子、跳线、反射板、显示器进行对称加密/解密。<br>Enigma属于算法和密钥分离的加密方法，破解Enigma的难度在于不知道当前密钥，包括转子的初始位置和跳线设置。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527908197009.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527908206823.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure></p><p>查找关键函数，根据官方wp，程序实现了转轮机，线性反馈移位寄存器，换位器等<br>输入：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527909005594.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br>长度要求是36<br>最后经过比较要相等：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527909263500.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br>中间三个处理函数：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527909344106.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure></p><p>sub_124F<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527909422356.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527909512441.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br>单个取输入字符进行处理，然后写入最后用于比较的outstr</p><p>sub_F1E<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527909689435.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527909700557.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure></p><p>sub_11F0<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527909809808.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure></p><p>因此对于输入的处理都是线性的，有爆破的可能<br>断点下在：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527910679359.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br>然后对存储结果处的数据进行比较：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527910745369.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527910774816.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure></p><p>这是比较取巧的方法，需要自动调用gdb</p><p>出题人的本意是对程序进行生逆，把密文逆成明文。。。<br>也有队伍是这么做的，服：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">with open(&apos;Enigma&apos;, &apos;rb&apos;) as f:</span><br><span class="line">    input_enc = list(f.read()[0x30a0:][:36])</span><br><span class="line"></span><br><span class="line">def bit(a, b):</span><br><span class="line">    return (a &gt;&gt; b) &amp; 1</span><br><span class="line"></span><br><span class="line"># sub_11F0</span><br><span class="line">state = 0x5F3759DF</span><br><span class="line">for i in range(9):</span><br><span class="line">    v16 = bit(state, 0) ^ bit(state, 2) ^ bit(state, 3) ^ bit(state, 5) ^ bit(state, 7) ^ bit(state, 31)</span><br><span class="line">    state = (state &gt;&gt; 1) | (v16 &lt;&lt; 31)</span><br><span class="line">    for j in range(4):</span><br><span class="line">        input_enc[i*4 + j] ^= (state &gt;&gt; (j*8)) &amp; 0xff</span><br><span class="line"></span><br><span class="line"># sub_F1E</span><br><span class="line">def partialRev(c):</span><br><span class="line">    c = bin(c)[2:].rjust(8, &apos;0&apos;)</span><br><span class="line">    c = list(map(int, c))</span><br><span class="line">    r = list(reversed(c))</span><br><span class="line">    c = r[:3] + c[3:5] + r[5:]</span><br><span class="line">    return int(&apos;&apos;.join(map(str, c)), 2)</span><br><span class="line">input_enc = list(map(partialRev, input_enc))</span><br><span class="line"></span><br><span class="line"># sub_124F</span><br><span class="line">wire = [</span><br><span class="line">    [ 0x31, 0x62, 0x93, 0xC4 ],</span><br><span class="line">    [ 0x21, 0x42, 0x63, 0x84 ],</span><br><span class="line">    [ 0x3D, 0x7A, 0xB7, 0xF4 ],</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">def _mix(a1, a2, a3):</span><br><span class="line">    a5 = a3 ^ a2 ^ a1</span><br><span class="line">    a4 = a2 &amp; a1 | a3 &amp; (a2 | a1)</span><br><span class="line">    return (a4, a5)</span><br><span class="line"></span><br><span class="line">def mix(a2, v16, a4):</span><br><span class="line">    bits = []</span><br><span class="line">    for i in range(8):</span><br><span class="line">        v4 = bit(a2, i)</span><br><span class="line">        v5 = bit(v16, i)</span><br><span class="line">        a4, a5 = _mix(v5, v4, a4)</span><br><span class="line">        bits.insert(0, a5)</span><br><span class="line">    return int(&apos;&apos;.join(map(str, bits)), 2), a4</span><br><span class="line"></span><br><span class="line">flag = []</span><br><span class="line">for i, t in enumerate(input_enc):</span><br><span class="line">    for c in range(32, 128):</span><br><span class="line">        a4 = 0</span><br><span class="line">        v16 = c</span><br><span class="line"></span><br><span class="line">        a2 = wire[0][i%4]</span><br><span class="line">        v16, a4 = mix(a2, v16, a4)</span><br><span class="line"></span><br><span class="line">        a2 = wire[1][(i//4%4)]</span><br><span class="line">        v16, a4 = mix(a2, v16, a4)</span><br><span class="line"></span><br><span class="line">        a2 = wire[2][i//16]</span><br><span class="line">        v16, a4 = mix(a2, v16, a4)</span><br><span class="line">        if v16 == t:</span><br><span class="line">            flag.append(c)</span><br><span class="line">            break</span><br><span class="line">print(bytes(flag).decode(&apos;ascii&apos;))</span><br></pre></td></tr></table></figure></p><p>首先获取最后结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">with open(&apos;Enigma&apos;, &apos;rb&apos;) as f:</span><br><span class="line">    input_enc = list(f.read()[0x30a0:][:36])</span><br><span class="line"></span><br><span class="line">print(input_enc)</span><br></pre></td></tr></table></figure></p><p>然后得到<strong>sub_11F0</strong>异或之前的结果<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527911287081.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br>该值是不是可以动态调试得到，内部有好多子函数，没有仔细分析<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">state = 0x5F3759DF</span><br><span class="line">for i in range(9):</span><br><span class="line">    v16 = bit(state, 0) ^ bit(state, 2) ^ bit(state, 3) ^ bit(state, 5) ^ bit(state, 7) ^ bit(state, 31)</span><br><span class="line">    state = (state &gt;&gt; 1) | (v16 &lt;&lt; 31)</span><br><span class="line">    for j in range(4):</span><br><span class="line">        input_enc[i*4 + j] ^= (state &gt;&gt; (j*8)) &amp; 0xff</span><br></pre></td></tr></table></figure></p><p>然后是<strong>sub_F1E</strong>的逆向：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527911593518.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def partialRev(c):</span><br><span class="line">    c = bin(c)[2:].rjust(8, &apos;0&apos;)</span><br><span class="line">    c = list(map(int, c))</span><br><span class="line">    r = list(reversed(c))</span><br><span class="line">    c = r[:3] + c[3:5] + r[5:]</span><br><span class="line">    return int(&apos;&apos;.join(map(str, c)), 2)</span><br><span class="line">input_enc = list(map(partialRev, input_enc))</span><br></pre></td></tr></table></figure></p><p>也是看起来比较头疼的函数</p><p>最后是<strong>sub_124F</strong>，因为比较复杂，采用了正向python模拟实现然后爆破的方式：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527911726618.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br>没有勇气看下去。。。。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">wire = [</span><br><span class="line">    [ 0x31, 0x62, 0x93, 0xC4 ],</span><br><span class="line">    [ 0x21, 0x42, 0x63, 0x84 ],</span><br><span class="line">    [ 0x3D, 0x7A, 0xB7, 0xF4 ],</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">def _mix(a1, a2, a3):</span><br><span class="line">    a5 = a3 ^ a2 ^ a1</span><br><span class="line">    a4 = a2 &amp; a1 | a3 &amp; (a2 | a1)</span><br><span class="line">    return (a4, a5)</span><br><span class="line"></span><br><span class="line">def mix(a2, v16, a4):</span><br><span class="line">    bits = []</span><br><span class="line">    for i in range(8):</span><br><span class="line">        v4 = bit(a2, i)</span><br><span class="line">        v5 = bit(v16, i)</span><br><span class="line">        a4, a5 = _mix(v5, v4, a4)</span><br><span class="line">        bits.insert(0, a5)</span><br><span class="line">    return int(&apos;&apos;.join(map(str, bits)), 2), a4</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;RoughLike与期末大作业&quot;&gt;&lt;a href=&quot;#RoughLike与期末大作业&quot; class=&quot;headerlink&quot; title=&quot;RoughLike与期末大作业&quot;&gt;&lt;/a&gt;RoughLike与期末大作业&lt;/h2&gt;&lt;p&gt;.Net逆向&lt;br&gt;首先承认，比赛的
      
    
    </summary>
    
      <category term="WriteUp" scheme="http://www.w4ter5heep.com/categories/WriteUp/"/>
    
    
      <category term="CTF" scheme="http://www.w4ter5heep.com/tags/CTF/"/>
    
      <category term="RE" scheme="http://www.w4ter5heep.com/tags/RE/"/>
    
  </entry>
  
  <entry>
    <title>StarCTF-BabyDroid</title>
    <link href="http://www.w4ter5heep.com/2018/05/02/StarCTF-BabyDroid/"/>
    <id>http://www.w4ter5heep.com/2018/05/02/StarCTF-BabyDroid/</id>
    <published>2018-05-01T16:04:08.000Z</published>
    <updated>2018-05-01T16:30:24.660Z</updated>
    
    <content type="html"><![CDATA[<p>逆向题目中唯一一道android逆向，做出来的过程也比较费力，这里简单记录。</p><p>安装程序发现会闪退，可能有反调试措施，首先进行静态分析。<br>JEB查看Java代码部分：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1525189773745.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br>关键方法是check0，同时注意到上面有许多check函数的native声明：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1525189793178.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br>从so文件中查找相关方法。首先在liba.so中找到了check0函数：<br>发现进一步调用的是check函数，但是在liba中没有相关信息，查找libb，没有直接找到check函数，考虑JNIOnLoad进行了注册，但是也没有找到JNIOnLoad函数，查找发现了sub_ED8函数：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1525189811484.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br>对一部分数据进行了解密，同时发现了：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1525189835087.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1525189839990.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br>所以JNIOnLoad函数会在运行时才解密：<br>解密的关键是这个值：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1525189852059.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br>进入sub_9B4发现计算的应该是一个校验和，<br>分析程序逻辑，写出计算校验和的脚本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">def crc32(ss):</span><br><span class="line">    v2 = i32(-1)</span><br><span class="line">    v7 = i32()</span><br><span class="line">    for s in ss:</span><br><span class="line">        if isinstance(s, bytes):</span><br><span class="line">            s = s[0]</span><br><span class="line">        for i in range(8):</span><br><span class="line">            v7.value = v2.value ^ (s &gt;&gt; i &lt;&lt; 31)</span><br><span class="line">            v2.value *= 2</span><br><span class="line">            if v7.value &lt;= -1:</span><br><span class="line">                # if not 0x4C11DB7 &amp; 1:</span><br><span class="line">                #     v2.value ^= 1</span><br><span class="line">                v2.value ^= 0x4C11DB7</span><br><span class="line">    return u32(-v2.value).value - 1</span><br></pre></td></tr></table></figure></p><p>得到libb的校验和：0x6674632a<br>解密libb.so可以得到JNIOnLoad：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1525189971044.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br>这里也进行了注册，将相关字符串进行解密可以发现就是对check函数的注册，解密脚本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">def xorstr():</span><br><span class="line">    def get_result(nums, key):</span><br><span class="line">        nums = [[((i &gt;&gt; (j * 8)) &amp; 0xff) for j in range(4)] for i in nums]</span><br><span class="line">        # nums = sum(nums, [])</span><br><span class="line">        nums = list(itertools.chain.from_iterable(nums))</span><br><span class="line">        nums = [i ^ key for i in itertools.takewhile(lambda i: i != 0, nums)]</span><br><span class="line"></span><br><span class="line">        b = bytes(nums)</span><br><span class="line">        return b</span><br><span class="line"></span><br><span class="line">    nums = [0xBCFEFCF0,</span><br><span class="line">            0xEAE9A1E2,</span><br><span class="line">            0xF1F2F1BC,</span><br><span class="line">            0xF7FDF2EA,</span><br><span class="line">            0xF7FAFCE1,</span><br><span class="line">            0xFAF2DEBC,</span><br><span class="line">            0xE7F0D2FD,</span><br><span class="line">            0xE7FAE5FA,</span><br><span class="line">            0xea]</span><br><span class="line"></span><br><span class="line">    print(get_result(nums, 0x93))</span><br><span class="line"></span><br><span class="line">    nums = [0x777C5A3E,</span><br><span class="line">            0x7A397760,</span><br><span class="line">            0x39717877,</span><br><span class="line">            0x7F646245,</span><br><span class="line">            0x3F2D7178,</span><br><span class="line">            0x4C]</span><br><span class="line">    print(get_result(nums, 0x16))</span><br><span class="line"></span><br><span class="line">    nums = [0x73757873, 0x7B]</span><br><span class="line">    print((get_result(nums, 0x10)))</span><br></pre></td></tr></table></figure></p><p>解密结果为：<br>com/q2zy/babyandroid/MainActivity<br> (Ljava/lang/String;)Z<br> check</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1525190067624.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><p>即是注册的函数，但是发现依然是乱码，注意到下面还有一段解密：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1525190079202.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure></p><p>这里用到了liba.so的校验和，计算发现也是0x6674632a<br>解密得到check 函数：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1525190090121.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br>再次用到了liba.so的校验和，分析逻辑写出解密脚本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">def get_flag():</span><br><span class="line">    crc = crc32(open(&apos;/Users/alset/Downloads/apk/lib/armeabi-v7a/liba.so&apos;, &apos;rb&apos;).read())</span><br><span class="line">    crc2 = crc * crc</span><br><span class="line">    checksums = [((crc2 &gt;&gt; (j * 8)) &amp; 0xff) for j in range(8)]</span><br><span class="line">    b = bytearray([</span><br><span class="line">        0xD5,</span><br><span class="line">        8,</span><br><span class="line">        0x4B,</span><br><span class="line">        0x11,</span><br><span class="line">        0xBF,</span><br><span class="line">        0xC,</span><br><span class="line">        0xB,</span><br><span class="line">        0x1F,</span><br><span class="line">        0xDC,</span><br><span class="line">        0x57,</span><br><span class="line">        0x64,</span><br><span class="line">        0x74,</span><br><span class="line">        0xB4,</span><br><span class="line">        0x6D,</span><br><span class="line">        0x5B,</span><br><span class="line">        0xD4,</span><br><span class="line">        0xEB,</span><br><span class="line">        0x1D,</span><br><span class="line">        0x51,</span><br><span class="line">        0xAE,</span><br><span class="line">        0xD5,</span><br><span class="line">        0x44,</span><br><span class="line">        8,</span><br><span class="line">        # 0</span><br><span class="line">    ])</span><br><span class="line">    for i in range(8):</span><br><span class="line">        for j in range(8):</span><br><span class="line">            b[i + j] ^= checksums[j]</span><br><span class="line">    i = 15</span><br><span class="line">    for j in range(8):</span><br><span class="line">        b[i + j] ^= checksums[j]</span><br><span class="line"></span><br><span class="line">    print(b)</span><br></pre></td></tr></table></figure></p><p>得到flag：1nTr3stIng-AnDr0id-A&amp;D!<br>完整解密脚本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">import mmap</span><br><span class="line">import itertools</span><br><span class="line">from ctypes import c_int32 as i32, c_uint32 as u32</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def memory_map(filename, access=mmap.ACCESS_COPY):</span><br><span class="line">    size = os.path.getsize(filename)</span><br><span class="line">    fd = os.open(filename, os.O_RDWR)</span><br><span class="line">    return mmap.mmap(fd, size, access=access)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def crc32(ss):</span><br><span class="line">    v2 = i32(-1)</span><br><span class="line">    v7 = i32()</span><br><span class="line">    for s in ss:</span><br><span class="line">        if isinstance(s, bytes):</span><br><span class="line">            s = s[0]</span><br><span class="line">        for i in range(8):</span><br><span class="line">            v7.value = v2.value ^ (s &gt;&gt; i &lt;&lt; 31)</span><br><span class="line">            v2.value *= 2</span><br><span class="line">            if v7.value &lt;= -1:</span><br><span class="line">                # if not 0x4C11DB7 &amp; 1:</span><br><span class="line">                #     v2.value ^= 1</span><br><span class="line">                v2.value ^= 0x4C11DB7</span><br><span class="line">    return u32(-v2.value).value - 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def recoverlibb():</span><br><span class="line">    m = memory_map(&apos;./apk/lib/armeabi-v7a/libb.so&apos;)</span><br><span class="line"></span><br><span class="line">    start = 0xab8</span><br><span class="line">    size = 0x420</span><br><span class="line">    # right_asm = [0xf0, 0xb5, 0x3, 0xaf]</span><br><span class="line">    # checksums = [m[start + i] ^ right_asm[i] for i in range(len(right_asm))]</span><br><span class="line">    checksum = crc32(m)</span><br><span class="line">    checksums = [((checksum &gt;&gt; (j * 8)) &amp; 0xff) for j in range(4)]</span><br><span class="line">    ichecksums = itertools.cycle(checksums)</span><br><span class="line">    for i in range(size):</span><br><span class="line">        m[start + i] = m[start + i] ^ next(ichecksums)</span><br><span class="line"></span><br><span class="line">    start += 0x27C</span><br><span class="line">    size -= 0x27C</span><br><span class="line">    for i in range(0, , 4):</span><br><span class="line">        m[start + i], m[start + i + 1], m[start + i + 2], m[start + i + 3] = m[start + i + 2], m[start + i + 3], m[</span><br><span class="line">            start + i], m[start + i + 1]</span><br><span class="line">    # right_asm = [0xFF, 0xF7, 0x3E, 0xEE]</span><br><span class="line">    # checksums = [m[start + size - 4 + i] ^ right_asm[i] for i in range(len(right_asm))]</span><br><span class="line">    checksum = crc32(open(&apos;./apk/lib/armeabi-v7a/liba.so&apos;, &apos;rb&apos;).read())</span><br><span class="line">    print(&apos;a: &apos;, checksum)</span><br><span class="line">    checksums = [((checksum &gt;&gt; (j * 8)) &amp; 0xff) for j in range(4)]</span><br><span class="line">    ichecksums = itertools.cycle(checksums)</span><br><span class="line">    for i in range(size):</span><br><span class="line">        m[start + i] = m[start + i] ^ next(ichecksums)</span><br><span class="line"></span><br><span class="line">    m.seek(0)</span><br><span class="line">    open(&apos;./apk/lib/armeabi-v7a/libbnew2.so&apos;, &apos;wb&apos;).write(m.read())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def xorstr():</span><br><span class="line">    def get_result(nums, key):</span><br><span class="line">        nums = [[((i &gt;&gt; (j * 8)) &amp; 0xff) for j in range(4)] for i in nums]</span><br><span class="line">        # nums = sum(nums, [])</span><br><span class="line">        nums = list(itertools.chain.from_iterable(nums))</span><br><span class="line">        nums = [i ^ key for i in itertools.takewhile(lambda i: i != 0, nums)]</span><br><span class="line"></span><br><span class="line">        b = bytes(nums)</span><br><span class="line">        return b</span><br><span class="line"></span><br><span class="line">    nums = [0xBCFEFCF0,</span><br><span class="line">            0xEAE9A1E2,</span><br><span class="line">            0xF1F2F1BC,</span><br><span class="line">            0xF7FDF2EA,</span><br><span class="line">            0xF7FAFCE1,</span><br><span class="line">            0xFAF2DEBC,</span><br><span class="line">            0xE7F0D2FD,</span><br><span class="line">            0xE7FAE5FA,</span><br><span class="line">            0xea]</span><br><span class="line"></span><br><span class="line">    print(get_result(nums, 0x93))</span><br><span class="line"></span><br><span class="line">    nums = [0x777C5A3E,</span><br><span class="line">            0x7A397760,</span><br><span class="line">            0x39717877,</span><br><span class="line">            0x7F646245,</span><br><span class="line">            0x3F2D7178,</span><br><span class="line">            0x4C]</span><br><span class="line">    print(get_result(nums, 0x16))</span><br><span class="line"></span><br><span class="line">    nums = [0x73757873, 0x7B]</span><br><span class="line">    print((get_result(nums, 0x10)))</span><br><span class="line"></span><br><span class="line">def get_flag():</span><br><span class="line">    crc = crc32(open(&apos;./apk/lib/armeabi-v7a/liba.so&apos;, &apos;rb&apos;).read())</span><br><span class="line">    crc2 = crc * crc</span><br><span class="line">    checksums = [((crc2 &gt;&gt; (j * 8)) &amp; 0xff) for j in range(8)]</span><br><span class="line">    b = bytearray([</span><br><span class="line">        0xD5,</span><br><span class="line">        8,</span><br><span class="line">        0x4B,</span><br><span class="line">        0x11,</span><br><span class="line">        0xBF,</span><br><span class="line">        0xC,</span><br><span class="line">        0xB,</span><br><span class="line">        0x1F,</span><br><span class="line">        0xDC,</span><br><span class="line">        0x57,</span><br><span class="line">        0x64,</span><br><span class="line">        0x74,</span><br><span class="line">        0xB4,</span><br><span class="line">        0x6D,</span><br><span class="line">        0x5B,</span><br><span class="line">        0xD4,</span><br><span class="line">        0xEB,</span><br><span class="line">        0x1D,</span><br><span class="line">        0x51,</span><br><span class="line">        0xAE,</span><br><span class="line">        0xD5,</span><br><span class="line">        0x44,</span><br><span class="line">        8,</span><br><span class="line">        # 0</span><br><span class="line">    ])</span><br><span class="line">    for i in range(8):</span><br><span class="line">        for j in range(8):</span><br><span class="line">            b[i + j] ^= checksums[j]</span><br><span class="line">    i = 15</span><br><span class="line">    for j in range(8):</span><br><span class="line">        b[i + j] ^= checksums[j]</span><br><span class="line"></span><br><span class="line">    print(b)</span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    # xorstr()</span><br><span class="line">    # recoverlibb()</span><br><span class="line">    get_flag()</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;逆向题目中唯一一道android逆向，做出来的过程也比较费力，这里简单记录。&lt;/p&gt;
&lt;p&gt;安装程序发现会闪退，可能有反调试措施，首先进行静态分析。&lt;br&gt;JEB查看Java代码部分：&lt;br&gt;&lt;figure class=&quot;image-bubble&quot;&gt;
           
      
    
    </summary>
    
      <category term="WriteUp" scheme="http://www.w4ter5heep.com/categories/WriteUp/"/>
    
    
      <category term="CTF" scheme="http://www.w4ter5heep.com/tags/CTF/"/>
    
      <category term="Mobile" scheme="http://www.w4ter5heep.com/tags/Mobile/"/>
    
  </entry>
  
  <entry>
    <title>HITB2018线上赛——Mobile</title>
    <link href="http://www.w4ter5heep.com/2018/04/15/HITB2018%E7%BA%BF%E4%B8%8A%E8%B5%9B%E2%80%94%E2%80%94Mobile/"/>
    <id>http://www.w4ter5heep.com/2018/04/15/HITB2018线上赛——Mobile/</id>
    <published>2018-04-15T15:16:39.000Z</published>
    <updated>2018-06-04T13:14:37.932Z</updated>
    
    <content type="html"><![CDATA[<p>最近参加了HITB2018，主要做了两道Mobile，简单整理题目。</p><h2 id="multicheck"><a href="#multicheck" class="headerlink" title="multicheck"></a>multicheck</h2><p>题目提示:Check！Check！Check！<br>大概是有陷阱。</p><p>安装apk，没有多余的提示，输入flag，进行验证。<br>首先jeb分析下java部分：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1523800589774.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>方法通过就可以了。<br>首先看到了上面：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1523800625353.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>似乎加载了一个方法。<br>解压apk包，找到assets中的claz.dex，赶快用jeb打开：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1523800798055.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>好像有flag，赶快手动排序得到了<strong>假的flag</strong>，提示大概是this is certainly not the flag，确实是坑。</p><p>只能继续分析so文件libcheck.so<br>JNI_OnLoad也没有有用信息，只能挨个看sub函数<br>找到sub_1380<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1523801512694.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>注意这一段，好像进行了解密和文件的替换，byte_4004^v9并赋值到v8即是对claz.dex文件的替换。<br>将byte_4004部分数据dump出来进行解密。保存为.dex，会发现是可以被解析的。可能就是真正的check。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1523801879224.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1523801940574.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>这部分的调用还是稍微有些复杂的，分析了半天本来想爆破的，但是注意到了一个特殊值，即：v5 = -1640531527，查看16进制：0x9E3779B9<br>搜索发现是Tea加密的特征值。直接从网上找可用的Tea加解密程序。过程十分曲折，找到的一些版本的程序，但是加解密结果各不相同，有点崩溃。。。终于找到一个较为标准的Java版，得到了结果。编程水平太差，只能复制粘贴，惭愧。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1523802539119.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>脚本如下：<br>生成.dex的脚本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line">a = [0x8D,0x8F,0x93,0xE6,0xDD,0xDD,0xDA,0xF0,0x74,0xF2,0x03,0x6D,0xC0,0xD3,0x07,0x29,</span><br><span class="line">0x9A,0x97,0xB7,0x3D,0xD6,0x0B,0xBC,0x53,0xF4,0x89,0x8E,0x08,0x21,0x52,0xE9,0x42,</span><br><span class="line">0x35,0x0D,0x0B,0x0C,0x7D,0x0E,0x0F,0x10,0x69,0x44,0x27,0x06,0x15,0x16,0x17,0x18,</span><br><span class="line">0x19,0x1A,0x1B,0x1C,0x81,0x18,0x1F,0x20,0x3D,0x22,0x23,0x24,0x55,0x26,0x27,0x28,</span><br><span class="line">0x22,0x2A,0x2B,0x2C,0xCD,0x2E,0x2F,0x30,0x3B,0x32,0x33,0x34,0x39,0x37,0x37,0x38,</span><br><span class="line">0x3B,0x3A,0x3B,0x3C,0xB9,0x3F,0x3F,0x40,0x4D,0x42,0x43,0x44,0xD1,0x47,0x47,0x48,</span><br><span class="line">0x48,0x4A,0x4B,0x4C,0xB9,0x4F,0x4F,0x50,0x79,0x57,0x53,0x54,0x41,0x54,0x57,0x58,</span><br><span class="line">0x75,0x5F,0x5B,0x5C,0x6B,0x5B,0x5F,0x60,0x5F,0x67,0x63,0x64,0x24,0x63,0x67,0x68,</span><br><span class="line">0x24,0x6F,0x6B,0x6C,0x3D,0x6B,0x6F,0x70,0x25,0x77,0x73,0x74,0x22,0x73,0x77,0x78,</span><br><span class="line">0x22,0x7F,0x7B,0x7C,0x1D,0x7B,0x7F,0x80,0xE6,0x87,0x83,0x84,0xF3,0x83,0x87,0x88,</span><br><span class="line">0x03,0x8F,0x8B,0x8C,0x13,0x8B,0x8F,0x90,0x23,0x97,0x93,0x94,0x53,0x93,0x97,0x98,</span><br><span class="line">0x50,0x9F,0x9B,0x9C,0x4C,0x9B,0x9F,0xA0,0x75,0xA7,0xA3,0xA4,0x7D,0xA3,0xA7,0xA8,</span><br><span class="line">0x74,0xAF,0xAB,0xAC,0x4C,0xAB,0xAF,0xB0,0x54,0xB7,0xB3,0xB4,0x5D,0xB3,0xB7,0xB8,</span><br><span class="line">0x4A,0xBF,0xBB,0xBC,0x4B,0xBB,0xBF,0xC0,0x3C,0xC7,0xC3,0xC4,0xC0,0xC0,0xC7,0xC8,</span><br><span class="line">0xCB,0xCA,0xCB,0xCC,0xC9,0xCE,0xCF,0xD0,0xDB,0xD2,0xD3,0xD4,0xDE,0xD6,0xD7,0xD8,</span><br><span class="line">0xD5,0xDA,0xDB,0xDC,0xD0,0xDE,0xDF,0xE0,0xEF,0xE2,0xE3,0xE4,0xEA,0xE6,0xE7,0xE8,</span><br><span class="line">0xF8,0xEA,0xEB,0xEC,0xF9,0xEE,0xEF,0xF0,0xE4,0xF2,0xF3,0xF4,0xF0,0xF6,0xF7,0xF8,</span><br><span class="line">0xF8,0xFA,0xFB,0xFC,0x1D,0xFA,0xFF,0x00,0x0E,0x02,0x03,0x04,0x02,0x06,0x07,0x08,</span><br><span class="line">0x09,0x0A,0x0B,0x0C,0x1D,0x0E,0x0F,0x10,0x16,0x12,0x13,0x14,0xFD,0x12,0x17,0x18,</span><br><span class="line">0x0B,0x1A,0x1B,0x1C,0x15,0x1E,0x1F,0x20,0xD9,0x26,0x23,0x24,0x36,0x26,0x27,0x28,</span><br><span class="line">0x21,0x2A,0x2B,0x2C,0x2D,0x2B,0x2F,0x30,0x37,0x32,0x33,0x34,0x3C,0x36,0x37,0x38,</span><br><span class="line">0x39,0x3A,0x3B,0x3C,0x3A,0x3E,0x3F,0x40,0x48,0x42,0x43,0x44,0x4D,0x43,0x47,0x48,</span><br><span class="line">0x40,0x4A,0x4B,0x4C,0x44,0x4E,0x4F,0x50,0x41,0x57,0x53,0x54,0x5D,0x56,0x57,0x58,</span><br><span class="line">0x50,0x5A,0x5B,0x5C,0x41,0x5B,0x5F,0x60,0x69,0x62,0x63,0x64,0x6F,0x66,0x67,0x68,</span><br><span class="line">0x4D,0x6F,0x6B,0x6C,0x6F,0x6E,0x65,0x70,0x67,0x72,0x73,0x74,0x77,0x76,0x7E,0x78,</span><br><span class="line">0x61,0x7A,0x7B,0x7C,0x7F,0x7E,0x7E,0x80,0x81,0x82,0x83,0x84,0x87,0x86,0x86,0x88,</span><br><span class="line">0x88,0x8A,0x8B,0x8C,0x8F,0x8E,0x8F,0x90,0x87,0x92,0x93,0x94,0x97,0x96,0x91,0x98,</span><br><span class="line">0x8F,0x9A,0x9B,0x9C,0x9F,0x9E,0x98,0xA0,0xB7,0xA2,0xA3,0xA4,0xA7,0xA6,0xAF,0xA8,</span><br><span class="line">0xBF,0xAA,0xAB,0xAC,0xAF,0xAE,0xA6,0xB0,0xA7,0xB2,0xB3,0xB4,0xB7,0xB6,0xB4,0xB8,</span><br><span class="line">0xA0,0xBA,0xBB,0xBC,0xBE,0xBE,0xBE,0xC0,0xC0,0xC2,0xC3,0xC4,0xC1,0xC6,0xC2,0xC8,</span><br><span class="line">0xD2,0xCA,0xCB,0xCC,0xC8,0xCE,0xCD,0xD0,0xC6,0xD2,0xD3,0xD4,0xD3,0xD6,0xD3,0xD8,</span><br><span class="line">0xC3,0xDA,0xDB,0xDC,0xDF,0xDE,0xDF,0xE0,0xE0,0xE2,0xE3,0xE4,0xE6,0xE6,0xE7,0xE8,</span><br><span class="line">0xE9,0xEA,0xEB,0xEC,0xEE,0xEE,0xEF,0xF0,0xF1,0xF2,0xF3,0xF4,0x85,0xF0,0xF7,0xF8,</span><br><span class="line">0xF9,0xFA,0xFB,0xFC,0xFC,0xFE,0xFF,0x00,0x01,0x02,0x03,0x04,0x0A,0x00,0x07,0x08,</span><br><span class="line">0x3B,0x0A,0x0B,0x0C,0x1F,0x4E,0x2C,0x10,0x1B,0x12,0x35,0x14,0x1A,0x16,0x17,0x18,</span><br><span class="line">0x70,0x1A,0x1B,0x1C,0x0E,0x1E,0x3F,0x20,0x02,0x22,0x2A,0x24,0x03,0x26,0x35,0x28,</span><br><span class="line">0x29,0x2A,0x42,0x2C,0x2C,0x2E,0x21,0x30,0x31,0x31,0x37,0x34,0x31,0x36,0x37,0x38,</span><br><span class="line">0x92,0x91,0x90,0x97,0xF0,0xF3,0xF2,0x8D,0xAE,0xAD,0xAC,0xAB,0x3D,0x10,0x73,0x5A,</span><br><span class="line">0x49,0x49,0x4A,0x4C,0x6D,0x4E,0x4F,0x50,0x32,0x2E,0x36,0xBD,0xDB,0x07,0x86,0x81,</span><br><span class="line">0xC3,0x15,0x4D,0x68,0x84,0xFC,0xE1,0xD8,0x04,0x8C,0x2A,0x81,0x50,0x9D,0x49,0x84,</span><br><span class="line">0x08,0x61,0xA3,0x48,0x80,0xA1,0xFF,0xC5,0x70,0x72,0x72,0x74,0x74,0x76,0x77,0x78,</span><br><span class="line">0x64,0x7C,0x7B,0x7C,0x79,0x7E,0x7F,0x80,0xF1,0x92,0x8B,0x84,0x85,0x86,0x89,0x88,</span><br><span class="line">0x88,0x8A,0x8A,0x8C,0x8D,0x8E,0x8F,0x90,0xB3,0x94,0x93,0x94,0x90,0x96,0x97,0x98,</span><br><span class="line">0xA2,0x9A,0x9F,0x9C,0x4D,0x9E,0x9F,0xA1,0xAE,0xA2,0xA3,0xA4,0xA2,0xA6,0xA6,0xA8,</span><br><span class="line">0xAC,0xAA,0xAB,0xAC,0x86,0xA8,0xAF,0xB0,0x98,0xB2,0xB3,0xB4,0xA7,0xB7,0x96,0xD8,</span><br><span class="line">0x65,0xBA,0xBB,0xB4,0x64,0xBE,0xBF,0xC8,0xE0,0xA0,0x73,0xC6,0xE6,0xE4,0xCE,0xC8,</span><br><span class="line">0x44,0xC9,0x84,0xCF,0xCF,0xCF,0xEE,0xB3,0xA0,0x81,0xD9,0xD4,0xC3,0xD4,0xF6,0xF8,</span><br><span class="line">0xFA,0xD9,0xD2,0xDC,0xDC,0xCE,0xFE,0xD4,0xD4,0xA2,0xF1,0xE4,0x87,0xE2,0xE7,0xE8,</span><br><span class="line">0xFA,0xEF,0xCB,0xEC,0x9C,0xAE,0xEB,0xF0,0xF3,0xA6,0xFF,0xF0,0xE6,0xF3,0xFF,0xF8,</span><br><span class="line">0x88,0xAF,0xF1,0xFC,0xE9,0xFD,0x27,0x00,0x01,0x0A,0x2B,0xEA,0x14,0x05,0x07,0x08,</span><br><span class="line">0x19,0x0A,0x0F,0x0C,0x0F,0x0E,0x0F,0x10,0x2B,0x14,0x13,0x14,0x56,0x16,0x17,0x18,</span><br><span class="line">0x68,0x3A,0x1D,0x1C,0xC1,0x1E,0x13,0x24,0x33,0x22,0x67,0x27,0x21,0x26,0x35,0x38,</span><br><span class="line">0x6D,0x28,0x2F,0x2C,0x3F,0x2F,0x3B,0x35,0x88,0x4B,0x04,0xAA,0x27,0x36,0x73,0x3E,</span><br><span class="line">0x37,0x3A,0x29,0x2C,0x79,0x39,0x31,0x40,0x53,0x62,0x07,0x4C,0x4B,0x46,0x55,0x78,</span><br><span class="line">0x0D,0x43,0x45,0x4C,0x5F,0x4E,0x7A,0xA0,0x4D,0x52,0xE3,0x05,0xB5,0x5C,0x55,0x5C,</span><br><span class="line">0xE9,0x30,0xCB,0x57,0x5F,0x5F,0xE8,0xDA,0x80,0x69,0x61,0x61,0xD5,0x1D,0xD0,0xD2,</span><br><span class="line">0xD9,0xC9,0x8B,0x66,0x6E,0x6A,0xDF,0xFA,0xE1,0x79,0x70,0x75,0xC2,0xCC,0x96,0x73,</span><br><span class="line">0x7A,0x7F,0xCB,0xE7,0xCA,0xC4,0xCF,0x22,0x59,0x82,0x83,0x85,0xAD,0x63,0x95,0x88,</span><br><span class="line">0xC2,0x89,0x8F,0x8C,0x9F,0x9E,0xC4,0x92,0x95,0x92,0x81,0x94,0xE4,0xB6,0x92,0x98,</span><br><span class="line">0x9D,0x9A,0x97,0x9C,0x8C,0x9E,0x9F,0xA0,0xA7,0xA2,0xA1,0xA4,0xA5,0xA6,0xA7,0xA8,</span><br><span class="line">0xE7,0xAC,0xAB,0xAC,0x9A,0xAE,0xAF,0xB0,0x90,0xF2,0x53,0xB4,0xB5,0xB4,0x94,0xB9,</span><br><span class="line">0xB0,0xBA,0xA9,0xBC,0x9C,0xAC,0x8A,0xE5,0xEE,0xC2,0x1B,0xC6,0xC0,0xC5,0x83,0xCB,</span><br><span class="line">0xCD,0xCA,0x1E,0xFF,0x32,0xCE,0x42,0xE3,0x9E,0xD1,0xD2,0xD6,0x0D,0xD4,0xD2,0xDA,</span><br><span class="line">0x9D,0xD9,0xDF,0xDC,0x3C,0xDD,0xDC,0xE8,0x34,0xD1,0x1C,0xE4,0x68,0xD5,0xA8,0xEB,</span><br><span class="line">0xE8,0xE8,0x33,0xEE,0xE8,0xEF,0xAB,0xF3,0xF5,0xF2,0x12,0xF7,0xF6,0xE6,0x22,0xCB,</span><br><span class="line">0x06,0xFA,0x76,0xCF,0xB2,0xFD,0xFE,0x02,0x45,0x00,0x07,0x04,0xE4,0x04,0x05,0x10,</span><br><span class="line">0xDC,0x28,0xF4,0x0C,0x80,0x2C,0x40,0x12,0x10,0x17,0xCB,0x14,0x15,0x17,0xCF,0x1D,</span><br><span class="line">0x1C,0x1E,0x33,0xCD,0x0C,0x1F,0x1F,0x20,0x27,0x22,0x21,0x24,0x24,0x26,0x27,0x28,</span><br><span class="line">0x75,0x2C,0x2B,0x2C,0x19,0x2E,0x2F,0x30,0x10,0x72,0xD2,0x34,0x35,0x34,0x14,0x39,</span><br><span class="line">0x33,0x3A,0x29,0x3C,0x1C,0x7C,0x0A,0x65,0x6D,0x42,0x9B,0x46,0x40,0x45,0x0F,0x4A,</span><br><span class="line">0x4D,0x48,0x3A,0x5C,0x4F,0x4E,0x4D,0x50,0x5B,0x50,0x8B,0x57,0x50,0x54,0x1F,0x5B,</span><br><span class="line">0x5D,0x59,0x2A,0x4C,0x5F,0x5E,0x5C,0x60,0x6B,0x61,0x83,0x67,0x66,0x6E,0xD1,0x5A,</span><br><span class="line">0xB1,0x69,0x6E,0x6D,0x25,0x6D,0x6B,0x73,0x00,0x62,0x71,0x74,0x76,0x76,0x7D,0x7B,</span><br><span class="line">0x99,0x79,0x78,0x6C,0xCB,0x4C,0x37,0x83,0x85,0x87,0x63,0x87,0x86,0x9E,0x31,0xBA,</span><br><span class="line">0xC2,0x88,0x8A,0x8C,0x55,0x8E,0x8F,0x91,0x49,0x97,0x96,0x90,0xBD,0x42,0x86,0x99,</span><br><span class="line">0x9A,0x9A,0x9A,0x9C,0x9F,0x9E,0x9F,0xA0,0xCB,0xA4,0xA3,0xA4,0xAA,0xA6,0xA7,0xA8,</span><br><span class="line">0xC7,0xBA,0xA2,0xAC,0xAF,0xAE,0xA3,0xB0,0xC0,0xA2,0xB0,0xB4,0xB5,0xB6,0xBB,0xB8,</span><br><span class="line">0xDB,0xBB,0xBA,0xBC,0xCC,0x9E,0xB4,0xC0,0xD1,0xC2,0xC9,0xC4,0xCA,0xC6,0xC7,0xC8,</span><br><span class="line">0xC8,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD4,0xD2,0xD3,0xD4,0xD6,0xD6,0xD6,0xD8,</span><br><span class="line">0xDA,0xDA,0xDA,0xDC,0xDC,0xDE,0xDF,0xE0,0xE0,0xE2,0xE3,0xE4,0xE1,0xE6,0xE7,0xE8,</span><br><span class="line">0xEB,0xEA,0xEB,0xEC,0xE4,0xEE,0xE6,0xF0,0xF0,0xF2,0xF3,0xF4,0xFC,0xF6,0xF7,0xF8,</span><br><span class="line">0xFD,0xFA,0xFB,0xFC,0xF4,0xFE,0xFE,0x00,0x0B,0x02,0x02,0x04,0x07,0x06,0x07,0x08,</span><br><span class="line">0x03,0x0A,0x0A,0x0C,0x0F,0x0E,0x0F,0x10,0x18,0x12,0x12,0x14,0x1D,0x2A,0x74,0x74,</span><br><span class="line">0x70,0x74,0x72,0x68,0x23,0x1E,0x19,0x1C,0x48,0x4C,0x4A,0x50,0x1B,0x26,0x26,0x6A,</span><br><span class="line">0x29,0x20,0x68,0x44,0x48,0x4D,0x44,0x1E,0x5B,0x53,0x45,0x55,0x35,0x37,0x7E,0x38,</span><br><span class="line">0x3B,0x73,0x79,0x3C,0x3C,0x72,0x3F,0x42,0x0D,0x0E,0x43,0x47,0x09,0x0A,0x0E,0x48,</span><br><span class="line">0x4C,0x06,0x07,0x05,0x01,0x07,0x4F,0x5D,0x1D,0x31,0x3C,0x39,0x7A,0x37,0x78,0x1B,</span><br><span class="line">0x31,0x3F,0x38,0x37,0x66,0x5E,0x4D,0x2C,0x0B,0x03,0x15,0x05,0x4A,0x0A,0x06,0x06,</span><br><span class="line">0x0E,0x45,0x24,0x0E,0x07,0x0B,0x0C,0x04,0x4A,0x72,0x61,0x38,0x1F,0x17,0x01,0x19,</span><br><span class="line">0x56,0x16,0x1A,0x12,0x1A,0x51,0x2C,0xF4,0xF3,0xEB,0xED,0xE3,0xBE,0x86,0x95,0xC4,</span><br><span class="line">0xE3,0xEB,0xFD,0xED,0xA2,0xE2,0xEE,0xFE,0xF6,0xBD,0xC0,0xED,0xE6,0xE2,0xF2,0xF5,</span><br><span class="line">0xA2,0x9A,0x89,0xD0,0xF7,0xFF,0xE9,0xC1,0x8E,0xD7,0xD7,0xCD,0xC9,0x89,0xE6,0xDA,</span><br><span class="line">0xDB,0xCB,0xD2,0xDF,0x96,0xAE,0xAE,0xE6,0xB1,0xB4,0xE5,0xF8,0xFC,0xFA,0xFE,0xF1,</span><br><span class="line">0xB9,0xBB,0xE1,0xBC,0xBF,0xE4,0xF3,0xC0,0xC2,0x98,0x8F,0x88,0xC5,0xC4,0x9C,0x8A,</span><br><span class="line">0xC9,0xC8,0x90,0x85,0xCD,0xCF,0xAE,0xD0,0xD8,0xB3,0xA1,0xA6,0xB4,0xAF,0xB4,0xB7,</span><br><span class="line">0xA9,0xA3,0xDB,0xDD,0xBF,0xDE,0xDA,0x83,0x89,0x87,0x80,0x8F,0xE5,0xE0,0x82,0x99,</span><br><span class="line">0x9C,0x8B,0x87,0x9F,0xED,0xE6,0x88,0x95,0x85,0xB0,0x8A,0x80,0x90,0x85,0xF7,0xC4,</span><br><span class="line">0xF9,0xFD,0xF5,0xFE,0xE8,0x78,0xFD,0x6B,0xA5,0x00,0x16,0xC6,0x05,0x03,0x07,0x0F,</span><br><span class="line">0x07,0x0A,0x38,0x0D,0x0D,0x09,0x01,0x1F,0x3C,0x3C,0x13,0x50,0x14,0x16,0x10,0x05,</span><br><span class="line">0x43,0x51,0x27,0x57,0x56,0x22,0x98,0x77,0x1E,0x22,0x2B,0x20,0x25,0x26,0x27,0x28,</span><br><span class="line">0x2E,0x24,0x60,0x54,0x11,0xEA,0x12,0x2E,0x85,0x9D,0x72,0x08,0x09,0x36,0x10,0x3A,</span><br><span class="line">0x39,0x3A,0x3C,0x32,0x67,0x75,0xA9,0xF4,0xF5,0xD3,0x1C,0x44,0x59,0x44,0x47,0x48,</span><br><span class="line">0x4E,0x44,0x11,0x07,0x4C,0x59,0x40,0x8E,0x0C,0x52,0x07,0x55,0x55,0x51,0x59,0x58,</span><br><span class="line">0x5B,0x5A,0x53,0x5C,0x5D,0x54,0x5E,0x6A,0x61,0xEA,0xE3,0x60,0xF1,0x62,0x66,0xE9,</span><br><span class="line">0xE9,0x6E,0xE3,0x69,0x6C,0x64,0xCF,0x75,0x70,0x7B,0xCF,0x71,0x74,0x7E,0xD7,0x7E,</span><br><span class="line">0x78,0x70,0xC3,0x7B,0x7C,0x74,0xC7,0x88,0x80,0x8B,0x33,0x8D,0x88,0x86,0x87,0x88,</span><br><span class="line">0x89,0x8A,0x8B,0x8C,0x8C,0x8E,0x8F,0x90,0x91,0x92,0x93,0x94,0x94,0x96,0x97,0x98,</span><br><span class="line">0x85,0x9A,0x9B,0x9C,0xED,0x9E,0x9F,0xA0,0xA3,0xA2,0xA3,0xA4,0xAE,0xA6,0xA7,0xA8,</span><br><span class="line">0x49,0xAA,0xAB,0xAC,0xAE,0xAE,0xAF,0xB0,0xBB,0xB2,0xB3,0xB4,0xB9,0xB7,0xB7,0xB8,</span><br><span class="line">0xBD,0xBA,0xBB,0xBC,0xBF,0xBE,0xBF,0xC0,0x45,0xC3,0xC3,0xC4,0xC0,0xC6,0xC7,0xC8,</span><br><span class="line">0xC5,0xCA,0xCB,0xCC,0x59,0xCF,0xCF,0xD0,0xD7,0xD2,0xD3,0xD4,0xD4,0xD6,0xD7,0xD8,</span><br><span class="line">0x2D,0xDB,0xDB,0xDC,0xDC,0xFE,0xDF,0xE0,0xE9,0xE2,0xE3,0xE4,0xF1,0xE4,0xE7,0xE8,</span><br><span class="line">0xE8,0xFA,0xEB,0xEC,0xE5,0xEE,0xEF,0xF0,0x11,0xF6,0xF3,0xF4,0xF7,0xD6,0xF7,0xF8,</span><br><span class="line">0xE5,0xFA,0xFB,0xFC,0xD1,0xFB,0xFF,0x00,0x02,0x22,0x03,0x04,0x0D,0x06,0x07,0x08,</span><br><span class="line">0x06,0x0C,0x0B,0x0C,0x0D,0x2E,0x0F,0x10,0x10,0x12,0x13,0x14,0x65,0x10,0x17,0x18,</span><br><span class="line">0x19,0x0A,0x1B,0x1C,0x1C,0x1E,0x1F,0x20,0xBD,0x24,0x23,0x24]</span><br><span class="line"></span><br><span class="line">v9 = 233</span><br><span class="line">out = &quot;&quot;</span><br><span class="line">for i in range(0x73c):</span><br><span class="line">    tmp = (a[i]^v9)&amp;0xFF</span><br><span class="line">    out += chr(tmp)</span><br><span class="line">    v9 += 1</span><br><span class="line"></span><br><span class="line">fp = open(&quot;claz2.dex&quot;, &quot;wb&quot;)</span><br><span class="line">fp.write(out)</span><br><span class="line">fp.close()</span><br></pre></td></tr></table></figure></p><p>Tea的加解密程序：<br>该java版本还是较为标准的实现，可以收藏。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">package hitb2018;</span><br><span class="line"></span><br><span class="line">public class Tea &#123;</span><br><span class="line">    private final static int[] KEY = new int[]&#123;//加密解密所用的KEY</span><br><span class="line">        0xABABABAB, 0xCDCDCDCD,</span><br><span class="line">        0xEFEFEFEF, 0x12345678</span><br><span class="line">    &#125;;</span><br><span class="line">    //加密</span><br><span class="line">    public static byte[] encrypt(byte[] content, int offset, int[] key, int times)&#123;//times为加密轮数</span><br><span class="line">        int[] tempInt = byteToInt(content, offset);</span><br><span class="line">        int y = tempInt[0], z = tempInt[1], sum = 0, i;</span><br><span class="line">        int delta=0x9e3779b9; //这是算法标准给的值</span><br><span class="line">        int a = key[0], b = key[1], c = key[2], d = key[3]; </span><br><span class="line"></span><br><span class="line">        for (i = 0; i &lt; times; i++) &#123;   </span><br><span class="line">            </span><br><span class="line">            sum += delta;</span><br><span class="line">            y += ((z&lt;&lt;4) + a) ^ (z + sum) ^ ((z&gt;&gt;5) + b);</span><br><span class="line">            z += ((y&lt;&lt;4) + c) ^ (y + sum) ^ ((y&gt;&gt;5) + d);</span><br><span class="line">        &#125;</span><br><span class="line">        tempInt[0]=y;</span><br><span class="line">        tempInt[1]=z; </span><br><span class="line">        return intToByte(tempInt, 0);</span><br><span class="line">    &#125;</span><br><span class="line">    //解密</span><br><span class="line">    public static byte[] decrypt(byte[] encryptContent, int offset, int[] key, int times)&#123;</span><br><span class="line">        int[] tempInt = byteToInt(encryptContent, offset);</span><br><span class="line">        int y = tempInt[0], z = tempInt[1], sum = 0, i;</span><br><span class="line">        int delta=0x9e3779b9; //这是算法标准给的值</span><br><span class="line">        int a = key[0], b = key[1], c = key[2], d = key[3];</span><br><span class="line">        if (times == 32)</span><br><span class="line">            sum = 0xC6EF3720; /* delta &lt;&lt; 5*/</span><br><span class="line">        else if (times == 16)</span><br><span class="line">            sum = 0xE3779B90; /* delta &lt;&lt; 4*/</span><br><span class="line">        else</span><br><span class="line">            sum = delta * times;</span><br><span class="line"></span><br><span class="line">        for(i = 0; i &lt; times; i++) &#123; </span><br><span class="line">            z -= ((y&lt;&lt;4) + c) ^ (y + sum) ^ ((y&gt;&gt;5) + d);</span><br><span class="line">            y -= ((z&lt;&lt;4) + a) ^ (z + sum) ^ ((z&gt;&gt;5) + b);</span><br><span class="line">            sum -= delta; </span><br><span class="line">        &#125;</span><br><span class="line">        tempInt[0] = y;</span><br><span class="line">        tempInt[1] = z;</span><br><span class="line"></span><br><span class="line">        return intToByte(tempInt, 0);</span><br><span class="line">    &#125;</span><br><span class="line">    //byte[]型数据转成int[]型数据</span><br><span class="line">    private static int[] byteToInt(byte[] content, int offset)&#123;</span><br><span class="line"></span><br><span class="line">        int[] result = new int[content.length &gt;&gt; 2];//除以2的n次方 == 右移n位 即 content.length / 4 == content.length &gt;&gt; 2</span><br><span class="line">        for(int i = 0, j = offset; j &lt; content.length; i++, j += 4)&#123;</span><br><span class="line">            result[i] = transform(content[j + 3]) | transform(content[j + 2]) &lt;&lt; 8 |</span><br><span class="line">            transform(content[j + 1]) &lt;&lt; 16 | (int)content[j] &lt;&lt; 24;</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    //int[]型数据转成byte[]型数据</span><br><span class="line">    private static byte[] intToByte(int[] content, int offset)&#123;</span><br><span class="line">        byte[] result = new byte[content.length &lt;&lt; 2];//乘以2的n次方 == 左移n位 即 content.length * 4 == content.length &lt;&lt; 2</span><br><span class="line">        for(int i = 0, j = offset; j &lt; result.length; i++, j += 4)&#123;</span><br><span class="line">            result[j + 3] = (byte)(content[i] &amp; 0xff);</span><br><span class="line">            result[j + 2] = (byte)((content[i] &gt;&gt; 8) &amp; 0xff);</span><br><span class="line">            result[j + 1] = (byte)((content[i] &gt;&gt; 16) &amp; 0xff);</span><br><span class="line">            result[j] = (byte)((content[i] &gt;&gt; 24) &amp; 0xff);</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">    //若某字节为负数则需将其转成无符号正数</span><br><span class="line">    private static int transform(byte temp)&#123;</span><br><span class="line">        int tempInt = (int)temp;</span><br><span class="line">        if(tempInt &lt; 0)&#123;</span><br><span class="line">            tempInt += 256;</span><br><span class="line">        &#125;</span><br><span class="line">        return tempInt;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        byte[] enContent = new byte[]&#123;99, 124, 101, -23, -114, 81, -47, -39, -102, 79, 22, 52, -39, -94, -66, -72, 101, -18, 73, -27, 53, -5, 46, -20, 97, 11, -56, 36, -19, -49, -112, -75&#125;;</span><br><span class="line">        for(int j=0;j&lt;4;j++)&#123;</span><br><span class="line">            byte[] deContent = decrypt(enContent,j*8,KEY,32);</span><br><span class="line">            for(int i = 0;i &lt; 8;i++)&#123;</span><br><span class="line">                System.out.print((char)deContent[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其实对整个程序的动态加载和替换过程还不是很了解。<br>题目有点小坑，但是还能接受。<br><strong>HITB{SEe!N9_IsN’T_bELIEV1Ng}</strong></p><h2 id="kivy-simple"><a href="#kivy-simple" class="headerlink" title="kivy simple"></a>kivy simple</h2><p>apk包有点大，但是安装以后也没有特别的功能。首先搜索kivy，kivy是使用python进行全平台应用开发的框架，该apk也是使用该python框架进行开发的，通过JEB对java代码以及IDA对so文件的分析，并没有发现程序的主逻辑。<br>进一步，通过学习kivy框架的开发以及程序打包流程，同时注意到了解压缩后在assets中的private.mp3文件，猜测为压缩包。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1523803089035.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>修改文件名后缀，解压得到部分文件(这里注意，在不同平台下可能要解压两次，比如windows下)<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1523803110977.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>找到了python 编写的主函数等文件<br>使用uncompyle6对main.pyo得到main.py：<br>其中有一段：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">def check(self):</span><br><span class="line">    if self.flag.text == &apos;HITB&#123;this_is_not_flag&#125;&apos;:</span><br><span class="line">        return True</span><br><span class="line">    return False</span><br><span class="line"></span><br><span class="line">def auth(self, instance):</span><br><span class="line">    if self.check():</span><br><span class="line">        s = &apos;Congratulations you got the flag&apos;</span><br><span class="line">    else:</span><br><span class="line">        s = &apos;Wrong answer&apos;</span><br><span class="line">    popup = Popup(title=&apos;result&apos;, content=Label(text=s), auto_dismiss=True)</span><br><span class="line">    popup.open()</span><br></pre></td></tr></table></figure></p><p>逻辑很简单，但HITB{this_is_not_flag}不是答案，还是骗人的。<br>注意到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b64 = &apos;eJzF1MtOE2EUB/DzTculUKAUKJSr3OqIV0TBGEOMRqIuatJhowsndTrVA+MlnYEYhZXEhQuXLlz4CC58BBc+ggsfwYWPYDznhHN8BJr5Tv7fby6Z8/VrIzj+eDRu0kirVFoARwCPAGI6HOx4EBI6CHy+LHLH1/O4zfd8onQAsEOHg0MHmQcHDt45vmc3B50FyHIQELU8qLZyYutmebIusftm3WQ9Yo/NeskKYh2zPrJ+sfdmRbIBsc9mg2RDYl/NSmTDYt/NymQjYj/NRsnGxH6bVcjGxf6aTZBVxcpObdL6rZlNkU2LXTebsT7qZrP2fk/M5shOie2bzdvzPpgtkC2KfTFbIlsW+2ZWIzst9sPMJzsj9stsheys2B+zc2TnxTxP7YL1UTG7aLZidolsVWzT7LL11jBbI7si1ja7SrYu9sZsw+yjWJaHgHZx4F+j/VnHOao4TCXjvbuBQxqXsV9jgDmNt7CiMURP4zZOaXyA3RrncVTjEpY0djCv8S2Oa3yF/OtC0PldLPN8hkuf4ioO8nxA5zWc1LiITuM97NG4hbMaD3FE4z4W+TEFLhOKD7GL59M6r+OYxjXsperz+YzfvZ00n0rI4tdZxkuTxC8yPr3VTNJYTm139mL5S5BZGidteVTqc4dSMil8V/Qsjnb52vSIzRVdGfKu5E5seHWfu2rw3sj460yjTkwt8oqFYZQ00zQM/3cipSErzQt14/nL1l4Sb0pHXAp3/gENPMQt&apos;</span><br><span class="line">eval(marshal.loads(zlib.decompress(binascii.a2b_base64(b64))))</span><br></pre></td></tr></table></figure></p><p>说明程序可能进行了动态的加载和替换。<br>将zlib.decompress(binascii.a2b_base64(b64))后的内容实际上是PythonCodeObject对象，通过查找资料，可以将该对象转化为.pyc文件，进而反编译。<br>转换代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import py_compile</span><br><span class="line">import imp</span><br><span class="line">import os</span><br><span class="line">import binascii</span><br><span class="line">import zlib</span><br><span class="line">import marshal</span><br><span class="line"></span><br><span class="line">def pycodeobject2pyc(pyobj, pycfile):</span><br><span class="line">    with open(pycfile, &apos;wb&apos;) as fc: </span><br><span class="line">        fc.write(&apos;\0\0\0\0&apos;)</span><br><span class="line">        timestamp = long(os.fstat(fc.fileno()).st_mtime)</span><br><span class="line">        py_compile.wr_long(fc, timestamp)</span><br><span class="line">        marshal.dump(pyobj, fc)</span><br><span class="line">        fc.flush()</span><br><span class="line">        fc.seek(0, 0)</span><br><span class="line">        MAGIC = imp.get_magic()</span><br><span class="line">        fc.write(MAGIC)</span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">        b64 = &apos;eJzF1MtOE2EUB/DzTculUKAUKJSr3OqIV0TBGEOMRqIuatJhowsndTrVA+MlnYEYhZXEhQuXLlz4CC58BBc+ggsfwYWPYDznhHN8BJr5Tv7fby6Z8/VrIzj+eDRu0kirVFoARwCPAGI6HOx4EBI6CHy+LHLH1/O4zfd8onQAsEOHg0MHmQcHDt45vmc3B50FyHIQELU8qLZyYutmebIusftm3WQ9Yo/NeskKYh2zPrJ+sfdmRbIBsc9mg2RDYl/NSmTDYt/NymQjYj/NRsnGxH6bVcjGxf6aTZBVxcpObdL6rZlNkU2LXTebsT7qZrP2fk/M5shOie2bzdvzPpgtkC2KfTFbIlsW+2ZWIzst9sPMJzsj9stsheys2B+zc2TnxTxP7YL1UTG7aLZidolsVWzT7LL11jBbI7si1ja7SrYu9sZsw+yjWJaHgHZx4F+j/VnHOao4TCXjvbuBQxqXsV9jgDmNt7CiMURP4zZOaXyA3RrncVTjEpY0djCv8S2Oa3yF/OtC0PldLPN8hkuf4ioO8nxA5zWc1LiITuM97NG4hbMaD3FE4z4W+TEFLhOKD7GL59M6r+OYxjXsperz+YzfvZ00n0rI4tdZxkuTxC8yPr3VTNJYTm139mL5S5BZGidteVTqc4dSMil8V/Qsjnb52vSIzRVdGfKu5E5seHWfu2rw3sj460yjTkwt8oqFYZQ00zQM/3cipSErzQt14/nL1l4Sb0pHXAp3/gENPMQt&apos;</span><br><span class="line">        data = marshal.loads(zlib.decompress(binascii.a2b_base64(b64)))</span><br><span class="line">        pycodeobject2pyc(data, &quot;apk2.pyc&quot;)</span><br></pre></td></tr></table></figure></p><p>该段代码参考了<a href="https://segmentfault.com/q/1010000003052356" target="_blank" rel="noopener">https://segmentfault.com/q/1010000003052356</a></p><p>PythonCodeObject转换为.pyc也费了一番功夫，基础不扎实，不知道该怎么处理。太菜了。<br>再次用uncompyle6进行反编译得到真正的check代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">def check(self):</span><br><span class="line">    s = self.flag.text</span><br><span class="line">    if len(s) != 31:</span><br><span class="line">        return False</span><br><span class="line">    if s[17] != &apos;7&apos;:</span><br><span class="line">        return False</span><br><span class="line">    if s[15] != &apos;%&apos;:</span><br><span class="line">        return False</span><br><span class="line">    if s[11] != &apos;S&apos;:</span><br><span class="line">        return False</span><br><span class="line">    if s[3] != &apos;B&apos;:</span><br><span class="line">        return False</span><br><span class="line">    if s[22] != &apos;_&apos;:</span><br><span class="line">        return False</span><br><span class="line">    if s[2] != &apos;T&apos;:</span><br><span class="line">        return False</span><br><span class="line">    if s[27] != &apos;O&apos;:</span><br><span class="line">        return False</span><br><span class="line">    if s[6] != &apos;!&apos;:</span><br><span class="line">        return False</span><br><span class="line">    if s[20] != &apos;$&apos;:</span><br><span class="line">        return False</span><br><span class="line">    if s[16] != &apos;r&apos;:</span><br><span class="line">        return False</span><br><span class="line">    if s[4] != &apos;&#123;&apos;:</span><br><span class="line">        return False</span><br><span class="line">    if s[23] != &apos;p&apos;:</span><br><span class="line">        return False</span><br><span class="line">    if s[25] != &apos;7&apos;:</span><br><span class="line">        return False</span><br><span class="line">    if s[0] != &apos;H&apos;:</span><br><span class="line">        return False</span><br><span class="line">    if s[18] != &apos;_&apos;:</span><br><span class="line">        return False</span><br><span class="line">    if s[29] != &apos;!&apos;:</span><br><span class="line">        return False</span><br><span class="line">    if s[10] != &apos;1&apos;:</span><br><span class="line">        return False</span><br><span class="line">    if s[14] != &apos;H&apos;:</span><br><span class="line">        return False</span><br><span class="line">    if s[13] != &apos;&amp;&apos;:</span><br><span class="line">        return False</span><br><span class="line">    if s[26] != &apos;#&apos;:</span><br><span class="line">        return False</span><br><span class="line">    if s[1] != &apos;I&apos;:</span><br><span class="line">        return False</span><br><span class="line">    if s[7] != &apos;F&apos;:</span><br><span class="line">        return False</span><br><span class="line">    if s[30] != &apos;&#125;&apos;:</span><br><span class="line">        return False</span><br><span class="line">    if s[19] != &apos;v&apos;:</span><br><span class="line">        return False</span><br><span class="line">    if s[12] != &apos;_&apos;:</span><br><span class="line">        return False</span><br><span class="line">    if s[9] != &apos;_&apos;:</span><br><span class="line">        return False</span><br><span class="line">    if s[24] != &apos;Y&apos;:</span><br><span class="line">        return False</span><br><span class="line">    if s[5] != &apos;1&apos;:</span><br><span class="line">        return False</span><br><span class="line">    if s[28] != &apos;N&apos;:</span><br><span class="line">        return False</span><br><span class="line">    if s[21] != &apos;3&apos;:</span><br><span class="line">        return False</span><br><span class="line">    if s[8] != &apos;3&apos;:</span><br><span class="line">        return False</span><br><span class="line">    return True</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">screen.__class__.check = check!</span><br></pre></td></tr></table></figure></p><p>此处才是真正进行逻辑判断的函数<br>手动排序得到flag：<br><strong>HITB{1!F3_1S_&amp;H%r7_v$3_pY7#ON!}</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近参加了HITB2018，主要做了两道Mobile，简单整理题目。&lt;/p&gt;
&lt;h2 id=&quot;multicheck&quot;&gt;&lt;a href=&quot;#multicheck&quot; class=&quot;headerlink&quot; title=&quot;multicheck&quot;&gt;&lt;/a&gt;multicheck&lt;/h2
      
    
    </summary>
    
      <category term="WriteUp" scheme="http://www.w4ter5heep.com/categories/WriteUp/"/>
    
    
      <category term="CTF" scheme="http://www.w4ter5heep.com/tags/CTF/"/>
    
      <category term="Mobile" scheme="http://www.w4ter5heep.com/tags/Mobile/"/>
    
  </entry>
  
  <entry>
    <title>hellow_my_site</title>
    <link href="http://www.w4ter5heep.com/2018/04/05/hellow-my-site/"/>
    <id>http://www.w4ter5heep.com/2018/04/05/hellow-my-site/</id>
    <published>2018-04-05T09:19:55.000Z</published>
    <updated>2018-04-15T15:24:44.871Z</updated>
    
    <content type="html"><![CDATA[<p>can you see my secret</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;can you see my secret&lt;/p&gt;

      
    
    </summary>
    
      <category term="Welcome!" scheme="http://www.w4ter5heep.com/categories/Welcome/"/>
    
    
      <category term="MySite" scheme="http://www.w4ter5heep.com/tags/MySite/"/>
    
  </entry>
  
</feed>
