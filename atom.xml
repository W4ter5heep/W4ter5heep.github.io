<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>W4ter5heep&#39;s site</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.w4ter5heep.com/"/>
  <updated>2018-07-04T02:32:29.214Z</updated>
  <id>http://www.w4ter5heep.com/</id>
  
  <author>
    <name>W4ter5heep</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>看雪CTF——ExecuteTable</title>
    <link href="http://www.w4ter5heep.com/2018/07/03/%E7%9C%8B%E9%9B%AACTF%E2%80%94%E2%80%94ExecuteTable/"/>
    <id>http://www.w4ter5heep.com/2018/07/03/看雪CTF——ExecuteTable/</id>
    <published>2018-07-03T01:53:04.697Z</published>
    <updated>2018-07-04T02:32:29.214Z</updated>
    
    <content type="html"><![CDATA[<h1 id="看雪CTF——ExecuteTable"><a href="#看雪CTF——ExecuteTable" class="headerlink" title="看雪CTF——ExecuteTable"></a>看雪CTF——ExecuteTable</h1><p>题目确实比较有难度，自己水平还是太差了，到了so文件的分析，根本不知道关键点在哪里</p><h2 id="初步分析"><a href="#初步分析" class="headerlink" title="初步分析"></a>初步分析</h2><p>首先JEB分析java部分，可以看到有一些混淆，包括对字符串的base64加密等等，但是基本逻辑是可以看到的：</p><p>主要需要进行两个函数的检测<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/15305835793027.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>第一个函数：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/15305835848924.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>该函数要求输入的字符串中有特殊字符，但是该结果会被第二个函数的结果覆盖，因此并无实际用途</p><p>第二个函数为native函数，也是重点需要分析的<br>so函数有诸多陷阱，包括反调试，热修改等等，做出来的方法也是各种骚操作，深深的无力感 = =</p><blockquote><ol><li>so中的反调试，动态库在加载时会创建线程读取<code>/proc/self/status</code>中的<code>TracerPid</code>检测是否被调试</li><li>动态库被加载时会读取<code>/proc/self/maps</code>，获得自身基地址，然后通过分析程序头和.dynamic断，修改符号表，改变JNI_Onload地址。</li><li>动态库加载时，使用mprotect修改内存权限，使用自修改代码生成新的JNI_OnLoad</li><li>实际的解密程序中，有很多花指令和死循环，影响分析</li></ol></blockquote><p>md。。。想放弃</p><p>gdb动态调试，可以看到确实存在反调试：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/15305899110624.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>断点可以下在JNI_OnLoad，但是该函数是被处理过的，需要解密<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/15305901214313.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>可以计算基地址：0xa909ae50-0x8204=0xa9092c4c<br>但是感觉是不正确的.</p><h2 id="init-proc"><a href="#init-proc" class="headerlink" title="init_proc"></a>init_proc</h2><p>无实际用途<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/15306217590333.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h2 id="初始化函数数组函数-init-array"><a href="#初始化函数数组函数-init-array" class="headerlink" title="初始化函数数组函数 init_array"></a>初始化函数数组函数 init_array</h2><p>找到so文件的0x34CD0位置，根据wp，可以知道是函数的初始化数组（wp似乎是通过修复so的section段发现的？不懂的操作）：<br>可以通过readelf查看so文件的动态段得到init_array的地址<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/15306186129013.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>init_array先于JNI_OnLoad运行，上面的函数中应该存在对JNI_OnLoad的解密</p><ul><li>sub_67bc ———— 创建反调试线程b8bc<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/15306210794735.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/15306208358431.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/15306208819199.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/15306209498998.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>可以看到这部分利用v8新开辟的0x20空间注册了函数<br>某wp修复后的：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/15306238689416.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li></ul><p>有几个函数比较关键：<strong>pthread_create</strong>，<strong>mprotect</strong>与<strong>__NR_openat</strong><br>应该下断点绕过反调试后进行分析的。。。但是不太会下断点</p><p>__NR_openat打开过/proc/self/maps与/proc/self/status, 而mprotect有修改JNI_OnLoad偏移与代码解密操作<br>wp的推测：打开/proc/self/maps是为了拿到基址，/proc/self/status/是反调试, 后面实际解key时感觉应该是检测到调试，就把解密中需要用到的一个全局变量修改掉。导致得到错误的结果。<br><strong>mprotect</strong>调用了两次，第一次修改JNI_OnLoad的偏移，由0x8205修改为<strong>0xA260</strong> ,这也就是真正的JNI_OnLoad函数，在这个函数中可以看到JNIEnv的FindClass与RegisterNatives，所以可以拿到验证key的native函数地址0xAC98<br>直接去到0xAC98发现代码无法解析，应该是加密了。</p><p>所以<strong>第二次mprotect调用</strong>就是解密0xAC98中被加密的代码。</p><h2 id="反调试线程b8bc"><a href="#反调试线程b8bc" class="headerlink" title="反调试线程b8bc"></a>反调试线程b8bc</h2><p>sub_67bc下面用到的函数即是pthread_create，创建反调试线程<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/15306207958851.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>反调试部分的代码没有直接被ida识别为函数，可以create function得到<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/15306250349630.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>反调试的骚操作如下(中间有各种垃圾代码）：</p><ol><li>解密字符串“tracePid”。</li><li>解密字符串“%*s%d”。</li><li>解密字符串“/proc/self/status”。</li><li>打开文件 “/proc/self/status”，一行一行读取，一直找到 “tracePid”为止。</li><li>调用scanf获取tracePid的数值。</li><li>如果 tracePid &gt; 0, 则全局变量0x36098 = 0xBD9813BA，否则  0x36098 = 0x2333AE83。</li><li>线程sleep 5秒。</li></ol><p>过掉反调试： 0x36098 的值在对输入key进行变换时有用到，当程序处于调试状态时，会使key计算出错。过掉反调试方法很多，但是无论用啥方法必须要使0x36098 赋值为 0x2333AE83 。可以让线程进入死循环，或者让线程终止，或者让线程sleep(100000)秒，也可以直接修改逻辑让tracePid恒等于0。</p><h2 id="真正JNI-OnLoad的获取和分析"><a href="#真正JNI-OnLoad的获取和分析" class="headerlink" title="真正JNI_OnLoad的获取和分析"></a>真正JNI_OnLoad的获取和分析</h2><p>方法一：此函数不能直接下断点，否则可能会使代码解密失败，可以直接在<strong>libdvm</strong>中下断点。这个函数主要作用是<strong>动态注册native lkdakjudajndn函数</strong> 从这里可知 lkdakjudajndn函数地址为：<strong>AC98</strong>。这个函数是真正的key校验过程。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/15306256178538.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>真正的JNI_OnLoad，没有代码的自解密，只是hook了地址，还比较友好<br>可以查找注册<strong>lkdakjudajndn</strong>的位置：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/15306261635489.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>并不知道是怎么计算得到函数lkdakjudajndn地址是0xAC98的，动态调试直接看？</p><h2 id="check函数lkdakjudajndn"><a href="#check函数lkdakjudajndn" class="headerlink" title="check函数lkdakjudajndn"></a>check函数lkdakjudajndn</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/15306581017587.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这部分代码是需要动态解密的，具体方法是调用mprotect进行解密，解密函数是sub_833c<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/15306582383232.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>函数混淆的也比较烦，很难分析，解密代码的主要部分<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/15306588811845.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>解密后的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br></pre></td><td class="code"><pre><span class="line">char *__fastcall lkdakjudajndn(struct _JNIEnv *a1)</span><br><span class="line">&#123;</span><br><span class="line">  char *inputKey; // r0</span><br><span class="line">  char *v2; // r4</span><br><span class="line">  unsigned int i; // r4</span><br><span class="line">  int v4; // r2</span><br><span class="line">  int v5; // r3</span><br><span class="line">  char v6; // r6</span><br><span class="line">  unsigned int j; // r4</span><br><span class="line">  int v8; // r2</span><br><span class="line">  int v9; // r3</span><br><span class="line">  char *v10; // r6</span><br><span class="line">  int v11; // r8</span><br><span class="line">  int v12; // r2</span><br><span class="line">  int v13; // r3</span><br><span class="line">  signed int v14; // r10</span><br><span class="line">  unsigned int v15; // r7</span><br><span class="line">  char v16; // r8</span><br><span class="line">  unsigned int keylen; // r2</span><br><span class="line">  int v18; // r2</span><br><span class="line">  int v19; // r3</span><br><span class="line">  int v20; // r2</span><br><span class="line">  int v21; // r3</span><br><span class="line">  unsigned int v22; // r7</span><br><span class="line">  unsigned int v23; // r8</span><br><span class="line">  int string_A3Cw6Gb0OZWPU52s_1; // ST10_4</span><br><span class="line">  int v25; // ST10_4</span><br><span class="line">  int lowkeyChar; // ST10_4</span><br><span class="line">  unsigned int string_3d8ahnb1_1; // r6</span><br><span class="line">  int v28; // r2</span><br><span class="line">  int v29; // r3</span><br><span class="line">  const char *v30; // r1</span><br><span class="line">  int v31; // r2</span><br><span class="line">  int v32; // r3</span><br><span class="line">  int v33; // r2</span><br><span class="line">  int v34; // r3</span><br><span class="line">  int v35; // r2</span><br><span class="line">  int v36; // r3</span><br><span class="line">  int *v37; // r0</span><br><span class="line">  int inputKeyString; // [sp+20h] [bp-6B8h]</span><br><span class="line">  int newInputKeyBuf; // [sp+24h] [bp-6B4h]</span><br><span class="line">  int inputKeyBuf; // [sp+28h] [bp-6B0h]</span><br><span class="line">  int buf_3ww3U53wOAWG333wwPZ56GGw0PO02OUW; // [sp+2Ch] [bp-6ACh]</span><br><span class="line">  _BYTE *string_3d8ahnb1_is_U8; // [sp+30h] [bp-6A8h]</span><br><span class="line">  char buf_U8; // [sp+34h] [bp-6A4h]</span><br><span class="line">  char string_3; // [sp+38h] [bp-6A0h]</span><br><span class="line">  char buf_3w; // [sp+3Ch] [bp-69Ch]</span><br><span class="line">  char buf_3ww; // [sp+40h] [bp-698h]</span><br><span class="line">  char string_aA782e192b81nic; // [sp+44h] [bp-694h]</span><br><span class="line">  char v49; // [sp+48h] [bp-690h]</span><br><span class="line">  int string_A3Cw6Gb0OZWPU52s; // [sp+4Ch] [bp-68Ch]</span><br><span class="line">  int string_0; // [sp+50h] [bp-688h]</span><br><span class="line">  int string_0_1; // [sp+54h] [bp-684h]</span><br><span class="line">  int v53; // [sp+58h] [bp-680h]</span><br><span class="line">  char v54; // [sp+5Ch] [bp-67Ch]</span><br><span class="line">  int newstring_BQ366EYdQs_1; // [sp+60h] [bp-678h]</span><br><span class="line">  char buf_44678; // [sp+64h] [bp-674h]</span><br><span class="line">  int string_A782E192B81NICAIsan38Qz; // [sp+68h] [bp-670h]</span><br><span class="line">  char string_3373080; // [sp+6Ch] [bp-66Ch]</span><br><span class="line">  int newstring_BQ366EYdQs; // [sp+70h] [bp-668h]</span><br><span class="line">  char buf_29285; // [sp+74h] [bp-664h]</span><br><span class="line">  char *v61; // [sp+78h] [bp-660h]</span><br><span class="line">  char v62; // [sp+7Ch] [bp-65Ch]</span><br><span class="line">  char string_BQ366EYdQs_1; // [sp+80h] [bp-658h]</span><br><span class="line">  char string_BQ366EYdQs; // [sp+84h] [bp-654h]</span><br><span class="line">  char newintputKey_buf; // [sp+88h] [bp-650h]</span><br><span class="line">  char v66; // [sp+8Ch] [bp-64Ch]</span><br><span class="line">  char v67; // [sp+90h] [bp-648h]</span><br><span class="line">  int v68; // [sp+94h] [bp-644h]</span><br><span class="line">  char v69; // [sp+98h] [bp-640h]</span><br><span class="line">  char v70; // [sp+9Ch] [bp-63Ch]</span><br><span class="line">  char input_KeyBuffer_location0; // [sp+A0h] [bp-638h]</span><br><span class="line">  int inputKeyBuf_location1; // [sp+A4h] [bp-634h]</span><br><span class="line">  char inputKeyBuf_last1; // [sp+A8h] [bp-630h]</span><br><span class="line">  int string_UYetrq736UMayFindMe233; // [sp+ACh] [bp-62Ch]</span><br><span class="line">  char buf_3d8ahnb1; // [sp+B0h] [bp-628h]</span><br><span class="line">  char string_U8; // [sp+B4h] [bp-624h]</span><br><span class="line">  char string_D; // [sp+B8h] [bp-620h]</span><br><span class="line">  int buf_BQ366EYdQs3716UCANDOIT666; // [sp+BCh] [bp-61Ch]</span><br><span class="line">  char string_0_2; // [sp+C0h] [bp-618h]</span><br><span class="line">  char buf_BQ366EYdQs; // [sp+C4h] [bp-614h]</span><br><span class="line">  int v81; // [sp+C8h] [bp-610h]</span><br><span class="line">  char v82; // [sp+CCh] [bp-60Ch]</span><br><span class="line">  char unknowStruct1; // [sp+D0h] [bp-608h]</span><br><span class="line">  char string_1; // [sp+D8h] [bp-600h]</span><br><span class="line">  int v85; // [sp+DCh] [bp-5FCh]</span><br><span class="line">  char v86; // [sp+18Ch] [bp-54Ch]</span><br><span class="line">  int v87; // [sp+194h] [bp-544h]</span><br><span class="line">  char v88; // [sp+198h] [bp-540h]</span><br><span class="line">  char v89; // [sp+248h] [bp-490h]</span><br><span class="line">  char v90; // [sp+250h] [bp-488h]</span><br><span class="line">  int v91; // [sp+254h] [bp-484h]</span><br><span class="line">  char v92; // [sp+304h] [bp-3D4h]</span><br><span class="line">  char v93; // [sp+30Ch] [bp-3CCh]</span><br><span class="line">  char v94; // [sp+310h] [bp-3C8h]</span><br><span class="line">  char v95; // [sp+3C0h] [bp-318h]</span><br><span class="line">  char v96; // [sp+3C8h] [bp-310h]</span><br><span class="line">  char v97; // [sp+3CCh] [bp-30Ch]</span><br><span class="line">  char v98; // [sp+47Ch] [bp-25Ch]</span><br><span class="line">  char v99; // [sp+484h] [bp-254h]</span><br><span class="line">  char v100; // [sp+488h] [bp-250h]</span><br><span class="line">  char buf_33687; // [sp+538h] [bp-1A0h]</span><br><span class="line">  char v102; // [sp+540h] [bp-198h]</span><br><span class="line">  char v103; // [sp+544h] [bp-194h]</span><br><span class="line">  char string_DU8NABvA; // [sp+5F4h] [bp-E4h]</span><br><span class="line">  int string_33687_0; // [sp+5FCh] [bp-DCh]</span><br><span class="line">  int v106; // [sp+600h] [bp-D8h]</span><br><span class="line"> </span><br><span class="line">  inputKey = (char *)(*(int (**)(void))(*(_DWORD *)a1 + 676))();</span><br><span class="line">  newString1(&amp;inputKeyString, (int)inputKey);</span><br><span class="line">  newString1(&amp;string_aA782e192b81nic, (int)&quot;A782E192B81NICAIsan38Qz&quot;);</span><br><span class="line">  CreateUnknowStructFunc((int)&amp;unknowStruct1, 24);</span><br><span class="line">  hextoString((int)&amp;string_1, 1);</span><br><span class="line">  sub_DD44(&amp;v49, &amp;v85);</span><br><span class="line">  v2 = (_BYTE *)(&amp;stru_908 + 10);</span><br><span class="line">  if ( !std::operator==&lt;char&gt;(&amp;string_aA782e192b81nic, &amp;v49) )</span><br><span class="line">    v2 = (_BYTE *)(&amp;dword_0 + 1);</span><br><span class="line">  if ( std::operator!=&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(&amp;v49, &amp;string_aA782e192b81nic) )</span><br><span class="line">  &#123;</span><br><span class="line">    CreateUnknowStructFunc((int)&amp;string_DU8NABvA, 24);</span><br><span class="line">    hextoString((int)&amp;string_33687_0, 33687);</span><br><span class="line">    sub_DD44(&amp;buf_33687, &amp;v106);</span><br><span class="line">    v2 = (char *)std::operator==&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(&amp;buf_33687, &quot;0d87a&quot;);</span><br><span class="line">    deleteString(&amp;buf_33687);</span><br><span class="line">    sub_DBAC(&amp;string_DU8NABvA);</span><br><span class="line">  &#125;</span><br><span class="line">  if ( v2 == (_BYTE *)&amp;dword_0 + 1 )</span><br><span class="line">    v2 = (char *)off_35CFC + 303183;</span><br><span class="line">  deleteString(&amp;v49);</span><br><span class="line">  sub_DBAC(&amp;unknowStruct1);</span><br><span class="line">  deleteString(&amp;string_aA782e192b81nic);</span><br><span class="line">  if ( (unsigned int)(*(_DWORD *)(inputKeyString - 12) - 0xA) &lt;= 0xA )// key长度要小于等于20</span><br><span class="line">  &#123;</span><br><span class="line">    GetStringBuf(&amp;inputKeyBuf, &amp;inputKeyString);// inputKeyBuf = C0ngRa7U1AtIoN2U</span><br><span class="line">    newString1(&amp;newInputKeyBuf, (int)&amp;unk_30735);</span><br><span class="line">    copyStringFromLocation((int)&amp;inputKeyBuf_location1, &amp;inputKeyBuf, 1u, *(_DWORD *)(inputKeyBuf - 12));</span><br><span class="line">    copyStringFromLocation((int)&amp;input_KeyBuffer_location0, &amp;inputKeyBuf, 0, 1u);</span><br><span class="line">    stringStrCat(&amp;inputKeyBuf_last1, &amp;inputKeyBuf_location1, (int)&amp;input_KeyBuffer_location0);// 将第一个字符放到最后一个位置上</span><br><span class="line">    StringChange((int)&amp;inputKeyBuf, (int)&amp;inputKeyBuf_last1);// inputKeyBuf=inputKeyBuf_last1</span><br><span class="line">    deleteString(&amp;inputKeyBuf_last1);</span><br><span class="line">    deleteString(&amp;input_KeyBuffer_location0);</span><br><span class="line">    deleteString(&amp;inputKeyBuf_location1);       // inputKeyBuf = 0ngRa7U1AtIoN2UC</span><br><span class="line">    for ( i = 0; i &lt; *(_DWORD *)(inputKeyBuf - 12); ++i )// 根据输入的key进行从字典中索引然后创建新的字符串</span><br><span class="line">      CreateStringByChar(&amp;newInputKeyBuf, *((_BYTE *)off_35CF8 + *(unsigned __int8 *)(inputKeyBuf + i) + 0x21));</span><br><span class="line">    StringChange((int)&amp;inputKeyBuf, (int)&amp;newInputKeyBuf);// 此时 inputKeyBuf变成新的了</span><br><span class="line">    SetStringNull((int)&amp;newInputKeyBuf, (int)&amp;unk_30735, v4, v5);// 此时81 bb b1 70 c9 d8 64 41 ad 4f c4 bd e2 19 64 11</span><br><span class="line">    newString1(&amp;newstring_BQ366EYdQs, (int)&quot;BQ366EYdQs3716UCANDOIT666&quot;);</span><br><span class="line">    CreateUnknowStructFunc((int)&amp;v95, 24);</span><br><span class="line">    hextoString((int)&amp;v96, 29285);</span><br><span class="line">    sub_DD44(&amp;buf_29285, &amp;v97);</span><br><span class="line">    copyStringFromLocation((int)&amp;string_BQ366EYdQs, &amp;newstring_BQ366EYdQs, 0, 0xAu);</span><br><span class="line">    StringChange((int)&amp;newstring_BQ366EYdQs, (int)&amp;string_BQ366EYdQs);// 变成10个了</span><br><span class="line">    deleteString(&amp;string_BQ366EYdQs);</span><br><span class="line">    if ( std::operator==&lt;char&gt;(&amp;newstring_BQ366EYdQs, &amp;buf_29285) )</span><br><span class="line">      v6 = 50;</span><br><span class="line">    else</span><br><span class="line">      v6 = 1;</span><br><span class="line">    deleteString(&amp;buf_29285);</span><br><span class="line">    sub_DBAC(&amp;v95);</span><br><span class="line">    deleteString(&amp;newstring_BQ366EYdQs);</span><br><span class="line">    for ( j = 0; j &lt; *(_DWORD *)(inputKeyBuf - 12); ++j )</span><br><span class="line">      CreateStringByChar(                       // 进行低4位和高位的切换，并且创建新的string</span><br><span class="line">        &amp;newInputKeyBuf,</span><br><span class="line">        ((*(_BYTE *)(inputKeyBuf + j) &amp; 0xF) &lt;&lt; 4 * v6) | (*(_BYTE *)(inputKeyBuf + j) &gt;&gt; 4));</span><br><span class="line">    StringChange((int)&amp;inputKeyBuf, (int)&amp;newInputKeyBuf);// 此时inputKey每个字节的低4位和高4位进行切换了</span><br><span class="line">                                                // 此时18 bb 1b 07 9c 8d 46 14 da f4 4c db 2e 91 46 11</span><br><span class="line">    SetStringNull((int)&amp;newInputKeyBuf, (int)&amp;unk_30735, v8, v9);</span><br><span class="line">    newString1(&amp;string_A782E192B81NICAIsan38Qz, (int)&quot;A782E192B81NICAIsan38Qz&quot;);</span><br><span class="line">    CreateUnknowStructFunc((int)&amp;v92, 24);</span><br><span class="line">    hextoString((int)&amp;v93, 3373080);</span><br><span class="line">    sub_DD44(&amp;string_3373080, &amp;v94);</span><br><span class="line">    v10 = (char *)3373029;</span><br><span class="line">    if ( !std::operator==&lt;char&gt;(&amp;string_A782E192B81NICAIsan38Qz, &amp;string_3373080) )</span><br><span class="line">      v10 = (char *)3373080;</span><br><span class="line">    if ( std::operator!=&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(</span><br><span class="line">           &amp;string_3373080,</span><br><span class="line">           &amp;string_A782E192B81NICAIsan38Qz) )</span><br><span class="line">    &#123;</span><br><span class="line">      CreateUnknowStructFunc((int)&amp;string_DU8NABvA, 24);</span><br><span class="line">      hextoString((int)&amp;string_33687_0, 33687);</span><br><span class="line">      sub_DD44(&amp;buf_33687, &amp;v106);</span><br><span class="line">      v10 = (char *)std::operator==&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(&amp;buf_33687, &quot;0d87a&quot;);</span><br><span class="line">      deleteString(&amp;buf_33687);</span><br><span class="line">      sub_DBAC(&amp;string_DU8NABvA);</span><br><span class="line">      if ( v10 )</span><br><span class="line">        v10 = (char *)off_35CFC + 0x4A04F;</span><br><span class="line">    &#125;</span><br><span class="line">    deleteString(&amp;string_3373080);</span><br><span class="line">    sub_DBAC(&amp;v92);</span><br><span class="line">    deleteString(&amp;string_A782E192B81NICAIsan38Qz);// 对输入的key4字节与 DA78DE8A进行亦或</span><br><span class="line">    v11 = 0;</span><br><span class="line">    do                                          // 0x36090</span><br><span class="line">    &#123;                                           // </span><br><span class="line">                                                // 36098 = DA78DE8A</span><br><span class="line">      CreateStringByChar(&amp;newInputKeyBuf, v10[inputKeyBuf + v11] ^ dword_36098);</span><br><span class="line">      CreateStringByChar(&amp;newInputKeyBuf, BYTE1(dword_36098) ^ *(_BYTE *)(inputKeyBuf + v11 + 1));</span><br><span class="line">      CreateStringByChar(&amp;newInputKeyBuf, BYTE2(dword_36098) ^ *(_BYTE *)(inputKeyBuf + v11 + 2));</span><br><span class="line">      CreateStringByChar(&amp;newInputKeyBuf, *(_BYTE *)(inputKeyBuf + v11 + 3) ^ HIBYTE(dword_36098));</span><br><span class="line">      v11 += 4;</span><br><span class="line">    &#125;</span><br><span class="line">    while ( v11 != 0x10 );                      // 证明输入的key为16个字节</span><br><span class="line">    StringChange((int)&amp;inputKeyBuf, (int)&amp;newInputKeyBuf);</span><br><span class="line">    SetStringNull((int)&amp;newInputKeyBuf, (int)&amp;unk_30735, v12, v13);</span><br><span class="line">    newString1(&amp;newstring_BQ366EYdQs_1, (int)&quot;BQ366EYdQs3716UCANDOIT666&quot;);</span><br><span class="line">    CreateUnknowStructFunc((int)&amp;v89, 24);</span><br><span class="line">    hextoString((int)&amp;v90, 44678);</span><br><span class="line">    sub_DD44(&amp;buf_44678, &amp;v91);</span><br><span class="line">    copyStringFromLocation((int)&amp;string_BQ366EYdQs_1, &amp;newstring_BQ366EYdQs_1, 0, 0xAu);</span><br><span class="line">    StringChange((int)&amp;newstring_BQ366EYdQs_1, (int)&amp;string_BQ366EYdQs_1);</span><br><span class="line">    deleteString(&amp;string_BQ366EYdQs_1);</span><br><span class="line">    if ( std::operator==&lt;char&gt;(&amp;newstring_BQ366EYdQs_1, &amp;buf_44678) )</span><br><span class="line">      v14 = 50;</span><br><span class="line">    else</span><br><span class="line">      v14 = 1;</span><br><span class="line">    deleteString(&amp;buf_44678);</span><br><span class="line">    sub_DBAC(&amp;v89);</span><br><span class="line">    v15 = 0;</span><br><span class="line">    deleteString(&amp;newstring_BQ366EYdQs_1);      // 此时key =9b 15 28 24 1f 23 75 37 59 5a 7f f8 ad 3f 75 32</span><br><span class="line">    while ( 1 )</span><br><span class="line">    &#123;                                           // 对输入key进行相邻字节交换</span><br><span class="line">      keylen = *(_DWORD *)(inputKeyBuf - 12);</span><br><span class="line">      if ( v15 &gt;= keylen &gt;&gt; 1 )</span><br><span class="line">        break;</span><br><span class="line">      v16 = *(_BYTE *)(inputKeyBuf + 2 * v15);</span><br><span class="line">      CreateStringByChar(&amp;newInputKeyBuf, *(_BYTE *)(inputKeyBuf + v14 + 2 * v15));</span><br><span class="line">      CreateStringByChar(&amp;newInputKeyBuf, v16);</span><br><span class="line">      ++v15;</span><br><span class="line">    &#125;</span><br><span class="line">    if ( keylen &amp; 1 )</span><br><span class="line">    &#123;</span><br><span class="line">      copyStringFromLocation((int)&amp;v70, &amp;inputKeyBuf, keylen - 1, 1u);</span><br><span class="line">      copyString((int)&amp;newInputKeyBuf, (int)&amp;v70);</span><br><span class="line">      deleteString(&amp;v70);</span><br><span class="line">    &#125;</span><br><span class="line">    StringChange((int)&amp;inputKeyBuf, (int)&amp;newInputKeyBuf);// 此时key进行了相邻字节交换</span><br><span class="line">                                                // 此时15 9b 24 28 23 1f 37 75 5a 59 f8 7f 3f ad 32 75</span><br><span class="line">                                                // </span><br><span class="line">    SetStringNull((int)&amp;newInputKeyBuf, (int)&amp;unk_30735, v18, v19);</span><br><span class="line">    while ( (unsigned int)v10 &lt; *(_DWORD *)(inputKeyBuf - 12) )// 再次对字典7FC2开始索引</span><br><span class="line">      CreateStringByChar(&amp;newInputKeyBuf, *((_BYTE *)off_35CF8 + (unsigned __int8)(v10++)[inputKeyBuf] + 33));</span><br><span class="line">    StringChange((int)&amp;inputKeyBuf, (int)&amp;newInputKeyBuf);// inputKeyBuf= 33 1a 3c 38 1e c7 d8 1b 37 83 05 a5 54 1d 19 1b</span><br><span class="line">    SetStringNull((int)&amp;newInputKeyBuf, (int)&amp;unk_30735, v20, v21);</span><br><span class="line">    newString1(&amp;v53, (int)&quot;BQ366EYdQs3716UCANDOIT666&quot;);</span><br><span class="line">    CreateUnknowStructFunc((int)&amp;v86, 24);</span><br><span class="line">    hextoString((int)&amp;v87, 154634026);</span><br><span class="line">    sub_DD44(&amp;v54, &amp;v88);</span><br><span class="line">    copyStringFromLocation((int)&amp;v62, &amp;v53, 0, 0xAu);</span><br><span class="line">    StringChange((int)&amp;v53, (int)&amp;v62);</span><br><span class="line">    deleteString(&amp;v62);</span><br><span class="line">    if ( std::operator==&lt;char&gt;(&amp;v53, &amp;v54) )</span><br><span class="line">      v22 = 50;</span><br><span class="line">    else</span><br><span class="line">      v22 = 1;                                  // v22=1</span><br><span class="line">    deleteString(&amp;v54);</span><br><span class="line">    sub_DBAC(&amp;v86);</span><br><span class="line">    deleteString(&amp;v53);</span><br><span class="line">    copyStringFromLocation((int)&amp;v68, &amp;inputKeyBuf, v22, *(_DWORD *)(inputKeyBuf - 12));</span><br><span class="line">    copyStringFromLocation((int)&amp;v67, &amp;inputKeyBuf, 0, v22);</span><br><span class="line">    stringStrCat(&amp;v69, &amp;v68, (int)&amp;v67);</span><br><span class="line">    StringChange((int)&amp;newInputKeyBuf, (int)&amp;v69);// 此时 newintputKey_buf 第一个字节被置换到最后一个字节</span><br><span class="line">                                                //  1a 3c 38 1e c7 d8 1b 37 83 05 a5 54 1d 19 1b 33</span><br><span class="line"> </span><br><span class="line">    deleteString(&amp;v69);</span><br><span class="line">    deleteString(&amp;v67);</span><br><span class="line">    deleteString(&amp;v68);</span><br><span class="line">    GetStringBuf(&amp;newintputKey_buf, &amp;newInputKeyBuf);</span><br><span class="line">    newString1(&amp;string_A3Cw6Gb0OZWPU52s, (int)&quot;A3Cw6Gb0OZWPU52s&quot;);</span><br><span class="line">    newString1(&amp;string_0, (int)&amp;unk_30735);</span><br><span class="line">    newString1(&amp;string_0_1, (int)&amp;unk_30735);</span><br><span class="line">    v23 = 0;</span><br><span class="line">    while ( v23 &lt; *(_DWORD *)(*(_DWORD *)&amp;newintputKey_buf - 12) )// 此时 newintputKey_buf = 13 3b 39 1d c4 d5 15 33 87 0b a8 57 1e 18 1c 3a</span><br><span class="line">    &#123;                                           // string_0放A3Cw6Gb0OZWPU52s按照高4位索引的string</span><br><span class="line">                                                // string_1放A3Cw6Gb0OZWPU52s按照低位索引的string</span><br><span class="line">      string_A3Cw6Gb0OZWPU52s_1 = string_A3Cw6Gb0OZWPU52s;</span><br><span class="line">      sub_191A8(&amp;newintputKey_buf);</span><br><span class="line">      CreateStringByChar(                       // 将输入key按字节/16 然后从A3Cw6Gb0OZWPU52s中按照索引获取</span><br><span class="line">        &amp;string_0,</span><br><span class="line">        *(_BYTE *)(string_A3Cw6Gb0OZWPU52s_1</span><br><span class="line">                 + ((unsigned int)*(unsigned __int8 *)(*(_DWORD *)&amp;newintputKey_buf + v23) &gt;&gt; 4)));</span><br><span class="line">      v25 = string_A3Cw6Gb0OZWPU52s;</span><br><span class="line">      sub_191A8(&amp;newintputKey_buf);</span><br><span class="line">      lowkeyChar = *(unsigned __int8 *)(v25 + (*(_BYTE *)(*(_DWORD *)&amp;newintputKey_buf + v23) &amp; 0xF));// 然后字节&amp;0xF 再从A3Cw6Gb0OZWPU52s中索引</span><br><span class="line">      v61 = (char *)off_35D04 + 12;</span><br><span class="line">      createStringByLen((int *)&amp;v61, *(_DWORD *)(string_0_1 - 12) + 1);</span><br><span class="line">      sub_19520((int *)&amp;v61, 1u, lowkeyChar);</span><br><span class="line">      sub_193C4((int *)&amp;v61, (_BYTE **)&amp;string_0_1);</span><br><span class="line">      StringChange((int)&amp;string_0_1, (int)&amp;v61);</span><br><span class="line">      ++v23;</span><br><span class="line">      deleteString(&amp;v61);</span><br><span class="line">    &#125;</span><br><span class="line">    stringStrCat(&amp;v66, &amp;string_0, (int)&amp;string_0_1);// 高位4位与第4位分别索引获取的子串</span><br><span class="line">                                                // 3ww3U53wOAWG333wWUO20OP0wGG65ZPw</span><br><span class="line">                                                // </span><br><span class="line">                                                // 这个应该是真实的</span><br><span class="line">                                                // 3ww3U53wOAWG333wwPZ56GGw0PO02OUW</span><br><span class="line">                                                // 3ww3U53wOAWG333wwPZ56GGw0PO02OUW</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    deleteString(&amp;string_0_1);</span><br><span class="line">    deleteString(&amp;string_0);</span><br><span class="line">    deleteString(&amp;string_A3Cw6Gb0OZWPU52s);</span><br><span class="line">    StringChange((int)&amp;newInputKeyBuf, (int)&amp;v66);// inputkey变成了高位索引和低位索引的string了</span><br><span class="line">    deleteString(&amp;v66);</span><br><span class="line">    deleteString(&amp;newintputKey_buf);</span><br><span class="line">    deleteString(&amp;inputKeyBuf);</span><br><span class="line">    newString1(&amp;string_3d8ahnb1_is_U8, (int)&quot;3d8ahnb1&quot;);</span><br><span class="line">    newString1(&amp;string_UYetrq736UMayFindMe233, (int)&quot;UYetrq736UMayFindMe233&quot;);</span><br><span class="line">    CreateUnknowStructFunc((int)&amp;v98, 24);</span><br><span class="line">    sub_F0A4((int)&amp;v99, &amp;string_3d8ahnb1_is_U8);</span><br><span class="line">    sub_DD44(&amp;buf_3d8ahnb1, &amp;v100);</span><br><span class="line">    sub_191A8(&amp;string_3d8ahnb1_is_U8);</span><br><span class="line">    string_3d8ahnb1_1 = (unsigned __int8)*string_3d8ahnb1_is_U8;</span><br><span class="line">    if ( std::operator==&lt;char&gt;(&amp;string_UYetrq736UMayFindMe233, &amp;buf_3d8ahnb1) )// 不等</span><br><span class="line">    &#123;</span><br><span class="line">      newString1(&amp;string_DU8NABvA, (int)&quot;DABD786ABH&quot;);</span><br><span class="line">      if ( string_3d8ahnb1_1 == 1 )</span><br><span class="line">      &#123;</span><br><span class="line">        v30 = &quot;8a7d9Vduya&quot;;</span><br><span class="line">      &#125;</span><br><span class="line">      else if ( string_3d8ahnb1_1 &gt;= 1 )</span><br><span class="line">      &#123;</span><br><span class="line">        if ( string_3d8ahnb1_1 == 2 )</span><br><span class="line">          v30 = &quot;73812huvVQ&quot;;</span><br><span class="line">        else</span><br><span class="line">          v30 = &quot;daj87YBDASYBvy&quot;;</span><br><span class="line">      &#125;</span><br><span class="line">      else</span><br><span class="line">      &#123;</span><br><span class="line">        v30 = &quot;UDHA47DBsd&quot;;</span><br><span class="line">      &#125;</span><br><span class="line">      SetStringNull((int)&amp;string_3d8ahnb1_is_U8, (int)v30, v28, v29);</span><br><span class="line">      copyString((int)&amp;string_3d8ahnb1_is_U8, (int)&amp;string_DU8NABvA);</span><br><span class="line">      deleteString(&amp;string_DU8NABvA);</span><br><span class="line">    &#125;</span><br><span class="line">    if ( std::operator!=&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(</span><br><span class="line">           &amp;string_UYetrq736UMayFindMe233,</span><br><span class="line">           &amp;buf_3d8ahnb1) )</span><br><span class="line">    &#123;</span><br><span class="line">      SetStringNull((int)&amp;string_3d8ahnb1_is_U8, (int)&amp;unk_30735, v31, v32);// 进来</span><br><span class="line">      newString1(&amp;string_DU8NABvA, (int)&quot;DU8NABvA&quot;);</span><br><span class="line">      copyStringFromLocation((int)&amp;string_D, &amp;string_DU8NABvA, 0, 1u);</span><br><span class="line">      copyString((int)&amp;string_3d8ahnb1_is_U8, (int)&amp;string_D);</span><br><span class="line">      deleteString(&amp;string_D);</span><br><span class="line">      if ( std::operator!=&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(&amp;string_3d8ahnb1_is_U8, &amp;unk_30735) )</span><br><span class="line">        SetStringNull((int)&amp;string_3d8ahnb1_is_U8, (int)&amp;unk_30735, v33, v34);// 又变成空了</span><br><span class="line">      copyStringFromLocation((int)&amp;string_U8, &amp;string_DU8NABvA, 1u, 2u);</span><br><span class="line">      copyString((int)&amp;string_3d8ahnb1_is_U8, (int)&amp;string_U8);// 又变成U8了</span><br><span class="line">      deleteString(&amp;string_U8);</span><br><span class="line">      if ( std::operator!=&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(&amp;string_3d8ahnb1_is_U8, &amp;unk_30735) )</span><br><span class="line">        SetStringNull((int)&amp;string_3d8ahnb1_is_U8, (int)&amp;unk_30735, v35, v36);// 又设置成空了</span><br><span class="line">      deleteString(&amp;string_DU8NABvA);</span><br><span class="line">    &#125;</span><br><span class="line">    GetStringBuf(&amp;buf_U8, (int *)&amp;string_3d8ahnb1_is_U8);// 到这里了</span><br><span class="line">    deleteString(&amp;buf_3d8ahnb1);</span><br><span class="line">    sub_DBAC(&amp;v98);</span><br><span class="line">    deleteString(&amp;string_UYetrq736UMayFindMe233);</span><br><span class="line">    std::operator+&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(&amp;string_3, &amp;buf_U8, &apos;3&apos;);</span><br><span class="line">    std::operator+&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(&amp;buf_3w, &amp;string_3, &apos;w&apos;);</span><br><span class="line">    std::operator+&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(&amp;buf_3ww, &amp;buf_3w, &apos;w&apos;);</span><br><span class="line">    std::operator+&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(</span><br><span class="line">      &amp;buf_3ww3U53wOAWG333wwPZ56GGw0PO02OUW,</span><br><span class="line">      &amp;buf_3ww,</span><br><span class="line">      &apos;3&apos;);</span><br><span class="line">    deleteString(&amp;buf_3ww);</span><br><span class="line">    deleteString(&amp;buf_3w);</span><br><span class="line">    deleteString(&amp;string_3);</span><br><span class="line">    deleteString(&amp;buf_U8);</span><br><span class="line">    deleteString(&amp;string_3d8ahnb1_is_U8);</span><br><span class="line">    if ( std::operator!=&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(</span><br><span class="line">           &amp;buf_3ww3U53wOAWG333wwPZ56GGw0PO02OUW,</span><br><span class="line">           &amp;unk_30735) )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_19504(&amp;buf_3ww3U53wOAWG333wwPZ56GGw0PO02OUW, &quot;U5&quot;);</span><br><span class="line">      CreateStringByChar(&amp;buf_3ww3U53wOAWG333wwPZ56GGw0PO02OUW, &apos;3&apos;);</span><br><span class="line">      CreateStringByChar(&amp;buf_3ww3U53wOAWG333wwPZ56GGw0PO02OUW, &apos;w&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">    if ( *(_DWORD *)(buf_3ww3U53wOAWG333wwPZ56GGw0PO02OUW - 12) )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_19504(&amp;buf_3ww3U53wOAWG333wwPZ56GGw0PO02OUW, &quot;OAWG&quot;);</span><br><span class="line">      CreateStringByChar(&amp;buf_3ww3U53wOAWG333wwPZ56GGw0PO02OUW, &apos;3&apos;);</span><br><span class="line">      CreateStringByChar(&amp;buf_3ww3U53wOAWG333wwPZ56GGw0PO02OUW, &apos;3&apos;);</span><br><span class="line">      CreateStringByChar(&amp;buf_3ww3U53wOAWG333wwPZ56GGw0PO02OUW, &apos;3&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">    CreateStringByChar(&amp;buf_3ww3U53wOAWG333wwPZ56GGw0PO02OUW, 119);</span><br><span class="line">    CreateStringByChar(&amp;buf_3ww3U53wOAWG333wwPZ56GGw0PO02OUW, 119);</span><br><span class="line">    sub_19504(&amp;buf_3ww3U53wOAWG333wwPZ56GGw0PO02OUW, &quot;PZ56GGw0PO02OUW&quot;);</span><br><span class="line">    if ( std::operator==&lt;char&gt;(&amp;newInputKeyBuf, &amp;buf_3ww3U53wOAWG333wwPZ56GGw0PO02OUW)</span><br><span class="line">      &amp;&amp; *(_DWORD *)(inputKeyString - 12) == 16 )</span><br><span class="line">    &#123;</span><br><span class="line">      newString1(&amp;buf_BQ366EYdQs3716UCANDOIT666, (int)&quot;BQ366EYdQs3716UCANDOIT666&quot;);</span><br><span class="line">      CreateUnknowStructFunc((int)&amp;string_DU8NABvA, 24);</span><br><span class="line">      hextoString((int)&amp;string_33687_0, 0);</span><br><span class="line">      sub_DD44(&amp;string_0_2, &amp;v106);</span><br><span class="line">      copyStringFromLocation((int)&amp;buf_BQ366EYdQs, &amp;buf_BQ366EYdQs3716UCANDOIT666, 0, 0xAu);</span><br><span class="line">      StringChange((int)&amp;buf_BQ366EYdQs3716UCANDOIT666, (int)&amp;buf_BQ366EYdQs);</span><br><span class="line">      deleteString(&amp;buf_BQ366EYdQs);</span><br><span class="line">      if ( std::operator==&lt;char&gt;(&amp;buf_BQ366EYdQs3716UCANDOIT666, &amp;string_0_2) )</span><br><span class="line">        v2 = (char *)&amp;word_32;</span><br><span class="line">      else</span><br><span class="line">        v2 = (_BYTE *)(&amp;dword_0 + 1);</span><br><span class="line">      deleteString(&amp;string_0_2);</span><br><span class="line">      sub_DBAC(&amp;string_DU8NABvA);</span><br><span class="line">      v37 = &amp;buf_BQ366EYdQs3716UCANDOIT666;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">      newString1(&amp;v81, (int)&quot;A782E192B81NICAIsan38Qz&quot;);</span><br><span class="line">      CreateUnknowStructFunc((int)&amp;buf_33687, 24);</span><br><span class="line">      hextoString((int)&amp;v102, 1);</span><br><span class="line">      sub_DD44(&amp;v82, &amp;v103);</span><br><span class="line">      v2 = (_BYTE *)(&amp;stru_908 + 10);</span><br><span class="line">      if ( !std::operator==&lt;char&gt;(&amp;v81, &amp;v82) )</span><br><span class="line">        v2 = (_BYTE *)(&amp;dword_0 + 1);</span><br><span class="line">      if ( std::operator!=&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(&amp;v82, &amp;v81) )</span><br><span class="line">      &#123;</span><br><span class="line">        CreateUnknowStructFunc((int)&amp;string_DU8NABvA, 24);</span><br><span class="line">        hextoString((int)&amp;string_33687_0, 33687);</span><br><span class="line">        sub_DD44(&amp;v98, &amp;v106);</span><br><span class="line">        v2 = (char *)std::operator==&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(&amp;v98, &quot;0d87a&quot;);</span><br><span class="line">        deleteString(&amp;v98);</span><br><span class="line">        sub_DBAC(&amp;string_DU8NABvA);</span><br><span class="line">      &#125;</span><br><span class="line">      if ( v2 == (_BYTE *)&amp;dword_0 + 1 )</span><br><span class="line">        v2 = (char *)off_35CFC + 303183;</span><br><span class="line">      deleteString(&amp;v82);</span><br><span class="line">      sub_DBAC(&amp;buf_33687);</span><br><span class="line">      v37 = &amp;v81;</span><br><span class="line">    &#125;</span><br><span class="line">    deleteString(v37);</span><br><span class="line">    deleteString(&amp;buf_3ww3U53wOAWG333wwPZ56GGw0PO02OUW);</span><br><span class="line">    deleteString(&amp;newInputKeyBuf);</span><br><span class="line">  &#125;</span><br><span class="line">  deleteString(&amp;inputKeyString);</span><br><span class="line">  return v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="花指令"><a href="#花指令" class="headerlink" title="花指令"></a>花指令</h3><p>里面有一些花指令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if ( ((int (__fastcall *)(int *, char *))operator_equal)(&amp;v63, &amp;v64) )</span><br><span class="line">        v4 = 50;</span><br><span class="line">      else</span><br><span class="line">        v4 = 1;</span><br></pre></td></tr></table></figure><p>结尾的指令用于产生一个常量1。<br>而：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if ( v4 == 1 )</span><br><span class="line">  v4 = -1865641388;</span><br></pre></td></tr></table></figure><p>还有一些产生了一个字符串，然后if(串非空)将串置空;这样的花指令。</p><h3 id="check的主要操作"><a href="#check的主要操作" class="headerlink" title="check的主要操作"></a>check的主要操作</h3><p>函数的主要操作如下：</p><ol><li>将输入key的jstring对象转换成 cstring对象 。</li><li>key长度必须大于等于10，小于等于20。</li><li>将输入key置换到最后一位，变成key_change1。</li><li>索引 索引 0x7FC2 ，key_change2[i] = 0x7FC2[ key_change1[i]]，得到 key_change2。</li><li>将 key_change2按照字节进行低4位与高四位的置换生成 key_change3。</li><li>将 key_change3以4字节形式与 0x36098内容进行异或，当处于调试状态是其值为 0xBD9813BA，否则为 0x2333AE83。得到 key_change4,从这里可知key长度为0x10。</li><li>将 key_change4相邻2字节交换，得到 key_change5 ，即  key_change5[2i] =  key_change4[2i+1]    key_change5[2i + 1] =  key_change4[2i]。</li><li>再次 索引7FC2 ，key_change6[i] = 7FC2[ key_change5 [i]]， 得到 key_change6。</li><li>将 key_change6的第一字符置换到最后位置，得到 key_change7。</li><li>将 key_change7的所有字符的高4位对字符串“A3Cw6Gb0OZWPU52s ”进行索引，组成 key_change8_highString, 将 key_change7所有字符的低4位对字符串“A3Cw6Gb0OZWPU52s”进行索引，并进行倒序。组成 key_change8_lowString, 然后将 key_change8_highString与 key_change8_lowString进行拼接生成 key_change8</li><li>生成字符串“3ww3U53wOAWG333wwPZ56GGw0PO02OUW”。</li><li>将 key_change8 与 “3ww3U53wOAWG333wwPZ56GGw0PO02OUW”比较，相等返回1，否则返回其他。</li></ol><p>wp的其中一种解密代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">def calc1(input):</span><br><span class="line">    l = input[:-1]</span><br><span class="line">    l.insert(0, input[-1])</span><br><span class="line">    r = [chr(i) for i in l]</span><br><span class="line">    print (&apos;[+] calc1: &apos;, r)</span><br><span class="line"> </span><br><span class="line">def calc2(table, input):</span><br><span class="line">    r1 = []</span><br><span class="line">    for i in input:</span><br><span class="line">        for j in range(0, len(table)):</span><br><span class="line">            if i == table[j]:</span><br><span class="line">                r1.append(j)</span><br><span class="line">    print (&apos;[+] calc2: &apos;, r1)</span><br><span class="line">    return r1</span><br><span class="line"> </span><br><span class="line">def calc3(input):</span><br><span class="line">    r1 = []</span><br><span class="line">    for i in input:</span><br><span class="line">        r1.append(((i &gt;&gt; 4) &amp; 0xF) + ((i &amp; 0xF) &lt;&lt; 4))</span><br><span class="line">    print (&apos;[+] calc3: &apos;, r1)</span><br><span class="line">    return r1</span><br><span class="line"> </span><br><span class="line">def calc4(table, input):</span><br><span class="line">    r1 = []</span><br><span class="line">    n = 0</span><br><span class="line">    for i in input:</span><br><span class="line">        if n == 4:</span><br><span class="line">            n = 0</span><br><span class="line">        r1.append(i ^ table[n])</span><br><span class="line">        n += 1</span><br><span class="line">    print (&apos;[+] calc4: &apos;, r1)</span><br><span class="line">    return r1</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">def calc5(input):</span><br><span class="line">    for i in range(0, len(input), 2):</span><br><span class="line">        if i % 2 == 0:</span><br><span class="line">            tmp = input[i+1]</span><br><span class="line">            input[i+1] = input[i]</span><br><span class="line">            input[i] = tmp</span><br><span class="line">    print (&apos;[+] calc5: &apos;, input)</span><br><span class="line">    return input</span><br><span class="line"> </span><br><span class="line">def calc6(table, input):</span><br><span class="line">    r1 = []</span><br><span class="line">    for i in input:</span><br><span class="line">        for j in range(0, len(table)):</span><br><span class="line">            if i == table[j]:</span><br><span class="line">                r1.append(j)</span><br><span class="line">    print (&apos;[+] calc6: &apos;, r1)</span><br><span class="line">    return r1</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">def calc7(table, s1, s2):</span><br><span class="line">    r1 = []</span><br><span class="line">    for i in s1:</span><br><span class="line">        for j in range(0, len(table)):</span><br><span class="line">            if table[j] == i:</span><br><span class="line">                r1.append(j &lt;&lt; 4)</span><br><span class="line"> </span><br><span class="line">    n = 0</span><br><span class="line">    for i in s2:</span><br><span class="line">        for j in range(0, len(table)):</span><br><span class="line">            if table[j] == i:</span><br><span class="line">                r1[n] = r1[n] + j</span><br><span class="line">                n += 1</span><br><span class="line">    print (&apos;[+] calc7: &apos;, r1)</span><br><span class="line">    return r1</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">def calc8(input):</span><br><span class="line">    s1 = input[:15]</span><br><span class="line">    s1 = input[16] + s1</span><br><span class="line">    tmp = input[:15:-1]</span><br><span class="line">    s2 = input[16] + tmp[:15]</span><br><span class="line"> </span><br><span class="line">    print (&apos;[+] calc8:&apos;, s1, s2)</span><br><span class="line">    return s1, s2</span><br><span class="line"> </span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    mainTable = [0x40, 0x50, 0x78, 0x7A, 0x29, 0x88, 0xF7, 0x06, 0x21, 0x09, 0xF3, 0x5C, 0x95, 0xAE, 0x66, 0x12,</span><br><span class="line">0x8F, 0x85, 0xC8, 0x5A, 0xBF, 0x33, 0x3D, 0x86, 0x90, 0x8C, 0xED, 0xD5, 0x8B, 0xA4, 0xC5, 0xC7,</span><br><span class="line">0xEA, 0xF6, 0x79, 0x1E, 0x3C, 0xBA, 0x97, 0x4E, 0x38, 0x60, 0x08, 0xDD, 0xFA, 0xB3, 0xDE, 0x77,</span><br><span class="line">0x81, 0x41, 0x19, 0xF4, 0x52, 0x6B, 0xFF, 0xD8, 0x2A, 0xC2, 0xBC, 0xB9, 0xE7, 0x91, 0xE9, 0x54,</span><br><span class="line">0x82, 0xAD, 0x7E, 0x11, 0x35, 0x93, 0xB0, 0xA1, 0x18, 0xC4, 0x53, 0x0A, 0x74, 0x2F, 0xE2, 0x17,</span><br><span class="line">0x98, 0x0C, 0x70, 0x92, 0x47, 0x64, 0x16, 0xFE, 0x75, 0x83, 0x37, 0x8D, 0x07, 0x72, 0x25, 0x04,</span><br><span class="line">0xB7, 0xC9, 0xCE, 0x0E, 0x9E, 0xEB, 0xCF, 0xB1, 0xDB, 0x71, 0x56, 0xAF, 0x39, 0xF0, 0xBB, 0xBD,</span><br><span class="line">0x46, 0x32, 0xE6, 0x9F, 0x4F, 0x1B, 0x4D, 0x68, 0xF2, 0x4B, 0x2E, 0xCB, 0x20, 0xD2, 0x0B, 0xA5,</span><br><span class="line">0xEE, 0xE1, 0xA9, 0x2B, 0x84, 0x14, 0x67, 0x63, 0x6F, 0x3E, 0x7F, 0xFD, 0xB6, 0xFC, 0x55, 0x7C,</span><br><span class="line">0x5F, 0xF8, 0x4C, 0x65, 0x2C, 0x30, 0xEF, 0x48, 0xD7, 0x0D, 0x0F, 0x1A, 0x5E, 0xC0, 0x3A, 0x57,</span><br><span class="line">0x6A, 0x31, 0x00, 0xF1, 0x59, 0x10, 0xB8, 0x9A, 0x43, 0x73, 0xA3, 0x6E, 0x26, 0x1D, 0x13, 0x15,</span><br><span class="line">0x89, 0x5D, 0xDA, 0x61, 0xD1, 0x6C, 0xD3, 0xE0, 0xD9, 0x1F, 0xD4, 0x49, 0xEC, 0xE3, 0xD0, 0x34,</span><br><span class="line">0x36, 0xC6, 0x24, 0xE4, 0xF5, 0xAA, 0x9B, 0xB2, 0x4A, 0xDF, 0xAC, 0x96, 0xDC, 0xE8, 0xA0, 0xF9,</span><br><span class="line">0xC1, 0x9C, 0xCA, 0x9D, 0x27, 0xC3, 0xBE, 0x87, 0x28, 0xCC, 0x99, 0xE5, 0x45, 0x58, 0x94, 0x23,</span><br><span class="line">0x22, 0xFB, 0x02, 0x01, 0x03, 0x8A, 0x7B, 0xB5, 0x1C, 0xA7, 0x44, 0xCD, 0xA2, 0x51, 0x8E, 0x3F,</span><br><span class="line">0x42, 0xD6, 0x69, 0xAB, 0x62, 0x3B, 0x7D, 0xA6, 0x05, 0x2D, 0xA8, 0x80, 0x6D, 0xB4, 0x76, 0x5B]</span><br><span class="line"> </span><br><span class="line">    table = [&apos;A&apos;, &apos;3&apos;, &apos;C&apos;, &apos;w&apos;, &apos;6&apos;, &apos;G&apos;, &apos;b&apos;, &apos;0&apos;, &apos;O&apos;, &apos;Z&apos;, &apos;W&apos;, &apos;P&apos;, &apos;U&apos;, &apos;5&apos;, &apos;2&apos;, &apos;s&apos;]</span><br><span class="line">    txor = [0x83, 0xAE, 0x33, 0x23]</span><br><span class="line"> </span><br><span class="line">    s1, s2 = calc8(&apos;3ww3U53wOAWG333wwPZ56GGw0PO02OUW&apos;)</span><br><span class="line">    key1 = calc7(table, s1, s2)</span><br><span class="line">    key2 = calc6(mainTable, key1)</span><br><span class="line">    key3 = calc5(key2)</span><br><span class="line">    key4 = calc4(txor, key3)</span><br><span class="line">    key5 = calc3(key4)</span><br><span class="line">    key6 = calc2(mainTable, key5)</span><br><span class="line">    calc1(key6)</span><br></pre></td></tr></table></figure><p>梳理下本题的过程：</p><ol><li>JAVA层只有一些简单的混淆，没有关键逻辑，重点在native层的一个函数，但是想要找到并且分析该函数有重重困难</li><li>反调试，采用了查看/proc/self/status，是否有调试进程的方式，但是反调试函数就很难找，并且增加了诸多混淆和垃圾代码。同时，检测到反调试以后，会修改解密阶段的关键key，导致解密错误。</li><li>对JNI_OnLoad的地址进行hook，导致ida静态分析时解析出错，需要找到hook地址的函数，然后分析JNI_OnLoad的真正地址，JNI_OnLoad中也有很多垃圾代码和花指令。</li><li>真正的check函数，是在真正的JNI_OnLoad中动态注册的，但是，需要动态解密，大概是从函数起始地址+150往后400字节这一段。</li><li>真正的check函数中依然有很多垃圾代码，分析起来也比较麻烦。</li></ol><p><strong>以前不知道的</strong>：init_proc函数和init_array函数比较重要，是so初始化以后最小调用的函数，在init_array函数中可以看到注册了很多关键函数。包括查看/proc/self/status的，修改内存的，注册反调试线程的等等。</p><p>说到底，对elf文件格式不懂，对so的初始化和调用也不熟悉。应该补补课了。</p><p>参考了各位做出来的大佬的WP，深感小白的无力</p><p><a href="https://ctf.pediy.com/game-fight-59.htm" target="_blank" rel="noopener">https://ctf.pediy.com/game-fight-59.htm</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;看雪CTF——ExecuteTable&quot;&gt;&lt;a href=&quot;#看雪CTF——ExecuteTable&quot; class=&quot;headerlink&quot; title=&quot;看雪CTF——ExecuteTable&quot;&gt;&lt;/a&gt;看雪CTF——ExecuteTable&lt;/h1&gt;&lt;p&gt;题目
      
    
    </summary>
    
      <category term="WriteUp" scheme="http://www.w4ter5heep.com/categories/WriteUp/"/>
    
    
      <category term="CTF" scheme="http://www.w4ter5heep.com/tags/CTF/"/>
    
      <category term="Android" scheme="http://www.w4ter5heep.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>SUCTF复盘——三个RE</title>
    <link href="http://www.w4ter5heep.com/2018/06/04/SUCTF%E5%A4%8D%E7%9B%98%E2%80%94%E2%80%94%E4%B8%89%E4%B8%AARE/"/>
    <id>http://www.w4ter5heep.com/2018/06/04/SUCTF复盘——三个RE/</id>
    <published>2018-06-04T13:01:02.000Z</published>
    <updated>2018-07-04T02:08:27.805Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RoughLike与期末大作业"><a href="#RoughLike与期末大作业" class="headerlink" title="RoughLike与期末大作业"></a>RoughLike与期末大作业</h2><p>.Net逆向<br>首先承认，比赛的时候因为手比较快下载的是有img文件夹的压缩包，但是很迷，上午提交截图的flag提示错误，下午就对了。。。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/1527601594188.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/1527601674717.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>更新后题目的目录结构如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/1527642510738.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>可以发现dll文件非常大，反倒是主程序比较小<br>在test_Data中找到比较多的文件<br>但好像运行报错？<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/1527866689432.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>还要改文件夹名字。。。</p><p>hint提示要看过场动画<br>首先可以看到开始的过场动画：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/1527866932928.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>说明flag有两段？有点牵强。。。</p><p>尝试玩了几关，没什么发现，并且动作缓慢</p><p>得到第二段flag的一种方法：<br>查看Data文件夹中的level1文件，使用010editor直接搜索字符串，找到：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/1527869996737.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>得到第二段flag：<code>_70_5uc7F</code><br>有点不讲道理</p><p>得到第一段flag方法：<br>首先要知道Managed文件夹中Dotfuscated是因为对.NET进行了混淆：<br>使用De4dot对Dotfuscated的Assembly-CSharp.dll进行去混淆，该工具在吾爱破解工具包中就有。<br>然后使用.NET Reflator进行反编译，搜索关键词找到关键函数：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/1527871120681.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>有两个decrypt函数：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/1527871198779.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>内容：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/1527871225771.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/1527871268243.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>满足这两个条件即会在地图上随机位置生成一个flag，但是条件比较苛刻：<br>12&lt;&lt;8|12&gt;&gt;0x18<br>目测是一个很大的数<br>第二个也同样</p><p>可以通过修改初始参数值使条件满足，但是这里想办法分析函数：<br>这里要查找S3cretArray数组初始化的位置是LoadBundle：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/1527872148100.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>继续追踪到解密函数：<br>DecryptAssetBundle(<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/1527872277037.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>前几天刚做了一个题，目测是索引表变了以后的base64</p><p>要解密的文件是：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/1527872767267.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>解密脚本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import string</span><br><span class="line">import base64</span><br><span class="line"> </span><br><span class="line">custom  = &quot;QRSTUVWXYZABCDEFGHIJKLMNOPabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span><br><span class="line">standard= &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span><br><span class="line"> </span><br><span class="line">plainText=&quot;GetProcAddr&quot;</span><br><span class="line"> </span><br><span class="line">def decryptbundle(pathname,dst):</span><br><span class="line">decode=&quot;&quot;</span><br><span class="line">with open(&quot;/Users/ilan/Desktop/SUCTF/re/Output/test_Data/StreamingAssets/bundles/%s&quot;%(pathname),&quot;rb&quot;) as f:</span><br><span class="line">encode=f.read()</span><br><span class="line">for ch in encode:</span><br><span class="line">if(ch in custom):</span><br><span class="line">decode=decode+standard[string.find(custom,str(ch))]</span><br><span class="line">elif(ch == &apos;=&apos;):</span><br><span class="line">decode= decode+&apos;=&apos;</span><br><span class="line">decode=base64.b64decode(decode)</span><br><span class="line">with open(dst,&quot;wb&quot;) as f:</span><br><span class="line">f.write(decode)</span><br><span class="line"> </span><br><span class="line">decryptbundle(&quot;WeaponYourself.assetbundle&quot;,&quot;ext1&quot;)</span><br></pre></td></tr></table></figure></p><p>此时对解密后的文件进行解析即可：<br>利用工具解析文件，中间需要经过一步解压缩，搜索二进制文件的“flag”可以得到：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/1527874571861.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>第一部分flag的base64<br>也可以使用python的第三方库解压读取文件内容：<br><a href="https://github.com/HearthSim/UnityPack" target="_blank" rel="noopener">https://github.com/HearthSim/UnityPack</a></p><p>在此基础上，可以通过分析代码的方式找到前半段Flag：<br>在场景初始化函数中找到：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/1527874804833.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>满足判断条件会设置为True<br>条件为满足关卡数目和99整除且defeatedBoss数量大于0x72000000且defeatedMonster大于514时，会设置一个文本SPText标志位为true。</p><p>不可能完成的任务</p><p>因此可以直接设置SPText标志为True：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/1527875069592.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>然后重新进入游戏就会直接显示flag了</p><p>官方的wp比较简单，通过修改程序执行逻辑使flag可以在程序运行时就显示flag以及相关道具</p><h2 id="simpleformat"><a href="#simpleformat" class="headerlink" title="simpleformat"></a>simpleformat</h2><p>就是一个printf输出格式化的问题<br>程序逻辑比较简单：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/1527900424443.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>需要输入36个字符，主要变换在sub_4006F6函数，然后将数据写入了/dev/null<br>该函数比较恶心，有一大堆的dprintf<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/1527900566263.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>分析这一大堆奇怪的字符串，可以发现一些规律：<br>格式基本类似于<code>%1$*2$s</code>，每个函数中字符串的结尾都是<code>%20$n</code><br>首先要知道参数的用法：<br><code>%n</code>指的是向任意地址写入任意值，作用是将之前输出的字符个数写入对应的参数指向的地址<br>printf的<code>$</code>的用法则是指定这个格式串解析的参数偏移量。<code>%2$s</code>即为取出后面的第2个参数，以%s的形式输出。<br>因此<code>%20$n</code>就是将之前输出的字符个数写到第20个参数的地址里。即<strong>unk_627200</strong>用于计数，因此每个dprintf最后第20个参数都是一个int数组中的元素，并且是用于memcmp的比较<br>接下来就是每次写入的字符数量是如何获得的，分析<code>%1$*2$s</code>格式的含义<br><code>*</code>有指定宽度的效果，宽度取自后面的参数，<code>%1$*2$s</code>就是将第一个参数以第二个参数的宽度输出<br>当输出<code>%1$*2$s</code>的串之后，当前输出长度即为第二个参数。继续遇到<code>%1$*2$s</code>则再次输出第二个参数长度，当前输出长度就变成了两倍第二个参数，最后会将输出总长度写入<strong>unk_627200</strong>因此起到了一个求和的效果：<br>n1<em>l1 + n2</em>l3 + …… + n19*l19 = m1<br>······<br>总共18个方程，18元一次方程组<br>大佬的脚本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">from zio import *</span><br><span class="line">from z3 import *</span><br><span class="line">formats = [] #数据太多太长给删掉了。。。可以自己补</span><br><span class="line">results = [5462280L, 4346506L, 5891159L, 6839864L, 7912833L, 7049790L, 7455784L, 7311612L, 6299256L, 7114100L, 7037043L, 6873051L, 5644794L, 8014197L, 6432215L, 6638450L, 6959905L, 6705884L]</span><br><span class="line">print len(formats)</span><br><span class="line">print len(results)</span><br><span class="line">s = Solver()</span><br><span class="line">d = [BitVec(&quot;d&#123;0&#125;&quot;.format(i), 16) for i in range(18)]</span><br><span class="line">for j in range(len(formats)):</span><br><span class="line">    fmt = formats[j]</span><br><span class="line">    left = 0</span><br><span class="line">    left_str = &apos;&apos;</span><br><span class="line">    for i in range(2, 20):</span><br><span class="line">        c = &apos;%1$*&apos;+str(i)+&apos;$s&apos;</span><br><span class="line"></span><br><span class="line">        left += fmt.count(c)*d[i-2]</span><br><span class="line">        #left_str += str(fmt.count(c))+&apos;*d[&apos;+str(i-2)+&apos;] + &apos;</span><br><span class="line"></span><br><span class="line">    #print left_str</span><br><span class="line">    s.add(left == results[j])</span><br><span class="line"></span><br><span class="line">print s.check()</span><br><span class="line">print s.model()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">model = s.model()</span><br><span class="line">init_state = &#123;&#125;</span><br><span class="line">for k in model:</span><br><span class="line">    idx = int(str(k)[1:])</span><br><span class="line">    val = model[k].as_long()</span><br><span class="line">    #print idx, val</span><br><span class="line">    init_state[idx] = val</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = &apos;&apos;</span><br><span class="line">for i in range(18):</span><br><span class="line">    flag += l16(init_state[i])</span><br><span class="line"></span><br><span class="line">print flag</span><br></pre></td></tr></table></figure></p><p>注意细节，flag每两位作为了一个数<br>伏地膜</p><h2 id="enigma"><a href="#enigma" class="headerlink" title="enigma"></a>enigma</h2><p>即二战时德国所使用的转轮密码机<br>简单查看了密码机的原理，实际上enigma采用复式字母替换加密方法，利用键盘、转子、跳线、反射板、显示器进行对称加密/解密。<br>Enigma属于算法和密钥分离的加密方法，破解Enigma的难度在于不知道当前密钥，包括转子的初始位置和跳线设置。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/1527908197009.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/1527908206823.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>查找关键函数，根据官方wp，程序实现了转轮机，线性反馈移位寄存器，换位器等<br>输入：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/1527909005594.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>长度要求是36<br>最后经过比较要相等：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/1527909263500.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>中间三个处理函数：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/1527909344106.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>sub_124F<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/1527909422356.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/1527909512441.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>单个取输入字符进行处理，然后写入最后用于比较的outstr</p><p>sub_F1E<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/1527909689435.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/1527909700557.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>sub_11F0<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/1527909809808.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>因此对于输入的处理都是线性的，有爆破的可能<br>断点下在：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/1527910679359.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>然后对存储结果处的数据进行比较：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/1527910745369.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/1527910774816.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>这是比较取巧的方法，需要自动调用gdb</p><p>出题人的本意是对程序进行生逆，把密文逆成明文。。。<br>也有队伍是这么做的，服：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">with open(&apos;Enigma&apos;, &apos;rb&apos;) as f:</span><br><span class="line">    input_enc = list(f.read()[0x30a0:][:36])</span><br><span class="line"></span><br><span class="line">def bit(a, b):</span><br><span class="line">    return (a &gt;&gt; b) &amp; 1</span><br><span class="line"></span><br><span class="line"># sub_11F0</span><br><span class="line">state = 0x5F3759DF</span><br><span class="line">for i in range(9):</span><br><span class="line">    v16 = bit(state, 0) ^ bit(state, 2) ^ bit(state, 3) ^ bit(state, 5) ^ bit(state, 7) ^ bit(state, 31)</span><br><span class="line">    state = (state &gt;&gt; 1) | (v16 &lt;&lt; 31)</span><br><span class="line">    for j in range(4):</span><br><span class="line">        input_enc[i*4 + j] ^= (state &gt;&gt; (j*8)) &amp; 0xff</span><br><span class="line"></span><br><span class="line"># sub_F1E</span><br><span class="line">def partialRev(c):</span><br><span class="line">    c = bin(c)[2:].rjust(8, &apos;0&apos;)</span><br><span class="line">    c = list(map(int, c))</span><br><span class="line">    r = list(reversed(c))</span><br><span class="line">    c = r[:3] + c[3:5] + r[5:]</span><br><span class="line">    return int(&apos;&apos;.join(map(str, c)), 2)</span><br><span class="line">input_enc = list(map(partialRev, input_enc))</span><br><span class="line"></span><br><span class="line"># sub_124F</span><br><span class="line">wire = [</span><br><span class="line">    [ 0x31, 0x62, 0x93, 0xC4 ],</span><br><span class="line">    [ 0x21, 0x42, 0x63, 0x84 ],</span><br><span class="line">    [ 0x3D, 0x7A, 0xB7, 0xF4 ],</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">def _mix(a1, a2, a3):</span><br><span class="line">    a5 = a3 ^ a2 ^ a1</span><br><span class="line">    a4 = a2 &amp; a1 | a3 &amp; (a2 | a1)</span><br><span class="line">    return (a4, a5)</span><br><span class="line"></span><br><span class="line">def mix(a2, v16, a4):</span><br><span class="line">    bits = []</span><br><span class="line">    for i in range(8):</span><br><span class="line">        v4 = bit(a2, i)</span><br><span class="line">        v5 = bit(v16, i)</span><br><span class="line">        a4, a5 = _mix(v5, v4, a4)</span><br><span class="line">        bits.insert(0, a5)</span><br><span class="line">    return int(&apos;&apos;.join(map(str, bits)), 2), a4</span><br><span class="line"></span><br><span class="line">flag = []</span><br><span class="line">for i, t in enumerate(input_enc):</span><br><span class="line">    for c in range(32, 128):</span><br><span class="line">        a4 = 0</span><br><span class="line">        v16 = c</span><br><span class="line"></span><br><span class="line">        a2 = wire[0][i%4]</span><br><span class="line">        v16, a4 = mix(a2, v16, a4)</span><br><span class="line"></span><br><span class="line">        a2 = wire[1][(i//4%4)]</span><br><span class="line">        v16, a4 = mix(a2, v16, a4)</span><br><span class="line"></span><br><span class="line">        a2 = wire[2][i//16]</span><br><span class="line">        v16, a4 = mix(a2, v16, a4)</span><br><span class="line">        if v16 == t:</span><br><span class="line">            flag.append(c)</span><br><span class="line">            break</span><br><span class="line">print(bytes(flag).decode(&apos;ascii&apos;))</span><br></pre></td></tr></table></figure></p><p>首先获取最后结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">with open(&apos;Enigma&apos;, &apos;rb&apos;) as f:</span><br><span class="line">    input_enc = list(f.read()[0x30a0:][:36])</span><br><span class="line"></span><br><span class="line">print(input_enc)</span><br></pre></td></tr></table></figure></p><p>然后得到<strong>sub_11F0</strong>异或之前的结果<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/1527911287081.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>该值是不是可以动态调试得到，内部有好多子函数，没有仔细分析<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">state = 0x5F3759DF</span><br><span class="line">for i in range(9):</span><br><span class="line">    v16 = bit(state, 0) ^ bit(state, 2) ^ bit(state, 3) ^ bit(state, 5) ^ bit(state, 7) ^ bit(state, 31)</span><br><span class="line">    state = (state &gt;&gt; 1) | (v16 &lt;&lt; 31)</span><br><span class="line">    for j in range(4):</span><br><span class="line">        input_enc[i*4 + j] ^= (state &gt;&gt; (j*8)) &amp; 0xff</span><br></pre></td></tr></table></figure></p><p>然后是<strong>sub_F1E</strong>的逆向：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/1527911593518.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def partialRev(c):</span><br><span class="line">    c = bin(c)[2:].rjust(8, &apos;0&apos;)</span><br><span class="line">    c = list(map(int, c))</span><br><span class="line">    r = list(reversed(c))</span><br><span class="line">    c = r[:3] + c[3:5] + r[5:]</span><br><span class="line">    return int(&apos;&apos;.join(map(str, c)), 2)</span><br><span class="line">input_enc = list(map(partialRev, input_enc))</span><br></pre></td></tr></table></figure></p><p>也是看起来比较头疼的函数</p><p>最后是<strong>sub_124F</strong>，因为比较复杂，采用了正向python模拟实现然后爆破的方式：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/1527911726618.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>没有勇气看下去。。。。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">wire = [</span><br><span class="line">    [ 0x31, 0x62, 0x93, 0xC4 ],</span><br><span class="line">    [ 0x21, 0x42, 0x63, 0x84 ],</span><br><span class="line">    [ 0x3D, 0x7A, 0xB7, 0xF4 ],</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">def _mix(a1, a2, a3):</span><br><span class="line">    a5 = a3 ^ a2 ^ a1</span><br><span class="line">    a4 = a2 &amp; a1 | a3 &amp; (a2 | a1)</span><br><span class="line">    return (a4, a5)</span><br><span class="line"></span><br><span class="line">def mix(a2, v16, a4):</span><br><span class="line">    bits = []</span><br><span class="line">    for i in range(8):</span><br><span class="line">        v4 = bit(a2, i)</span><br><span class="line">        v5 = bit(v16, i)</span><br><span class="line">        a4, a5 = _mix(v5, v4, a4)</span><br><span class="line">        bits.insert(0, a5)</span><br><span class="line">    return int(&apos;&apos;.join(map(str, bits)), 2), a4</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;RoughLike与期末大作业&quot;&gt;&lt;a href=&quot;#RoughLike与期末大作业&quot; class=&quot;headerlink&quot; title=&quot;RoughLike与期末大作业&quot;&gt;&lt;/a&gt;RoughLike与期末大作业&lt;/h2&gt;&lt;p&gt;.Net逆向&lt;br&gt;首先承认，比赛的
      
    
    </summary>
    
      <category term="WriteUp" scheme="http://www.w4ter5heep.com/categories/WriteUp/"/>
    
    
      <category term="CTF" scheme="http://www.w4ter5heep.com/tags/CTF/"/>
    
      <category term="RE" scheme="http://www.w4ter5heep.com/tags/RE/"/>
    
  </entry>
  
  <entry>
    <title>StarCTF-BabyDroid</title>
    <link href="http://www.w4ter5heep.com/2018/05/02/StarCTF-BabyDroid/"/>
    <id>http://www.w4ter5heep.com/2018/05/02/StarCTF-BabyDroid/</id>
    <published>2018-05-01T16:04:08.000Z</published>
    <updated>2018-07-04T02:08:51.844Z</updated>
    
    <content type="html"><![CDATA[<p>逆向题目中唯一一道android逆向，做出来的过程也比较费力，这里简单记录。</p><p>安装程序发现会闪退，可能有反调试措施，首先进行静态分析。<br>JEB查看Java代码部分：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/1525189773745.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>关键方法是check0，同时注意到上面有许多check函数的native声明：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/1525189793178.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>从so文件中查找相关方法。首先在liba.so中找到了check0函数：<br>发现进一步调用的是check函数，但是在liba中没有相关信息，查找libb，没有直接找到check函数，考虑JNIOnLoad进行了注册，但是也没有找到JNIOnLoad函数，查找发现了sub_ED8函数：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/1525189811484.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>对一部分数据进行了解密，同时发现了：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/1525189835087.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/1525189839990.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>所以JNIOnLoad函数会在运行时才解密：<br>解密的关键是这个值：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/1525189852059.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>进入sub_9B4发现计算的应该是一个校验和，<br>分析程序逻辑，写出计算校验和的脚本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">def crc32(ss):</span><br><span class="line">    v2 = i32(-1)</span><br><span class="line">    v7 = i32()</span><br><span class="line">    for s in ss:</span><br><span class="line">        if isinstance(s, bytes):</span><br><span class="line">            s = s[0]</span><br><span class="line">        for i in range(8):</span><br><span class="line">            v7.value = v2.value ^ (s &gt;&gt; i &lt;&lt; 31)</span><br><span class="line">            v2.value *= 2</span><br><span class="line">            if v7.value &lt;= -1:</span><br><span class="line">                # if not 0x4C11DB7 &amp; 1:</span><br><span class="line">                #     v2.value ^= 1</span><br><span class="line">                v2.value ^= 0x4C11DB7</span><br><span class="line">    return u32(-v2.value).value - 1</span><br></pre></td></tr></table></figure></p><p>得到libb的校验和：0x6674632a<br>解密libb.so可以得到JNIOnLoad：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/1525189971044.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>这里也进行了注册，将相关字符串进行解密可以发现就是对check函数的注册，解密脚本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">def xorstr():</span><br><span class="line">    def get_result(nums, key):</span><br><span class="line">        nums = [[((i &gt;&gt; (j * 8)) &amp; 0xff) for j in range(4)] for i in nums]</span><br><span class="line">        # nums = sum(nums, [])</span><br><span class="line">        nums = list(itertools.chain.from_iterable(nums))</span><br><span class="line">        nums = [i ^ key for i in itertools.takewhile(lambda i: i != 0, nums)]</span><br><span class="line"></span><br><span class="line">        b = bytes(nums)</span><br><span class="line">        return b</span><br><span class="line"></span><br><span class="line">    nums = [0xBCFEFCF0,</span><br><span class="line">            0xEAE9A1E2,</span><br><span class="line">            0xF1F2F1BC,</span><br><span class="line">            0xF7FDF2EA,</span><br><span class="line">            0xF7FAFCE1,</span><br><span class="line">            0xFAF2DEBC,</span><br><span class="line">            0xE7F0D2FD,</span><br><span class="line">            0xE7FAE5FA,</span><br><span class="line">            0xea]</span><br><span class="line"></span><br><span class="line">    print(get_result(nums, 0x93))</span><br><span class="line"></span><br><span class="line">    nums = [0x777C5A3E,</span><br><span class="line">            0x7A397760,</span><br><span class="line">            0x39717877,</span><br><span class="line">            0x7F646245,</span><br><span class="line">            0x3F2D7178,</span><br><span class="line">            0x4C]</span><br><span class="line">    print(get_result(nums, 0x16))</span><br><span class="line"></span><br><span class="line">    nums = [0x73757873, 0x7B]</span><br><span class="line">    print((get_result(nums, 0x10)))</span><br></pre></td></tr></table></figure></p><p>解密结果为：<br>com/q2zy/babyandroid/MainActivity<br> (Ljava/lang/String;)Z<br> check</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/1525190067624.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>即是注册的函数，但是发现依然是乱码，注意到下面还有一段解密：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/1525190079202.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>这里用到了liba.so的校验和，计算发现也是0x6674632a<br>解密得到check 函数：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/1525190090121.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>再次用到了liba.so的校验和，分析逻辑写出解密脚本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">def get_flag():</span><br><span class="line">    crc = crc32(open(&apos;/Users/alset/Downloads/apk/lib/armeabi-v7a/liba.so&apos;, &apos;rb&apos;).read())</span><br><span class="line">    crc2 = crc * crc</span><br><span class="line">    checksums = [((crc2 &gt;&gt; (j * 8)) &amp; 0xff) for j in range(8)]</span><br><span class="line">    b = bytearray([</span><br><span class="line">        0xD5,</span><br><span class="line">        8,</span><br><span class="line">        0x4B,</span><br><span class="line">        0x11,</span><br><span class="line">        0xBF,</span><br><span class="line">        0xC,</span><br><span class="line">        0xB,</span><br><span class="line">        0x1F,</span><br><span class="line">        0xDC,</span><br><span class="line">        0x57,</span><br><span class="line">        0x64,</span><br><span class="line">        0x74,</span><br><span class="line">        0xB4,</span><br><span class="line">        0x6D,</span><br><span class="line">        0x5B,</span><br><span class="line">        0xD4,</span><br><span class="line">        0xEB,</span><br><span class="line">        0x1D,</span><br><span class="line">        0x51,</span><br><span class="line">        0xAE,</span><br><span class="line">        0xD5,</span><br><span class="line">        0x44,</span><br><span class="line">        8,</span><br><span class="line">        # 0</span><br><span class="line">    ])</span><br><span class="line">    for i in range(8):</span><br><span class="line">        for j in range(8):</span><br><span class="line">            b[i + j] ^= checksums[j]</span><br><span class="line">    i = 15</span><br><span class="line">    for j in range(8):</span><br><span class="line">        b[i + j] ^= checksums[j]</span><br><span class="line"></span><br><span class="line">    print(b)</span><br></pre></td></tr></table></figure></p><p>得到flag：1nTr3stIng-AnDr0id-A&amp;D!<br>完整解密脚本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">import mmap</span><br><span class="line">import itertools</span><br><span class="line">from ctypes import c_int32 as i32, c_uint32 as u32</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def memory_map(filename, access=mmap.ACCESS_COPY):</span><br><span class="line">    size = os.path.getsize(filename)</span><br><span class="line">    fd = os.open(filename, os.O_RDWR)</span><br><span class="line">    return mmap.mmap(fd, size, access=access)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def crc32(ss):</span><br><span class="line">    v2 = i32(-1)</span><br><span class="line">    v7 = i32()</span><br><span class="line">    for s in ss:</span><br><span class="line">        if isinstance(s, bytes):</span><br><span class="line">            s = s[0]</span><br><span class="line">        for i in range(8):</span><br><span class="line">            v7.value = v2.value ^ (s &gt;&gt; i &lt;&lt; 31)</span><br><span class="line">            v2.value *= 2</span><br><span class="line">            if v7.value &lt;= -1:</span><br><span class="line">                # if not 0x4C11DB7 &amp; 1:</span><br><span class="line">                #     v2.value ^= 1</span><br><span class="line">                v2.value ^= 0x4C11DB7</span><br><span class="line">    return u32(-v2.value).value - 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def recoverlibb():</span><br><span class="line">    m = memory_map(&apos;/images/apk/lib/armeabi-v7a/libb.so&apos;)</span><br><span class="line"></span><br><span class="line">    start = 0xab8</span><br><span class="line">    size = 0x420</span><br><span class="line">    # right_asm = [0xf0, 0xb5, 0x3, 0xaf]</span><br><span class="line">    # checksums = [m[start + i] ^ right_asm[i] for i in range(len(right_asm))]</span><br><span class="line">    checksum = crc32(m)</span><br><span class="line">    checksums = [((checksum &gt;&gt; (j * 8)) &amp; 0xff) for j in range(4)]</span><br><span class="line">    ichecksums = itertools.cycle(checksums)</span><br><span class="line">    for i in range(size):</span><br><span class="line">        m[start + i] = m[start + i] ^ next(ichecksums)</span><br><span class="line"></span><br><span class="line">    start += 0x27C</span><br><span class="line">    size -= 0x27C</span><br><span class="line">    for i in range(0, , 4):</span><br><span class="line">        m[start + i], m[start + i + 1], m[start + i + 2], m[start + i + 3] = m[start + i + 2], m[start + i + 3], m[</span><br><span class="line">            start + i], m[start + i + 1]</span><br><span class="line">    # right_asm = [0xFF, 0xF7, 0x3E, 0xEE]</span><br><span class="line">    # checksums = [m[start + size - 4 + i] ^ right_asm[i] for i in range(len(right_asm))]</span><br><span class="line">    checksum = crc32(open(&apos;/images/apk/lib/armeabi-v7a/liba.so&apos;, &apos;rb&apos;).read())</span><br><span class="line">    print(&apos;a: &apos;, checksum)</span><br><span class="line">    checksums = [((checksum &gt;&gt; (j * 8)) &amp; 0xff) for j in range(4)]</span><br><span class="line">    ichecksums = itertools.cycle(checksums)</span><br><span class="line">    for i in range(size):</span><br><span class="line">        m[start + i] = m[start + i] ^ next(ichecksums)</span><br><span class="line"></span><br><span class="line">    m.seek(0)</span><br><span class="line">    open(&apos;/images/apk/lib/armeabi-v7a/libbnew2.so&apos;, &apos;wb&apos;).write(m.read())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def xorstr():</span><br><span class="line">    def get_result(nums, key):</span><br><span class="line">        nums = [[((i &gt;&gt; (j * 8)) &amp; 0xff) for j in range(4)] for i in nums]</span><br><span class="line">        # nums = sum(nums, [])</span><br><span class="line">        nums = list(itertools.chain.from_iterable(nums))</span><br><span class="line">        nums = [i ^ key for i in itertools.takewhile(lambda i: i != 0, nums)]</span><br><span class="line"></span><br><span class="line">        b = bytes(nums)</span><br><span class="line">        return b</span><br><span class="line"></span><br><span class="line">    nums = [0xBCFEFCF0,</span><br><span class="line">            0xEAE9A1E2,</span><br><span class="line">            0xF1F2F1BC,</span><br><span class="line">            0xF7FDF2EA,</span><br><span class="line">            0xF7FAFCE1,</span><br><span class="line">            0xFAF2DEBC,</span><br><span class="line">            0xE7F0D2FD,</span><br><span class="line">            0xE7FAE5FA,</span><br><span class="line">            0xea]</span><br><span class="line"></span><br><span class="line">    print(get_result(nums, 0x93))</span><br><span class="line"></span><br><span class="line">    nums = [0x777C5A3E,</span><br><span class="line">            0x7A397760,</span><br><span class="line">            0x39717877,</span><br><span class="line">            0x7F646245,</span><br><span class="line">            0x3F2D7178,</span><br><span class="line">            0x4C]</span><br><span class="line">    print(get_result(nums, 0x16))</span><br><span class="line"></span><br><span class="line">    nums = [0x73757873, 0x7B]</span><br><span class="line">    print((get_result(nums, 0x10)))</span><br><span class="line"></span><br><span class="line">def get_flag():</span><br><span class="line">    crc = crc32(open(&apos;/images/apk/lib/armeabi-v7a/liba.so&apos;, &apos;rb&apos;).read())</span><br><span class="line">    crc2 = crc * crc</span><br><span class="line">    checksums = [((crc2 &gt;&gt; (j * 8)) &amp; 0xff) for j in range(8)]</span><br><span class="line">    b = bytearray([</span><br><span class="line">        0xD5,</span><br><span class="line">        8,</span><br><span class="line">        0x4B,</span><br><span class="line">        0x11,</span><br><span class="line">        0xBF,</span><br><span class="line">        0xC,</span><br><span class="line">        0xB,</span><br><span class="line">        0x1F,</span><br><span class="line">        0xDC,</span><br><span class="line">        0x57,</span><br><span class="line">        0x64,</span><br><span class="line">        0x74,</span><br><span class="line">        0xB4,</span><br><span class="line">        0x6D,</span><br><span class="line">        0x5B,</span><br><span class="line">        0xD4,</span><br><span class="line">        0xEB,</span><br><span class="line">        0x1D,</span><br><span class="line">        0x51,</span><br><span class="line">        0xAE,</span><br><span class="line">        0xD5,</span><br><span class="line">        0x44,</span><br><span class="line">        8,</span><br><span class="line">        # 0</span><br><span class="line">    ])</span><br><span class="line">    for i in range(8):</span><br><span class="line">        for j in range(8):</span><br><span class="line">            b[i + j] ^= checksums[j]</span><br><span class="line">    i = 15</span><br><span class="line">    for j in range(8):</span><br><span class="line">        b[i + j] ^= checksums[j]</span><br><span class="line"></span><br><span class="line">    print(b)</span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    # xorstr()</span><br><span class="line">    # recoverlibb()</span><br><span class="line">    get_flag()</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;逆向题目中唯一一道android逆向，做出来的过程也比较费力，这里简单记录。&lt;/p&gt;
&lt;p&gt;安装程序发现会闪退，可能有反调试措施，首先进行静态分析。&lt;br&gt;JEB查看Java代码部分：&lt;br&gt;&lt;figure class=&quot;image-bubble&quot;&gt;
           
      
    
    </summary>
    
      <category term="WriteUp" scheme="http://www.w4ter5heep.com/categories/WriteUp/"/>
    
    
      <category term="CTF" scheme="http://www.w4ter5heep.com/tags/CTF/"/>
    
      <category term="Mobile" scheme="http://www.w4ter5heep.com/tags/Mobile/"/>
    
  </entry>
  
  <entry>
    <title>HITB2018线上赛——Mobile</title>
    <link href="http://www.w4ter5heep.com/2018/04/15/HITB2018%E7%BA%BF%E4%B8%8A%E8%B5%9B%E2%80%94%E2%80%94Mobile/"/>
    <id>http://www.w4ter5heep.com/2018/04/15/HITB2018线上赛——Mobile/</id>
    <published>2018-04-15T15:16:39.000Z</published>
    <updated>2018-07-04T02:09:14.959Z</updated>
    
    <content type="html"><![CDATA[<p>最近参加了HITB2018，主要做了两道Mobile，简单整理题目。</p><h2 id="multicheck"><a href="#multicheck" class="headerlink" title="multicheck"></a>multicheck</h2><p>题目提示:Check！Check！Check！<br>大概是有陷阱。</p><p>安装apk，没有多余的提示，输入flag，进行验证。<br>首先jeb分析下java部分：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/1523800589774.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>方法通过就可以了。<br>首先看到了上面：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/1523800625353.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>似乎加载了一个方法。<br>解压apk包，找到assets中的claz.dex，赶快用jeb打开：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/1523800798055.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>好像有flag，赶快手动排序得到了<strong>假的flag</strong>，提示大概是this is certainly not the flag，确实是坑。</p><p>只能继续分析so文件libcheck.so<br>JNI_OnLoad也没有有用信息，只能挨个看sub函数<br>找到sub_1380<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/1523801512694.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>注意这一段，好像进行了解密和文件的替换，byte_4004^v9并赋值到v8即是对claz.dex文件的替换。<br>将byte_4004部分数据dump出来进行解密。保存为.dex，会发现是可以被解析的。可能就是真正的check。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/1523801879224.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/1523801940574.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>这部分的调用还是稍微有些复杂的，分析了半天本来想爆破的，但是注意到了一个特殊值，即：v5 = -1640531527，查看16进制：0x9E3779B9<br>搜索发现是Tea加密的特征值。直接从网上找可用的Tea加解密程序。过程十分曲折，找到的一些版本的程序，但是加解密结果各不相同，有点崩溃。。。终于找到一个较为标准的Java版，得到了结果。编程水平太差，只能复制粘贴，惭愧。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/1523802539119.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>脚本如下：<br>生成.dex的脚本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line">a = [0x8D,0x8F,0x93,0xE6,0xDD,0xDD,0xDA,0xF0,0x74,0xF2,0x03,0x6D,0xC0,0xD3,0x07,0x29,</span><br><span class="line">0x9A,0x97,0xB7,0x3D,0xD6,0x0B,0xBC,0x53,0xF4,0x89,0x8E,0x08,0x21,0x52,0xE9,0x42,</span><br><span class="line">0x35,0x0D,0x0B,0x0C,0x7D,0x0E,0x0F,0x10,0x69,0x44,0x27,0x06,0x15,0x16,0x17,0x18,</span><br><span class="line">0x19,0x1A,0x1B,0x1C,0x81,0x18,0x1F,0x20,0x3D,0x22,0x23,0x24,0x55,0x26,0x27,0x28,</span><br><span class="line">0x22,0x2A,0x2B,0x2C,0xCD,0x2E,0x2F,0x30,0x3B,0x32,0x33,0x34,0x39,0x37,0x37,0x38,</span><br><span class="line">0x3B,0x3A,0x3B,0x3C,0xB9,0x3F,0x3F,0x40,0x4D,0x42,0x43,0x44,0xD1,0x47,0x47,0x48,</span><br><span class="line">0x48,0x4A,0x4B,0x4C,0xB9,0x4F,0x4F,0x50,0x79,0x57,0x53,0x54,0x41,0x54,0x57,0x58,</span><br><span class="line">0x75,0x5F,0x5B,0x5C,0x6B,0x5B,0x5F,0x60,0x5F,0x67,0x63,0x64,0x24,0x63,0x67,0x68,</span><br><span class="line">0x24,0x6F,0x6B,0x6C,0x3D,0x6B,0x6F,0x70,0x25,0x77,0x73,0x74,0x22,0x73,0x77,0x78,</span><br><span class="line">0x22,0x7F,0x7B,0x7C,0x1D,0x7B,0x7F,0x80,0xE6,0x87,0x83,0x84,0xF3,0x83,0x87,0x88,</span><br><span class="line">0x03,0x8F,0x8B,0x8C,0x13,0x8B,0x8F,0x90,0x23,0x97,0x93,0x94,0x53,0x93,0x97,0x98,</span><br><span class="line">0x50,0x9F,0x9B,0x9C,0x4C,0x9B,0x9F,0xA0,0x75,0xA7,0xA3,0xA4,0x7D,0xA3,0xA7,0xA8,</span><br><span class="line">0x74,0xAF,0xAB,0xAC,0x4C,0xAB,0xAF,0xB0,0x54,0xB7,0xB3,0xB4,0x5D,0xB3,0xB7,0xB8,</span><br><span class="line">0x4A,0xBF,0xBB,0xBC,0x4B,0xBB,0xBF,0xC0,0x3C,0xC7,0xC3,0xC4,0xC0,0xC0,0xC7,0xC8,</span><br><span class="line">0xCB,0xCA,0xCB,0xCC,0xC9,0xCE,0xCF,0xD0,0xDB,0xD2,0xD3,0xD4,0xDE,0xD6,0xD7,0xD8,</span><br><span class="line">0xD5,0xDA,0xDB,0xDC,0xD0,0xDE,0xDF,0xE0,0xEF,0xE2,0xE3,0xE4,0xEA,0xE6,0xE7,0xE8,</span><br><span class="line">0xF8,0xEA,0xEB,0xEC,0xF9,0xEE,0xEF,0xF0,0xE4,0xF2,0xF3,0xF4,0xF0,0xF6,0xF7,0xF8,</span><br><span class="line">0xF8,0xFA,0xFB,0xFC,0x1D,0xFA,0xFF,0x00,0x0E,0x02,0x03,0x04,0x02,0x06,0x07,0x08,</span><br><span class="line">0x09,0x0A,0x0B,0x0C,0x1D,0x0E,0x0F,0x10,0x16,0x12,0x13,0x14,0xFD,0x12,0x17,0x18,</span><br><span class="line">0x0B,0x1A,0x1B,0x1C,0x15,0x1E,0x1F,0x20,0xD9,0x26,0x23,0x24,0x36,0x26,0x27,0x28,</span><br><span class="line">0x21,0x2A,0x2B,0x2C,0x2D,0x2B,0x2F,0x30,0x37,0x32,0x33,0x34,0x3C,0x36,0x37,0x38,</span><br><span class="line">0x39,0x3A,0x3B,0x3C,0x3A,0x3E,0x3F,0x40,0x48,0x42,0x43,0x44,0x4D,0x43,0x47,0x48,</span><br><span class="line">0x40,0x4A,0x4B,0x4C,0x44,0x4E,0x4F,0x50,0x41,0x57,0x53,0x54,0x5D,0x56,0x57,0x58,</span><br><span class="line">0x50,0x5A,0x5B,0x5C,0x41,0x5B,0x5F,0x60,0x69,0x62,0x63,0x64,0x6F,0x66,0x67,0x68,</span><br><span class="line">0x4D,0x6F,0x6B,0x6C,0x6F,0x6E,0x65,0x70,0x67,0x72,0x73,0x74,0x77,0x76,0x7E,0x78,</span><br><span class="line">0x61,0x7A,0x7B,0x7C,0x7F,0x7E,0x7E,0x80,0x81,0x82,0x83,0x84,0x87,0x86,0x86,0x88,</span><br><span class="line">0x88,0x8A,0x8B,0x8C,0x8F,0x8E,0x8F,0x90,0x87,0x92,0x93,0x94,0x97,0x96,0x91,0x98,</span><br><span class="line">0x8F,0x9A,0x9B,0x9C,0x9F,0x9E,0x98,0xA0,0xB7,0xA2,0xA3,0xA4,0xA7,0xA6,0xAF,0xA8,</span><br><span class="line">0xBF,0xAA,0xAB,0xAC,0xAF,0xAE,0xA6,0xB0,0xA7,0xB2,0xB3,0xB4,0xB7,0xB6,0xB4,0xB8,</span><br><span class="line">0xA0,0xBA,0xBB,0xBC,0xBE,0xBE,0xBE,0xC0,0xC0,0xC2,0xC3,0xC4,0xC1,0xC6,0xC2,0xC8,</span><br><span class="line">0xD2,0xCA,0xCB,0xCC,0xC8,0xCE,0xCD,0xD0,0xC6,0xD2,0xD3,0xD4,0xD3,0xD6,0xD3,0xD8,</span><br><span class="line">0xC3,0xDA,0xDB,0xDC,0xDF,0xDE,0xDF,0xE0,0xE0,0xE2,0xE3,0xE4,0xE6,0xE6,0xE7,0xE8,</span><br><span class="line">0xE9,0xEA,0xEB,0xEC,0xEE,0xEE,0xEF,0xF0,0xF1,0xF2,0xF3,0xF4,0x85,0xF0,0xF7,0xF8,</span><br><span class="line">0xF9,0xFA,0xFB,0xFC,0xFC,0xFE,0xFF,0x00,0x01,0x02,0x03,0x04,0x0A,0x00,0x07,0x08,</span><br><span class="line">0x3B,0x0A,0x0B,0x0C,0x1F,0x4E,0x2C,0x10,0x1B,0x12,0x35,0x14,0x1A,0x16,0x17,0x18,</span><br><span class="line">0x70,0x1A,0x1B,0x1C,0x0E,0x1E,0x3F,0x20,0x02,0x22,0x2A,0x24,0x03,0x26,0x35,0x28,</span><br><span class="line">0x29,0x2A,0x42,0x2C,0x2C,0x2E,0x21,0x30,0x31,0x31,0x37,0x34,0x31,0x36,0x37,0x38,</span><br><span class="line">0x92,0x91,0x90,0x97,0xF0,0xF3,0xF2,0x8D,0xAE,0xAD,0xAC,0xAB,0x3D,0x10,0x73,0x5A,</span><br><span class="line">0x49,0x49,0x4A,0x4C,0x6D,0x4E,0x4F,0x50,0x32,0x2E,0x36,0xBD,0xDB,0x07,0x86,0x81,</span><br><span class="line">0xC3,0x15,0x4D,0x68,0x84,0xFC,0xE1,0xD8,0x04,0x8C,0x2A,0x81,0x50,0x9D,0x49,0x84,</span><br><span class="line">0x08,0x61,0xA3,0x48,0x80,0xA1,0xFF,0xC5,0x70,0x72,0x72,0x74,0x74,0x76,0x77,0x78,</span><br><span class="line">0x64,0x7C,0x7B,0x7C,0x79,0x7E,0x7F,0x80,0xF1,0x92,0x8B,0x84,0x85,0x86,0x89,0x88,</span><br><span class="line">0x88,0x8A,0x8A,0x8C,0x8D,0x8E,0x8F,0x90,0xB3,0x94,0x93,0x94,0x90,0x96,0x97,0x98,</span><br><span class="line">0xA2,0x9A,0x9F,0x9C,0x4D,0x9E,0x9F,0xA1,0xAE,0xA2,0xA3,0xA4,0xA2,0xA6,0xA6,0xA8,</span><br><span class="line">0xAC,0xAA,0xAB,0xAC,0x86,0xA8,0xAF,0xB0,0x98,0xB2,0xB3,0xB4,0xA7,0xB7,0x96,0xD8,</span><br><span class="line">0x65,0xBA,0xBB,0xB4,0x64,0xBE,0xBF,0xC8,0xE0,0xA0,0x73,0xC6,0xE6,0xE4,0xCE,0xC8,</span><br><span class="line">0x44,0xC9,0x84,0xCF,0xCF,0xCF,0xEE,0xB3,0xA0,0x81,0xD9,0xD4,0xC3,0xD4,0xF6,0xF8,</span><br><span class="line">0xFA,0xD9,0xD2,0xDC,0xDC,0xCE,0xFE,0xD4,0xD4,0xA2,0xF1,0xE4,0x87,0xE2,0xE7,0xE8,</span><br><span class="line">0xFA,0xEF,0xCB,0xEC,0x9C,0xAE,0xEB,0xF0,0xF3,0xA6,0xFF,0xF0,0xE6,0xF3,0xFF,0xF8,</span><br><span class="line">0x88,0xAF,0xF1,0xFC,0xE9,0xFD,0x27,0x00,0x01,0x0A,0x2B,0xEA,0x14,0x05,0x07,0x08,</span><br><span class="line">0x19,0x0A,0x0F,0x0C,0x0F,0x0E,0x0F,0x10,0x2B,0x14,0x13,0x14,0x56,0x16,0x17,0x18,</span><br><span class="line">0x68,0x3A,0x1D,0x1C,0xC1,0x1E,0x13,0x24,0x33,0x22,0x67,0x27,0x21,0x26,0x35,0x38,</span><br><span class="line">0x6D,0x28,0x2F,0x2C,0x3F,0x2F,0x3B,0x35,0x88,0x4B,0x04,0xAA,0x27,0x36,0x73,0x3E,</span><br><span class="line">0x37,0x3A,0x29,0x2C,0x79,0x39,0x31,0x40,0x53,0x62,0x07,0x4C,0x4B,0x46,0x55,0x78,</span><br><span class="line">0x0D,0x43,0x45,0x4C,0x5F,0x4E,0x7A,0xA0,0x4D,0x52,0xE3,0x05,0xB5,0x5C,0x55,0x5C,</span><br><span class="line">0xE9,0x30,0xCB,0x57,0x5F,0x5F,0xE8,0xDA,0x80,0x69,0x61,0x61,0xD5,0x1D,0xD0,0xD2,</span><br><span class="line">0xD9,0xC9,0x8B,0x66,0x6E,0x6A,0xDF,0xFA,0xE1,0x79,0x70,0x75,0xC2,0xCC,0x96,0x73,</span><br><span class="line">0x7A,0x7F,0xCB,0xE7,0xCA,0xC4,0xCF,0x22,0x59,0x82,0x83,0x85,0xAD,0x63,0x95,0x88,</span><br><span class="line">0xC2,0x89,0x8F,0x8C,0x9F,0x9E,0xC4,0x92,0x95,0x92,0x81,0x94,0xE4,0xB6,0x92,0x98,</span><br><span class="line">0x9D,0x9A,0x97,0x9C,0x8C,0x9E,0x9F,0xA0,0xA7,0xA2,0xA1,0xA4,0xA5,0xA6,0xA7,0xA8,</span><br><span class="line">0xE7,0xAC,0xAB,0xAC,0x9A,0xAE,0xAF,0xB0,0x90,0xF2,0x53,0xB4,0xB5,0xB4,0x94,0xB9,</span><br><span class="line">0xB0,0xBA,0xA9,0xBC,0x9C,0xAC,0x8A,0xE5,0xEE,0xC2,0x1B,0xC6,0xC0,0xC5,0x83,0xCB,</span><br><span class="line">0xCD,0xCA,0x1E,0xFF,0x32,0xCE,0x42,0xE3,0x9E,0xD1,0xD2,0xD6,0x0D,0xD4,0xD2,0xDA,</span><br><span class="line">0x9D,0xD9,0xDF,0xDC,0x3C,0xDD,0xDC,0xE8,0x34,0xD1,0x1C,0xE4,0x68,0xD5,0xA8,0xEB,</span><br><span class="line">0xE8,0xE8,0x33,0xEE,0xE8,0xEF,0xAB,0xF3,0xF5,0xF2,0x12,0xF7,0xF6,0xE6,0x22,0xCB,</span><br><span class="line">0x06,0xFA,0x76,0xCF,0xB2,0xFD,0xFE,0x02,0x45,0x00,0x07,0x04,0xE4,0x04,0x05,0x10,</span><br><span class="line">0xDC,0x28,0xF4,0x0C,0x80,0x2C,0x40,0x12,0x10,0x17,0xCB,0x14,0x15,0x17,0xCF,0x1D,</span><br><span class="line">0x1C,0x1E,0x33,0xCD,0x0C,0x1F,0x1F,0x20,0x27,0x22,0x21,0x24,0x24,0x26,0x27,0x28,</span><br><span class="line">0x75,0x2C,0x2B,0x2C,0x19,0x2E,0x2F,0x30,0x10,0x72,0xD2,0x34,0x35,0x34,0x14,0x39,</span><br><span class="line">0x33,0x3A,0x29,0x3C,0x1C,0x7C,0x0A,0x65,0x6D,0x42,0x9B,0x46,0x40,0x45,0x0F,0x4A,</span><br><span class="line">0x4D,0x48,0x3A,0x5C,0x4F,0x4E,0x4D,0x50,0x5B,0x50,0x8B,0x57,0x50,0x54,0x1F,0x5B,</span><br><span class="line">0x5D,0x59,0x2A,0x4C,0x5F,0x5E,0x5C,0x60,0x6B,0x61,0x83,0x67,0x66,0x6E,0xD1,0x5A,</span><br><span class="line">0xB1,0x69,0x6E,0x6D,0x25,0x6D,0x6B,0x73,0x00,0x62,0x71,0x74,0x76,0x76,0x7D,0x7B,</span><br><span class="line">0x99,0x79,0x78,0x6C,0xCB,0x4C,0x37,0x83,0x85,0x87,0x63,0x87,0x86,0x9E,0x31,0xBA,</span><br><span class="line">0xC2,0x88,0x8A,0x8C,0x55,0x8E,0x8F,0x91,0x49,0x97,0x96,0x90,0xBD,0x42,0x86,0x99,</span><br><span class="line">0x9A,0x9A,0x9A,0x9C,0x9F,0x9E,0x9F,0xA0,0xCB,0xA4,0xA3,0xA4,0xAA,0xA6,0xA7,0xA8,</span><br><span class="line">0xC7,0xBA,0xA2,0xAC,0xAF,0xAE,0xA3,0xB0,0xC0,0xA2,0xB0,0xB4,0xB5,0xB6,0xBB,0xB8,</span><br><span class="line">0xDB,0xBB,0xBA,0xBC,0xCC,0x9E,0xB4,0xC0,0xD1,0xC2,0xC9,0xC4,0xCA,0xC6,0xC7,0xC8,</span><br><span class="line">0xC8,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD4,0xD2,0xD3,0xD4,0xD6,0xD6,0xD6,0xD8,</span><br><span class="line">0xDA,0xDA,0xDA,0xDC,0xDC,0xDE,0xDF,0xE0,0xE0,0xE2,0xE3,0xE4,0xE1,0xE6,0xE7,0xE8,</span><br><span class="line">0xEB,0xEA,0xEB,0xEC,0xE4,0xEE,0xE6,0xF0,0xF0,0xF2,0xF3,0xF4,0xFC,0xF6,0xF7,0xF8,</span><br><span class="line">0xFD,0xFA,0xFB,0xFC,0xF4,0xFE,0xFE,0x00,0x0B,0x02,0x02,0x04,0x07,0x06,0x07,0x08,</span><br><span class="line">0x03,0x0A,0x0A,0x0C,0x0F,0x0E,0x0F,0x10,0x18,0x12,0x12,0x14,0x1D,0x2A,0x74,0x74,</span><br><span class="line">0x70,0x74,0x72,0x68,0x23,0x1E,0x19,0x1C,0x48,0x4C,0x4A,0x50,0x1B,0x26,0x26,0x6A,</span><br><span class="line">0x29,0x20,0x68,0x44,0x48,0x4D,0x44,0x1E,0x5B,0x53,0x45,0x55,0x35,0x37,0x7E,0x38,</span><br><span class="line">0x3B,0x73,0x79,0x3C,0x3C,0x72,0x3F,0x42,0x0D,0x0E,0x43,0x47,0x09,0x0A,0x0E,0x48,</span><br><span class="line">0x4C,0x06,0x07,0x05,0x01,0x07,0x4F,0x5D,0x1D,0x31,0x3C,0x39,0x7A,0x37,0x78,0x1B,</span><br><span class="line">0x31,0x3F,0x38,0x37,0x66,0x5E,0x4D,0x2C,0x0B,0x03,0x15,0x05,0x4A,0x0A,0x06,0x06,</span><br><span class="line">0x0E,0x45,0x24,0x0E,0x07,0x0B,0x0C,0x04,0x4A,0x72,0x61,0x38,0x1F,0x17,0x01,0x19,</span><br><span class="line">0x56,0x16,0x1A,0x12,0x1A,0x51,0x2C,0xF4,0xF3,0xEB,0xED,0xE3,0xBE,0x86,0x95,0xC4,</span><br><span class="line">0xE3,0xEB,0xFD,0xED,0xA2,0xE2,0xEE,0xFE,0xF6,0xBD,0xC0,0xED,0xE6,0xE2,0xF2,0xF5,</span><br><span class="line">0xA2,0x9A,0x89,0xD0,0xF7,0xFF,0xE9,0xC1,0x8E,0xD7,0xD7,0xCD,0xC9,0x89,0xE6,0xDA,</span><br><span class="line">0xDB,0xCB,0xD2,0xDF,0x96,0xAE,0xAE,0xE6,0xB1,0xB4,0xE5,0xF8,0xFC,0xFA,0xFE,0xF1,</span><br><span class="line">0xB9,0xBB,0xE1,0xBC,0xBF,0xE4,0xF3,0xC0,0xC2,0x98,0x8F,0x88,0xC5,0xC4,0x9C,0x8A,</span><br><span class="line">0xC9,0xC8,0x90,0x85,0xCD,0xCF,0xAE,0xD0,0xD8,0xB3,0xA1,0xA6,0xB4,0xAF,0xB4,0xB7,</span><br><span class="line">0xA9,0xA3,0xDB,0xDD,0xBF,0xDE,0xDA,0x83,0x89,0x87,0x80,0x8F,0xE5,0xE0,0x82,0x99,</span><br><span class="line">0x9C,0x8B,0x87,0x9F,0xED,0xE6,0x88,0x95,0x85,0xB0,0x8A,0x80,0x90,0x85,0xF7,0xC4,</span><br><span class="line">0xF9,0xFD,0xF5,0xFE,0xE8,0x78,0xFD,0x6B,0xA5,0x00,0x16,0xC6,0x05,0x03,0x07,0x0F,</span><br><span class="line">0x07,0x0A,0x38,0x0D,0x0D,0x09,0x01,0x1F,0x3C,0x3C,0x13,0x50,0x14,0x16,0x10,0x05,</span><br><span class="line">0x43,0x51,0x27,0x57,0x56,0x22,0x98,0x77,0x1E,0x22,0x2B,0x20,0x25,0x26,0x27,0x28,</span><br><span class="line">0x2E,0x24,0x60,0x54,0x11,0xEA,0x12,0x2E,0x85,0x9D,0x72,0x08,0x09,0x36,0x10,0x3A,</span><br><span class="line">0x39,0x3A,0x3C,0x32,0x67,0x75,0xA9,0xF4,0xF5,0xD3,0x1C,0x44,0x59,0x44,0x47,0x48,</span><br><span class="line">0x4E,0x44,0x11,0x07,0x4C,0x59,0x40,0x8E,0x0C,0x52,0x07,0x55,0x55,0x51,0x59,0x58,</span><br><span class="line">0x5B,0x5A,0x53,0x5C,0x5D,0x54,0x5E,0x6A,0x61,0xEA,0xE3,0x60,0xF1,0x62,0x66,0xE9,</span><br><span class="line">0xE9,0x6E,0xE3,0x69,0x6C,0x64,0xCF,0x75,0x70,0x7B,0xCF,0x71,0x74,0x7E,0xD7,0x7E,</span><br><span class="line">0x78,0x70,0xC3,0x7B,0x7C,0x74,0xC7,0x88,0x80,0x8B,0x33,0x8D,0x88,0x86,0x87,0x88,</span><br><span class="line">0x89,0x8A,0x8B,0x8C,0x8C,0x8E,0x8F,0x90,0x91,0x92,0x93,0x94,0x94,0x96,0x97,0x98,</span><br><span class="line">0x85,0x9A,0x9B,0x9C,0xED,0x9E,0x9F,0xA0,0xA3,0xA2,0xA3,0xA4,0xAE,0xA6,0xA7,0xA8,</span><br><span class="line">0x49,0xAA,0xAB,0xAC,0xAE,0xAE,0xAF,0xB0,0xBB,0xB2,0xB3,0xB4,0xB9,0xB7,0xB7,0xB8,</span><br><span class="line">0xBD,0xBA,0xBB,0xBC,0xBF,0xBE,0xBF,0xC0,0x45,0xC3,0xC3,0xC4,0xC0,0xC6,0xC7,0xC8,</span><br><span class="line">0xC5,0xCA,0xCB,0xCC,0x59,0xCF,0xCF,0xD0,0xD7,0xD2,0xD3,0xD4,0xD4,0xD6,0xD7,0xD8,</span><br><span class="line">0x2D,0xDB,0xDB,0xDC,0xDC,0xFE,0xDF,0xE0,0xE9,0xE2,0xE3,0xE4,0xF1,0xE4,0xE7,0xE8,</span><br><span class="line">0xE8,0xFA,0xEB,0xEC,0xE5,0xEE,0xEF,0xF0,0x11,0xF6,0xF3,0xF4,0xF7,0xD6,0xF7,0xF8,</span><br><span class="line">0xE5,0xFA,0xFB,0xFC,0xD1,0xFB,0xFF,0x00,0x02,0x22,0x03,0x04,0x0D,0x06,0x07,0x08,</span><br><span class="line">0x06,0x0C,0x0B,0x0C,0x0D,0x2E,0x0F,0x10,0x10,0x12,0x13,0x14,0x65,0x10,0x17,0x18,</span><br><span class="line">0x19,0x0A,0x1B,0x1C,0x1C,0x1E,0x1F,0x20,0xBD,0x24,0x23,0x24]</span><br><span class="line"></span><br><span class="line">v9 = 233</span><br><span class="line">out = &quot;&quot;</span><br><span class="line">for i in range(0x73c):</span><br><span class="line">    tmp = (a[i]^v9)&amp;0xFF</span><br><span class="line">    out += chr(tmp)</span><br><span class="line">    v9 += 1</span><br><span class="line"></span><br><span class="line">fp = open(&quot;claz2.dex&quot;, &quot;wb&quot;)</span><br><span class="line">fp.write(out)</span><br><span class="line">fp.close()</span><br></pre></td></tr></table></figure></p><p>Tea的加解密程序：<br>该java版本还是较为标准的实现，可以收藏。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">package hitb2018;</span><br><span class="line"></span><br><span class="line">public class Tea &#123;</span><br><span class="line">    private final static int[] KEY = new int[]&#123;//加密解密所用的KEY</span><br><span class="line">        0xABABABAB, 0xCDCDCDCD,</span><br><span class="line">        0xEFEFEFEF, 0x12345678</span><br><span class="line">    &#125;;</span><br><span class="line">    //加密</span><br><span class="line">    public static byte[] encrypt(byte[] content, int offset, int[] key, int times)&#123;//times为加密轮数</span><br><span class="line">        int[] tempInt = byteToInt(content, offset);</span><br><span class="line">        int y = tempInt[0], z = tempInt[1], sum = 0, i;</span><br><span class="line">        int delta=0x9e3779b9; //这是算法标准给的值</span><br><span class="line">        int a = key[0], b = key[1], c = key[2], d = key[3]; </span><br><span class="line"></span><br><span class="line">        for (i = 0; i &lt; times; i++) &#123;   </span><br><span class="line">            </span><br><span class="line">            sum += delta;</span><br><span class="line">            y += ((z&lt;&lt;4) + a) ^ (z + sum) ^ ((z&gt;&gt;5) + b);</span><br><span class="line">            z += ((y&lt;&lt;4) + c) ^ (y + sum) ^ ((y&gt;&gt;5) + d);</span><br><span class="line">        &#125;</span><br><span class="line">        tempInt[0]=y;</span><br><span class="line">        tempInt[1]=z; </span><br><span class="line">        return intToByte(tempInt, 0);</span><br><span class="line">    &#125;</span><br><span class="line">    //解密</span><br><span class="line">    public static byte[] decrypt(byte[] encryptContent, int offset, int[] key, int times)&#123;</span><br><span class="line">        int[] tempInt = byteToInt(encryptContent, offset);</span><br><span class="line">        int y = tempInt[0], z = tempInt[1], sum = 0, i;</span><br><span class="line">        int delta=0x9e3779b9; //这是算法标准给的值</span><br><span class="line">        int a = key[0], b = key[1], c = key[2], d = key[3];</span><br><span class="line">        if (times == 32)</span><br><span class="line">            sum = 0xC6EF3720; /* delta &lt;&lt; 5*/</span><br><span class="line">        else if (times == 16)</span><br><span class="line">            sum = 0xE3779B90; /* delta &lt;&lt; 4*/</span><br><span class="line">        else</span><br><span class="line">            sum = delta * times;</span><br><span class="line"></span><br><span class="line">        for(i = 0; i &lt; times; i++) &#123; </span><br><span class="line">            z -= ((y&lt;&lt;4) + c) ^ (y + sum) ^ ((y&gt;&gt;5) + d);</span><br><span class="line">            y -= ((z&lt;&lt;4) + a) ^ (z + sum) ^ ((z&gt;&gt;5) + b);</span><br><span class="line">            sum -= delta; </span><br><span class="line">        &#125;</span><br><span class="line">        tempInt[0] = y;</span><br><span class="line">        tempInt[1] = z;</span><br><span class="line"></span><br><span class="line">        return intToByte(tempInt, 0);</span><br><span class="line">    &#125;</span><br><span class="line">    //byte[]型数据转成int[]型数据</span><br><span class="line">    private static int[] byteToInt(byte[] content, int offset)&#123;</span><br><span class="line"></span><br><span class="line">        int[] result = new int[content.length &gt;&gt; 2];//除以2的n次方 == 右移n位 即 content.length / 4 == content.length &gt;&gt; 2</span><br><span class="line">        for(int i = 0, j = offset; j &lt; content.length; i++, j += 4)&#123;</span><br><span class="line">            result[i] = transform(content[j + 3]) | transform(content[j + 2]) &lt;&lt; 8 |</span><br><span class="line">            transform(content[j + 1]) &lt;&lt; 16 | (int)content[j] &lt;&lt; 24;</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    //int[]型数据转成byte[]型数据</span><br><span class="line">    private static byte[] intToByte(int[] content, int offset)&#123;</span><br><span class="line">        byte[] result = new byte[content.length &lt;&lt; 2];//乘以2的n次方 == 左移n位 即 content.length * 4 == content.length &lt;&lt; 2</span><br><span class="line">        for(int i = 0, j = offset; j &lt; result.length; i++, j += 4)&#123;</span><br><span class="line">            result[j + 3] = (byte)(content[i] &amp; 0xff);</span><br><span class="line">            result[j + 2] = (byte)((content[i] &gt;&gt; 8) &amp; 0xff);</span><br><span class="line">            result[j + 1] = (byte)((content[i] &gt;&gt; 16) &amp; 0xff);</span><br><span class="line">            result[j] = (byte)((content[i] &gt;&gt; 24) &amp; 0xff);</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">    //若某字节为负数则需将其转成无符号正数</span><br><span class="line">    private static int transform(byte temp)&#123;</span><br><span class="line">        int tempInt = (int)temp;</span><br><span class="line">        if(tempInt &lt; 0)&#123;</span><br><span class="line">            tempInt += 256;</span><br><span class="line">        &#125;</span><br><span class="line">        return tempInt;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        byte[] enContent = new byte[]&#123;99, 124, 101, -23, -114, 81, -47, -39, -102, 79, 22, 52, -39, -94, -66, -72, 101, -18, 73, -27, 53, -5, 46, -20, 97, 11, -56, 36, -19, -49, -112, -75&#125;;</span><br><span class="line">        for(int j=0;j&lt;4;j++)&#123;</span><br><span class="line">            byte[] deContent = decrypt(enContent,j*8,KEY,32);</span><br><span class="line">            for(int i = 0;i &lt; 8;i++)&#123;</span><br><span class="line">                System.out.print((char)deContent[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其实对整个程序的动态加载和替换过程还不是很了解。<br>题目有点小坑，但是还能接受。<br><strong>HITB{SEe!N9_IsN’T_bELIEV1Ng}</strong></p><h2 id="kivy-simple"><a href="#kivy-simple" class="headerlink" title="kivy simple"></a>kivy simple</h2><p>apk包有点大，但是安装以后也没有特别的功能。首先搜索kivy，kivy是使用python进行全平台应用开发的框架，该apk也是使用该python框架进行开发的，通过JEB对java代码以及IDA对so文件的分析，并没有发现程序的主逻辑。<br>进一步，通过学习kivy框架的开发以及程序打包流程，同时注意到了解压缩后在assets中的private.mp3文件，猜测为压缩包。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/1523803089035.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>修改文件名后缀，解压得到部分文件(这里注意，在不同平台下可能要解压两次，比如windows下)<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/1523803110977.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>找到了python 编写的主函数等文件<br>使用uncompyle6对main.pyo得到main.py：<br>其中有一段：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">def check(self):</span><br><span class="line">    if self.flag.text == &apos;HITB&#123;this_is_not_flag&#125;&apos;:</span><br><span class="line">        return True</span><br><span class="line">    return False</span><br><span class="line"></span><br><span class="line">def auth(self, instance):</span><br><span class="line">    if self.check():</span><br><span class="line">        s = &apos;Congratulations you got the flag&apos;</span><br><span class="line">    else:</span><br><span class="line">        s = &apos;Wrong answer&apos;</span><br><span class="line">    popup = Popup(title=&apos;result&apos;, content=Label(text=s), auto_dismiss=True)</span><br><span class="line">    popup.open()</span><br></pre></td></tr></table></figure></p><p>逻辑很简单，但HITB{this_is_not_flag}不是答案，还是骗人的。<br>注意到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b64 = &apos;eJzF1MtOE2EUB/DzTculUKAUKJSr3OqIV0TBGEOMRqIuatJhowsndTrVA+MlnYEYhZXEhQuXLlz4CC58BBc+ggsfwYWPYDznhHN8BJr5Tv7fby6Z8/VrIzj+eDRu0kirVFoARwCPAGI6HOx4EBI6CHy+LHLH1/O4zfd8onQAsEOHg0MHmQcHDt45vmc3B50FyHIQELU8qLZyYutmebIusftm3WQ9Yo/NeskKYh2zPrJ+sfdmRbIBsc9mg2RDYl/NSmTDYt/NymQjYj/NRsnGxH6bVcjGxf6aTZBVxcpObdL6rZlNkU2LXTebsT7qZrP2fk/M5shOie2bzdvzPpgtkC2KfTFbIlsW+2ZWIzst9sPMJzsj9stsheys2B+zc2TnxTxP7YL1UTG7aLZidolsVWzT7LL11jBbI7si1ja7SrYu9sZsw+yjWJaHgHZx4F+j/VnHOao4TCXjvbuBQxqXsV9jgDmNt7CiMURP4zZOaXyA3RrncVTjEpY0djCv8S2Oa3yF/OtC0PldLPN8hkuf4ioO8nxA5zWc1LiITuM97NG4hbMaD3FE4z4W+TEFLhOKD7GL59M6r+OYxjXsperz+YzfvZ00n0rI4tdZxkuTxC8yPr3VTNJYTm139mL5S5BZGidteVTqc4dSMil8V/Qsjnb52vSIzRVdGfKu5E5seHWfu2rw3sj460yjTkwt8oqFYZQ00zQM/3cipSErzQt14/nL1l4Sb0pHXAp3/gENPMQt&apos;</span><br><span class="line">eval(marshal.loads(zlib.decompress(binascii.a2b_base64(b64))))</span><br></pre></td></tr></table></figure></p><p>说明程序可能进行了动态的加载和替换。<br>将zlib.decompress(binascii.a2b_base64(b64))后的内容实际上是PythonCodeObject对象，通过查找资料，可以将该对象转化为.pyc文件，进而反编译。<br>转换代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import py_compile</span><br><span class="line">import imp</span><br><span class="line">import os</span><br><span class="line">import binascii</span><br><span class="line">import zlib</span><br><span class="line">import marshal</span><br><span class="line"></span><br><span class="line">def pycodeobject2pyc(pyobj, pycfile):</span><br><span class="line">    with open(pycfile, &apos;wb&apos;) as fc: </span><br><span class="line">        fc.write(&apos;\0\0\0\0&apos;)</span><br><span class="line">        timestamp = long(os.fstat(fc.fileno()).st_mtime)</span><br><span class="line">        py_compile.wr_long(fc, timestamp)</span><br><span class="line">        marshal.dump(pyobj, fc)</span><br><span class="line">        fc.flush()</span><br><span class="line">        fc.seek(0, 0)</span><br><span class="line">        MAGIC = imp.get_magic()</span><br><span class="line">        fc.write(MAGIC)</span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">        b64 = &apos;eJzF1MtOE2EUB/DzTculUKAUKJSr3OqIV0TBGEOMRqIuatJhowsndTrVA+MlnYEYhZXEhQuXLlz4CC58BBc+ggsfwYWPYDznhHN8BJr5Tv7fby6Z8/VrIzj+eDRu0kirVFoARwCPAGI6HOx4EBI6CHy+LHLH1/O4zfd8onQAsEOHg0MHmQcHDt45vmc3B50FyHIQELU8qLZyYutmebIusftm3WQ9Yo/NeskKYh2zPrJ+sfdmRbIBsc9mg2RDYl/NSmTDYt/NymQjYj/NRsnGxH6bVcjGxf6aTZBVxcpObdL6rZlNkU2LXTebsT7qZrP2fk/M5shOie2bzdvzPpgtkC2KfTFbIlsW+2ZWIzst9sPMJzsj9stsheys2B+zc2TnxTxP7YL1UTG7aLZidolsVWzT7LL11jBbI7si1ja7SrYu9sZsw+yjWJaHgHZx4F+j/VnHOao4TCXjvbuBQxqXsV9jgDmNt7CiMURP4zZOaXyA3RrncVTjEpY0djCv8S2Oa3yF/OtC0PldLPN8hkuf4ioO8nxA5zWc1LiITuM97NG4hbMaD3FE4z4W+TEFLhOKD7GL59M6r+OYxjXsperz+YzfvZ00n0rI4tdZxkuTxC8yPr3VTNJYTm139mL5S5BZGidteVTqc4dSMil8V/Qsjnb52vSIzRVdGfKu5E5seHWfu2rw3sj460yjTkwt8oqFYZQ00zQM/3cipSErzQt14/nL1l4Sb0pHXAp3/gENPMQt&apos;</span><br><span class="line">        data = marshal.loads(zlib.decompress(binascii.a2b_base64(b64)))</span><br><span class="line">        pycodeobject2pyc(data, &quot;apk2.pyc&quot;)</span><br></pre></td></tr></table></figure></p><p>该段代码参考了<a href="https://segmentfault.com/q/1010000003052356" target="_blank" rel="noopener">https://segmentfault.com/q/1010000003052356</a></p><p>PythonCodeObject转换为.pyc也费了一番功夫，基础不扎实，不知道该怎么处理。太菜了。<br>再次用uncompyle6进行反编译得到真正的check代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">def check(self):</span><br><span class="line">    s = self.flag.text</span><br><span class="line">    if len(s) != 31:</span><br><span class="line">        return False</span><br><span class="line">    if s[17] != &apos;7&apos;:</span><br><span class="line">        return False</span><br><span class="line">    if s[15] != &apos;%&apos;:</span><br><span class="line">        return False</span><br><span class="line">    if s[11] != &apos;S&apos;:</span><br><span class="line">        return False</span><br><span class="line">    if s[3] != &apos;B&apos;:</span><br><span class="line">        return False</span><br><span class="line">    if s[22] != &apos;_&apos;:</span><br><span class="line">        return False</span><br><span class="line">    if s[2] != &apos;T&apos;:</span><br><span class="line">        return False</span><br><span class="line">    if s[27] != &apos;O&apos;:</span><br><span class="line">        return False</span><br><span class="line">    if s[6] != &apos;!&apos;:</span><br><span class="line">        return False</span><br><span class="line">    if s[20] != &apos;$&apos;:</span><br><span class="line">        return False</span><br><span class="line">    if s[16] != &apos;r&apos;:</span><br><span class="line">        return False</span><br><span class="line">    if s[4] != &apos;&#123;&apos;:</span><br><span class="line">        return False</span><br><span class="line">    if s[23] != &apos;p&apos;:</span><br><span class="line">        return False</span><br><span class="line">    if s[25] != &apos;7&apos;:</span><br><span class="line">        return False</span><br><span class="line">    if s[0] != &apos;H&apos;:</span><br><span class="line">        return False</span><br><span class="line">    if s[18] != &apos;_&apos;:</span><br><span class="line">        return False</span><br><span class="line">    if s[29] != &apos;!&apos;:</span><br><span class="line">        return False</span><br><span class="line">    if s[10] != &apos;1&apos;:</span><br><span class="line">        return False</span><br><span class="line">    if s[14] != &apos;H&apos;:</span><br><span class="line">        return False</span><br><span class="line">    if s[13] != &apos;&amp;&apos;:</span><br><span class="line">        return False</span><br><span class="line">    if s[26] != &apos;#&apos;:</span><br><span class="line">        return False</span><br><span class="line">    if s[1] != &apos;I&apos;:</span><br><span class="line">        return False</span><br><span class="line">    if s[7] != &apos;F&apos;:</span><br><span class="line">        return False</span><br><span class="line">    if s[30] != &apos;&#125;&apos;:</span><br><span class="line">        return False</span><br><span class="line">    if s[19] != &apos;v&apos;:</span><br><span class="line">        return False</span><br><span class="line">    if s[12] != &apos;_&apos;:</span><br><span class="line">        return False</span><br><span class="line">    if s[9] != &apos;_&apos;:</span><br><span class="line">        return False</span><br><span class="line">    if s[24] != &apos;Y&apos;:</span><br><span class="line">        return False</span><br><span class="line">    if s[5] != &apos;1&apos;:</span><br><span class="line">        return False</span><br><span class="line">    if s[28] != &apos;N&apos;:</span><br><span class="line">        return False</span><br><span class="line">    if s[21] != &apos;3&apos;:</span><br><span class="line">        return False</span><br><span class="line">    if s[8] != &apos;3&apos;:</span><br><span class="line">        return False</span><br><span class="line">    return True</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">screen.__class__.check = check!</span><br></pre></td></tr></table></figure></p><p>此处才是真正进行逻辑判断的函数<br>手动排序得到flag：<br><strong>HITB{1!F3_1S_&amp;H%r7_v$3_pY7#ON!}</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近参加了HITB2018，主要做了两道Mobile，简单整理题目。&lt;/p&gt;
&lt;h2 id=&quot;multicheck&quot;&gt;&lt;a href=&quot;#multicheck&quot; class=&quot;headerlink&quot; title=&quot;multicheck&quot;&gt;&lt;/a&gt;multicheck&lt;/h2
      
    
    </summary>
    
      <category term="WriteUp" scheme="http://www.w4ter5heep.com/categories/WriteUp/"/>
    
    
      <category term="CTF" scheme="http://www.w4ter5heep.com/tags/CTF/"/>
    
      <category term="Mobile" scheme="http://www.w4ter5heep.com/tags/Mobile/"/>
    
  </entry>
  
  <entry>
    <title>hellow_my_site</title>
    <link href="http://www.w4ter5heep.com/2018/04/05/hellow-my-site/"/>
    <id>http://www.w4ter5heep.com/2018/04/05/hellow-my-site/</id>
    <published>2018-04-05T09:19:55.000Z</published>
    <updated>2018-04-15T15:24:44.871Z</updated>
    
    <content type="html"><![CDATA[<p>can you see my secret</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;can you see my secret&lt;/p&gt;

      
    
    </summary>
    
      <category term="Welcome!" scheme="http://www.w4ter5heep.com/categories/Welcome/"/>
    
    
      <category term="MySite" scheme="http://www.w4ter5heep.com/tags/MySite/"/>
    
  </entry>
  
</feed>
