<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>W4ter5heep&#39;s site</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.w4ter5heep.com/"/>
  <updated>2018-06-04T13:01:02.848Z</updated>
  <id>http://www.w4ter5heep.com/</id>
  
  <author>
    <name>W4ter5heep</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>demo</title>
    <link href="http://www.w4ter5heep.com/2018/06/04/demo/"/>
    <id>http://www.w4ter5heep.com/2018/06/04/demo/</id>
    <published>2018-06-04T13:01:02.000Z</published>
    <updated>2018-06-04T13:01:02.848Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SUCTF复盘——三个RE</title>
    <link href="http://www.w4ter5heep.com/2018/06/04/SUCTF%E5%A4%8D%E7%9B%98%E2%80%94%E2%80%94%E4%B8%89%E4%B8%AARE/"/>
    <id>http://www.w4ter5heep.com/2018/06/04/SUCTF复盘——三个RE/</id>
    <published>2018-06-04T12:34:06.000Z</published>
    <updated>2018-06-04T13:02:00.303Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RoughLike与期末大作业"><a href="#RoughLike与期末大作业" class="headerlink" title="RoughLike与期末大作业"></a>RoughLike与期末大作业</h2><p>.Net逆向<br>首先承认，比赛的时候因为手比较快下载的是有img文件夹的压缩包，但是很迷，上午提交截图的flag提示错误，下午就对了。。。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527601594188.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527601674717.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure></p><p>更新后题目的目录结构如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527642510738.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><p>可以发现dll文件非常大，反倒是主程序比较小<br>在test_Data中找到比较多的文件<br>但好像运行报错？<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527866689432.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br>还要改文件夹名字。。。</p><p>hint提示要看过场动画<br>首先可以看到开始的过场动画：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527866932928.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br>说明flag有两段？有点牵强。。。</p><p>尝试玩了几关，没什么发现，并且动作缓慢</p><p>得到第二段flag的一种方法：<br>查看Data文件夹中的level1文件，使用010editor直接搜索字符串，找到：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527869996737.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br>得到第二段flag：<code>_70_5uc7F</code><br>有点不讲道理</p><p>得到第一段flag方法：<br>首先要知道Managed文件夹中Dotfuscated是因为对.NET进行了混淆：<br>使用De4dot对Dotfuscated的Assembly-CSharp.dll进行去混淆，该工具在吾爱破解工具包中就有。<br>然后使用.NET Reflator进行反编译，搜索关键词找到关键函数：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527871120681.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br>有两个decrypt函数：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527871198779.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure></p><p>内容：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527871225771.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527871268243.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br>满足这两个条件即会在地图上随机位置生成一个flag，但是条件比较苛刻：<br>12&lt;&lt;8|12&gt;&gt;0x18<br>目测是一个很大的数<br>第二个也同样</p><p>可以通过修改初始参数值使条件满足，但是这里想办法分析函数：<br>这里要查找S3cretArray数组初始化的位置是LoadBundle：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527872148100.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br>继续追踪到解密函数：<br>DecryptAssetBundle(<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527872277037.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br>前几天刚做了一个题，目测是索引表变了以后的base64</p><p>要解密的文件是：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527872767267.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br>解密脚本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import string</span><br><span class="line">import base64</span><br><span class="line"> </span><br><span class="line">custom  = &quot;QRSTUVWXYZABCDEFGHIJKLMNOPabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span><br><span class="line">standard= &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span><br><span class="line"> </span><br><span class="line">plainText=&quot;GetProcAddr&quot;</span><br><span class="line"> </span><br><span class="line">def decryptbundle(pathname,dst):</span><br><span class="line">decode=&quot;&quot;</span><br><span class="line">with open(&quot;/Users/ilan/Desktop/SUCTF/re/Output/test_Data/StreamingAssets/bundles/%s&quot;%(pathname),&quot;rb&quot;) as f:</span><br><span class="line">encode=f.read()</span><br><span class="line">for ch in encode:</span><br><span class="line">if(ch in custom):</span><br><span class="line">decode=decode+standard[string.find(custom,str(ch))]</span><br><span class="line">elif(ch == &apos;=&apos;):</span><br><span class="line">decode= decode+&apos;=&apos;</span><br><span class="line">decode=base64.b64decode(decode)</span><br><span class="line">with open(dst,&quot;wb&quot;) as f:</span><br><span class="line">f.write(decode)</span><br><span class="line"> </span><br><span class="line">decryptbundle(&quot;WeaponYourself.assetbundle&quot;,&quot;ext1&quot;)</span><br></pre></td></tr></table></figure></p><p>此时对解密后的文件进行解析即可：<br>利用工具解析文件，中间需要经过一步解压缩，搜索二进制文件的“flag”可以得到：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527874571861.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br>第一部分flag的base64<br>也可以使用python的第三方库解压读取文件内容：<br><a href="https://github.com/HearthSim/UnityPack" target="_blank" rel="noopener">https://github.com/HearthSim/UnityPack</a></p><p>在此基础上，可以通过分析代码的方式找到前半段Flag：<br>在场景初始化函数中找到：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527874804833.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure></p><p>满足判断条件会设置为True<br>条件为满足关卡数目和99整除且defeatedBoss数量大于0x72000000且defeatedMonster大于514时，会设置一个文本SPText标志位为true。</p><p>不可能完成的任务</p><p>因此可以直接设置SPText标志为True：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527875069592.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br>然后重新进入游戏就会直接显示flag了</p><p>官方的wp比较简单，通过修改程序执行逻辑使flag可以在程序运行时就显示flag以及相关道具</p><h2 id="simpleformat"><a href="#simpleformat" class="headerlink" title="simpleformat"></a>simpleformat</h2><p>就是一个printf输出格式化的问题<br>程序逻辑比较简单：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527900424443.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br>需要输入36个字符，主要变换在sub_4006F6函数，然后将数据写入了/dev/null<br>该函数比较恶心，有一大堆的dprintf<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527900566263.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure></p><p>分析这一大堆奇怪的字符串，可以发现一些规律：<br>格式基本类似于<code>%1$*2$s</code>，每个函数中字符串的结尾都是<code>%20$n</code><br>首先要知道参数的用法：<br><code>%n</code>指的是向任意地址写入任意值，作用是将之前输出的字符个数写入对应的参数指向的地址<br>printf的<code>$</code>的用法则是指定这个格式串解析的参数偏移量。<code>%2$s</code>即为取出后面的第2个参数，以%s的形式输出。<br>因此<code>%20$n</code>就是将之前输出的字符个数写到第20个参数的地址里。即<strong>unk_627200</strong>用于计数，因此每个dprintf最后第20个参数都是一个int数组中的元素，并且是用于memcmp的比较<br>接下来就是每次写入的字符数量是如何获得的，分析<code>%1$*2$s</code>格式的含义<br><code>*</code>有指定宽度的效果，宽度取自后面的参数，<code>%1$*2$s</code>就是将第一个参数以第二个参数的宽度输出<br>当输出<code>%1$*2$s</code>的串之后，当前输出长度即为第二个参数。继续遇到<code>%1$*2$s</code>则再次输出第二个参数长度，当前输出长度就变成了两倍第二个参数，最后会将输出总长度写入<strong>unk_627200</strong>因此起到了一个求和的效果：<br>n1<em>l1 + n2</em>l3 + …… + n19*l19 = m1<br>······<br>总共18个方程，18元一次方程组<br>大佬的脚本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">from zio import *</span><br><span class="line">from z3 import *</span><br><span class="line">formats = [] #数据太多太长给删掉了。。。可以自己补</span><br><span class="line">results = [5462280L, 4346506L, 5891159L, 6839864L, 7912833L, 7049790L, 7455784L, 7311612L, 6299256L, 7114100L, 7037043L, 6873051L, 5644794L, 8014197L, 6432215L, 6638450L, 6959905L, 6705884L]</span><br><span class="line">print len(formats)</span><br><span class="line">print len(results)</span><br><span class="line">s = Solver()</span><br><span class="line">d = [BitVec(&quot;d&#123;0&#125;&quot;.format(i), 16) for i in range(18)]</span><br><span class="line">for j in range(len(formats)):</span><br><span class="line">    fmt = formats[j]</span><br><span class="line">    left = 0</span><br><span class="line">    left_str = &apos;&apos;</span><br><span class="line">    for i in range(2, 20):</span><br><span class="line">        c = &apos;%1$*&apos;+str(i)+&apos;$s&apos;</span><br><span class="line"></span><br><span class="line">        left += fmt.count(c)*d[i-2]</span><br><span class="line">        #left_str += str(fmt.count(c))+&apos;*d[&apos;+str(i-2)+&apos;] + &apos;</span><br><span class="line"></span><br><span class="line">    #print left_str</span><br><span class="line">    s.add(left == results[j])</span><br><span class="line"></span><br><span class="line">print s.check()</span><br><span class="line">print s.model()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">model = s.model()</span><br><span class="line">init_state = &#123;&#125;</span><br><span class="line">for k in model:</span><br><span class="line">    idx = int(str(k)[1:])</span><br><span class="line">    val = model[k].as_long()</span><br><span class="line">    #print idx, val</span><br><span class="line">    init_state[idx] = val</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = &apos;&apos;</span><br><span class="line">for i in range(18):</span><br><span class="line">    flag += l16(init_state[i])</span><br><span class="line"></span><br><span class="line">print flag</span><br></pre></td></tr></table></figure></p><p>注意细节，flag每两位作为了一个数<br>伏地膜</p><h2 id="enigma"><a href="#enigma" class="headerlink" title="enigma"></a>enigma</h2><p>即二战时德国所使用的转轮密码机<br>简单查看了密码机的原理，实际上enigma采用复式字母替换加密方法，利用键盘、转子、跳线、反射板、显示器进行对称加密/解密。<br>Enigma属于算法和密钥分离的加密方法，破解Enigma的难度在于不知道当前密钥，包括转子的初始位置和跳线设置。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527908197009.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527908206823.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure></p><p>查找关键函数，根据官方wp，程序实现了转轮机，线性反馈移位寄存器，换位器等<br>输入：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527909005594.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br>长度要求是36<br>最后经过比较要相等：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527909263500.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br>中间三个处理函数：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527909344106.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure></p><p>sub_124F<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527909422356.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527909512441.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br>单个取输入字符进行处理，然后写入最后用于比较的outstr</p><p>sub_F1E<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527909689435.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527909700557.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure></p><p>sub_11F0<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527909809808.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure></p><p>因此对于输入的处理都是线性的，有爆破的可能<br>断点下在：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527910679359.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br>然后对存储结果处的数据进行比较：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527910745369.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527910774816.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure></p><p>这是比较取巧的方法，需要自动调用gdb</p><p>出题人的本意是对程序进行生逆，把密文逆成明文。。。<br>也有队伍是这么做的，服：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">with open(&apos;Enigma&apos;, &apos;rb&apos;) as f:</span><br><span class="line">    input_enc = list(f.read()[0x30a0:][:36])</span><br><span class="line"></span><br><span class="line">def bit(a, b):</span><br><span class="line">    return (a &gt;&gt; b) &amp; 1</span><br><span class="line"></span><br><span class="line"># sub_11F0</span><br><span class="line">state = 0x5F3759DF</span><br><span class="line">for i in range(9):</span><br><span class="line">    v16 = bit(state, 0) ^ bit(state, 2) ^ bit(state, 3) ^ bit(state, 5) ^ bit(state, 7) ^ bit(state, 31)</span><br><span class="line">    state = (state &gt;&gt; 1) | (v16 &lt;&lt; 31)</span><br><span class="line">    for j in range(4):</span><br><span class="line">        input_enc[i*4 + j] ^= (state &gt;&gt; (j*8)) &amp; 0xff</span><br><span class="line"></span><br><span class="line"># sub_F1E</span><br><span class="line">def partialRev(c):</span><br><span class="line">    c = bin(c)[2:].rjust(8, &apos;0&apos;)</span><br><span class="line">    c = list(map(int, c))</span><br><span class="line">    r = list(reversed(c))</span><br><span class="line">    c = r[:3] + c[3:5] + r[5:]</span><br><span class="line">    return int(&apos;&apos;.join(map(str, c)), 2)</span><br><span class="line">input_enc = list(map(partialRev, input_enc))</span><br><span class="line"></span><br><span class="line"># sub_124F</span><br><span class="line">wire = [</span><br><span class="line">    [ 0x31, 0x62, 0x93, 0xC4 ],</span><br><span class="line">    [ 0x21, 0x42, 0x63, 0x84 ],</span><br><span class="line">    [ 0x3D, 0x7A, 0xB7, 0xF4 ],</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">def _mix(a1, a2, a3):</span><br><span class="line">    a5 = a3 ^ a2 ^ a1</span><br><span class="line">    a4 = a2 &amp; a1 | a3 &amp; (a2 | a1)</span><br><span class="line">    return (a4, a5)</span><br><span class="line"></span><br><span class="line">def mix(a2, v16, a4):</span><br><span class="line">    bits = []</span><br><span class="line">    for i in range(8):</span><br><span class="line">        v4 = bit(a2, i)</span><br><span class="line">        v5 = bit(v16, i)</span><br><span class="line">        a4, a5 = _mix(v5, v4, a4)</span><br><span class="line">        bits.insert(0, a5)</span><br><span class="line">    return int(&apos;&apos;.join(map(str, bits)), 2), a4</span><br><span class="line"></span><br><span class="line">flag = []</span><br><span class="line">for i, t in enumerate(input_enc):</span><br><span class="line">    for c in range(32, 128):</span><br><span class="line">        a4 = 0</span><br><span class="line">        v16 = c</span><br><span class="line"></span><br><span class="line">        a2 = wire[0][i%4]</span><br><span class="line">        v16, a4 = mix(a2, v16, a4)</span><br><span class="line"></span><br><span class="line">        a2 = wire[1][(i//4%4)]</span><br><span class="line">        v16, a4 = mix(a2, v16, a4)</span><br><span class="line"></span><br><span class="line">        a2 = wire[2][i//16]</span><br><span class="line">        v16, a4 = mix(a2, v16, a4)</span><br><span class="line">        if v16 == t:</span><br><span class="line">            flag.append(c)</span><br><span class="line">            break</span><br><span class="line">print(bytes(flag).decode(&apos;ascii&apos;))</span><br></pre></td></tr></table></figure></p><p>首先获取最后结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">with open(&apos;Enigma&apos;, &apos;rb&apos;) as f:</span><br><span class="line">    input_enc = list(f.read()[0x30a0:][:36])</span><br><span class="line"></span><br><span class="line">print(input_enc)</span><br></pre></td></tr></table></figure></p><p>然后得到<strong>sub_11F0</strong>异或之前的结果<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527911287081.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br>该值是不是可以动态调试得到，内部有好多子函数，没有仔细分析<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">state = 0x5F3759DF</span><br><span class="line">for i in range(9):</span><br><span class="line">    v16 = bit(state, 0) ^ bit(state, 2) ^ bit(state, 3) ^ bit(state, 5) ^ bit(state, 7) ^ bit(state, 31)</span><br><span class="line">    state = (state &gt;&gt; 1) | (v16 &lt;&lt; 31)</span><br><span class="line">    for j in range(4):</span><br><span class="line">        input_enc[i*4 + j] ^= (state &gt;&gt; (j*8)) &amp; 0xff</span><br></pre></td></tr></table></figure></p><p>然后是<strong>sub_F1E</strong>的逆向：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527911593518.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def partialRev(c):</span><br><span class="line">    c = bin(c)[2:].rjust(8, &apos;0&apos;)</span><br><span class="line">    c = list(map(int, c))</span><br><span class="line">    r = list(reversed(c))</span><br><span class="line">    c = r[:3] + c[3:5] + r[5:]</span><br><span class="line">    return int(&apos;&apos;.join(map(str, c)), 2)</span><br><span class="line">input_enc = list(map(partialRev, input_enc))</span><br></pre></td></tr></table></figure></p><p>也是看起来比较头疼的函数</p><p>最后是<strong>sub_124F</strong>，因为比较复杂，采用了正向python模拟实现然后爆破的方式：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1527911726618.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br>没有勇气看下去。。。。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">wire = [</span><br><span class="line">    [ 0x31, 0x62, 0x93, 0xC4 ],</span><br><span class="line">    [ 0x21, 0x42, 0x63, 0x84 ],</span><br><span class="line">    [ 0x3D, 0x7A, 0xB7, 0xF4 ],</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">def _mix(a1, a2, a3):</span><br><span class="line">    a5 = a3 ^ a2 ^ a1</span><br><span class="line">    a4 = a2 &amp; a1 | a3 &amp; (a2 | a1)</span><br><span class="line">    return (a4, a5)</span><br><span class="line"></span><br><span class="line">def mix(a2, v16, a4):</span><br><span class="line">    bits = []</span><br><span class="line">    for i in range(8):</span><br><span class="line">        v4 = bit(a2, i)</span><br><span class="line">        v5 = bit(v16, i)</span><br><span class="line">        a4, a5 = _mix(v5, v4, a4)</span><br><span class="line">        bits.insert(0, a5)</span><br><span class="line">    return int(&apos;&apos;.join(map(str, bits)), 2), a4</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;RoughLike与期末大作业&quot;&gt;&lt;a href=&quot;#RoughLike与期末大作业&quot; class=&quot;headerlink&quot; title=&quot;RoughLike与期末大作业&quot;&gt;&lt;/a&gt;RoughLike与期末大作业&lt;/h2&gt;&lt;p&gt;.Net逆向&lt;br&gt;首先承认，比赛的
      
    
    </summary>
    
      <category term="Welcome!" scheme="http://www.w4ter5heep.com/categories/Welcome/"/>
    
    
      <category term="MySite" scheme="http://www.w4ter5heep.com/tags/MySite/"/>
    
  </entry>
  
  <entry>
    <title>StarCTF-BabyDroid</title>
    <link href="http://www.w4ter5heep.com/2018/05/02/StarCTF-BabyDroid/"/>
    <id>http://www.w4ter5heep.com/2018/05/02/StarCTF-BabyDroid/</id>
    <published>2018-05-01T16:04:08.000Z</published>
    <updated>2018-05-01T16:30:24.660Z</updated>
    
    <content type="html"><![CDATA[<p>逆向题目中唯一一道android逆向，做出来的过程也比较费力，这里简单记录。</p><p>安装程序发现会闪退，可能有反调试措施，首先进行静态分析。<br>JEB查看Java代码部分：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1525189773745.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br>关键方法是check0，同时注意到上面有许多check函数的native声明：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1525189793178.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br>从so文件中查找相关方法。首先在liba.so中找到了check0函数：<br>发现进一步调用的是check函数，但是在liba中没有相关信息，查找libb，没有直接找到check函数，考虑JNIOnLoad进行了注册，但是也没有找到JNIOnLoad函数，查找发现了sub_ED8函数：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1525189811484.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br>对一部分数据进行了解密，同时发现了：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1525189835087.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1525189839990.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br>所以JNIOnLoad函数会在运行时才解密：<br>解密的关键是这个值：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1525189852059.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br>进入sub_9B4发现计算的应该是一个校验和，<br>分析程序逻辑，写出计算校验和的脚本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">def crc32(ss):</span><br><span class="line">    v2 = i32(-1)</span><br><span class="line">    v7 = i32()</span><br><span class="line">    for s in ss:</span><br><span class="line">        if isinstance(s, bytes):</span><br><span class="line">            s = s[0]</span><br><span class="line">        for i in range(8):</span><br><span class="line">            v7.value = v2.value ^ (s &gt;&gt; i &lt;&lt; 31)</span><br><span class="line">            v2.value *= 2</span><br><span class="line">            if v7.value &lt;= -1:</span><br><span class="line">                # if not 0x4C11DB7 &amp; 1:</span><br><span class="line">                #     v2.value ^= 1</span><br><span class="line">                v2.value ^= 0x4C11DB7</span><br><span class="line">    return u32(-v2.value).value - 1</span><br></pre></td></tr></table></figure></p><p>得到libb的校验和：0x6674632a<br>解密libb.so可以得到JNIOnLoad：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1525189971044.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br>这里也进行了注册，将相关字符串进行解密可以发现就是对check函数的注册，解密脚本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">def xorstr():</span><br><span class="line">    def get_result(nums, key):</span><br><span class="line">        nums = [[((i &gt;&gt; (j * 8)) &amp; 0xff) for j in range(4)] for i in nums]</span><br><span class="line">        # nums = sum(nums, [])</span><br><span class="line">        nums = list(itertools.chain.from_iterable(nums))</span><br><span class="line">        nums = [i ^ key for i in itertools.takewhile(lambda i: i != 0, nums)]</span><br><span class="line"></span><br><span class="line">        b = bytes(nums)</span><br><span class="line">        return b</span><br><span class="line"></span><br><span class="line">    nums = [0xBCFEFCF0,</span><br><span class="line">            0xEAE9A1E2,</span><br><span class="line">            0xF1F2F1BC,</span><br><span class="line">            0xF7FDF2EA,</span><br><span class="line">            0xF7FAFCE1,</span><br><span class="line">            0xFAF2DEBC,</span><br><span class="line">            0xE7F0D2FD,</span><br><span class="line">            0xE7FAE5FA,</span><br><span class="line">            0xea]</span><br><span class="line"></span><br><span class="line">    print(get_result(nums, 0x93))</span><br><span class="line"></span><br><span class="line">    nums = [0x777C5A3E,</span><br><span class="line">            0x7A397760,</span><br><span class="line">            0x39717877,</span><br><span class="line">            0x7F646245,</span><br><span class="line">            0x3F2D7178,</span><br><span class="line">            0x4C]</span><br><span class="line">    print(get_result(nums, 0x16))</span><br><span class="line"></span><br><span class="line">    nums = [0x73757873, 0x7B]</span><br><span class="line">    print((get_result(nums, 0x10)))</span><br></pre></td></tr></table></figure></p><p>解密结果为：<br>com/q2zy/babyandroid/MainActivity<br> (Ljava/lang/String;)Z<br> check</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1525190067624.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><p>即是注册的函数，但是发现依然是乱码，注意到下面还有一段解密：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1525190079202.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure></p><p>这里用到了liba.so的校验和，计算发现也是0x6674632a<br>解密得到check 函数：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1525190090121.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br>再次用到了liba.so的校验和，分析逻辑写出解密脚本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">def get_flag():</span><br><span class="line">    crc = crc32(open(&apos;/Users/alset/Downloads/apk/lib/armeabi-v7a/liba.so&apos;, &apos;rb&apos;).read())</span><br><span class="line">    crc2 = crc * crc</span><br><span class="line">    checksums = [((crc2 &gt;&gt; (j * 8)) &amp; 0xff) for j in range(8)]</span><br><span class="line">    b = bytearray([</span><br><span class="line">        0xD5,</span><br><span class="line">        8,</span><br><span class="line">        0x4B,</span><br><span class="line">        0x11,</span><br><span class="line">        0xBF,</span><br><span class="line">        0xC,</span><br><span class="line">        0xB,</span><br><span class="line">        0x1F,</span><br><span class="line">        0xDC,</span><br><span class="line">        0x57,</span><br><span class="line">        0x64,</span><br><span class="line">        0x74,</span><br><span class="line">        0xB4,</span><br><span class="line">        0x6D,</span><br><span class="line">        0x5B,</span><br><span class="line">        0xD4,</span><br><span class="line">        0xEB,</span><br><span class="line">        0x1D,</span><br><span class="line">        0x51,</span><br><span class="line">        0xAE,</span><br><span class="line">        0xD5,</span><br><span class="line">        0x44,</span><br><span class="line">        8,</span><br><span class="line">        # 0</span><br><span class="line">    ])</span><br><span class="line">    for i in range(8):</span><br><span class="line">        for j in range(8):</span><br><span class="line">            b[i + j] ^= checksums[j]</span><br><span class="line">    i = 15</span><br><span class="line">    for j in range(8):</span><br><span class="line">        b[i + j] ^= checksums[j]</span><br><span class="line"></span><br><span class="line">    print(b)</span><br></pre></td></tr></table></figure></p><p>得到flag：1nTr3stIng-AnDr0id-A&amp;D!<br>完整解密脚本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">import mmap</span><br><span class="line">import itertools</span><br><span class="line">from ctypes import c_int32 as i32, c_uint32 as u32</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def memory_map(filename, access=mmap.ACCESS_COPY):</span><br><span class="line">    size = os.path.getsize(filename)</span><br><span class="line">    fd = os.open(filename, os.O_RDWR)</span><br><span class="line">    return mmap.mmap(fd, size, access=access)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def crc32(ss):</span><br><span class="line">    v2 = i32(-1)</span><br><span class="line">    v7 = i32()</span><br><span class="line">    for s in ss:</span><br><span class="line">        if isinstance(s, bytes):</span><br><span class="line">            s = s[0]</span><br><span class="line">        for i in range(8):</span><br><span class="line">            v7.value = v2.value ^ (s &gt;&gt; i &lt;&lt; 31)</span><br><span class="line">            v2.value *= 2</span><br><span class="line">            if v7.value &lt;= -1:</span><br><span class="line">                # if not 0x4C11DB7 &amp; 1:</span><br><span class="line">                #     v2.value ^= 1</span><br><span class="line">                v2.value ^= 0x4C11DB7</span><br><span class="line">    return u32(-v2.value).value - 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def recoverlibb():</span><br><span class="line">    m = memory_map(&apos;./apk/lib/armeabi-v7a/libb.so&apos;)</span><br><span class="line"></span><br><span class="line">    start = 0xab8</span><br><span class="line">    size = 0x420</span><br><span class="line">    # right_asm = [0xf0, 0xb5, 0x3, 0xaf]</span><br><span class="line">    # checksums = [m[start + i] ^ right_asm[i] for i in range(len(right_asm))]</span><br><span class="line">    checksum = crc32(m)</span><br><span class="line">    checksums = [((checksum &gt;&gt; (j * 8)) &amp; 0xff) for j in range(4)]</span><br><span class="line">    ichecksums = itertools.cycle(checksums)</span><br><span class="line">    for i in range(size):</span><br><span class="line">        m[start + i] = m[start + i] ^ next(ichecksums)</span><br><span class="line"></span><br><span class="line">    start += 0x27C</span><br><span class="line">    size -= 0x27C</span><br><span class="line">    for i in range(0, , 4):</span><br><span class="line">        m[start + i], m[start + i + 1], m[start + i + 2], m[start + i + 3] = m[start + i + 2], m[start + i + 3], m[</span><br><span class="line">            start + i], m[start + i + 1]</span><br><span class="line">    # right_asm = [0xFF, 0xF7, 0x3E, 0xEE]</span><br><span class="line">    # checksums = [m[start + size - 4 + i] ^ right_asm[i] for i in range(len(right_asm))]</span><br><span class="line">    checksum = crc32(open(&apos;./apk/lib/armeabi-v7a/liba.so&apos;, &apos;rb&apos;).read())</span><br><span class="line">    print(&apos;a: &apos;, checksum)</span><br><span class="line">    checksums = [((checksum &gt;&gt; (j * 8)) &amp; 0xff) for j in range(4)]</span><br><span class="line">    ichecksums = itertools.cycle(checksums)</span><br><span class="line">    for i in range(size):</span><br><span class="line">        m[start + i] = m[start + i] ^ next(ichecksums)</span><br><span class="line"></span><br><span class="line">    m.seek(0)</span><br><span class="line">    open(&apos;./apk/lib/armeabi-v7a/libbnew2.so&apos;, &apos;wb&apos;).write(m.read())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def xorstr():</span><br><span class="line">    def get_result(nums, key):</span><br><span class="line">        nums = [[((i &gt;&gt; (j * 8)) &amp; 0xff) for j in range(4)] for i in nums]</span><br><span class="line">        # nums = sum(nums, [])</span><br><span class="line">        nums = list(itertools.chain.from_iterable(nums))</span><br><span class="line">        nums = [i ^ key for i in itertools.takewhile(lambda i: i != 0, nums)]</span><br><span class="line"></span><br><span class="line">        b = bytes(nums)</span><br><span class="line">        return b</span><br><span class="line"></span><br><span class="line">    nums = [0xBCFEFCF0,</span><br><span class="line">            0xEAE9A1E2,</span><br><span class="line">            0xF1F2F1BC,</span><br><span class="line">            0xF7FDF2EA,</span><br><span class="line">            0xF7FAFCE1,</span><br><span class="line">            0xFAF2DEBC,</span><br><span class="line">            0xE7F0D2FD,</span><br><span class="line">            0xE7FAE5FA,</span><br><span class="line">            0xea]</span><br><span class="line"></span><br><span class="line">    print(get_result(nums, 0x93))</span><br><span class="line"></span><br><span class="line">    nums = [0x777C5A3E,</span><br><span class="line">            0x7A397760,</span><br><span class="line">            0x39717877,</span><br><span class="line">            0x7F646245,</span><br><span class="line">            0x3F2D7178,</span><br><span class="line">            0x4C]</span><br><span class="line">    print(get_result(nums, 0x16))</span><br><span class="line"></span><br><span class="line">    nums = [0x73757873, 0x7B]</span><br><span class="line">    print((get_result(nums, 0x10)))</span><br><span class="line"></span><br><span class="line">def get_flag():</span><br><span class="line">    crc = crc32(open(&apos;./apk/lib/armeabi-v7a/liba.so&apos;, &apos;rb&apos;).read())</span><br><span class="line">    crc2 = crc * crc</span><br><span class="line">    checksums = [((crc2 &gt;&gt; (j * 8)) &amp; 0xff) for j in range(8)]</span><br><span class="line">    b = bytearray([</span><br><span class="line">        0xD5,</span><br><span class="line">        8,</span><br><span class="line">        0x4B,</span><br><span class="line">        0x11,</span><br><span class="line">        0xBF,</span><br><span class="line">        0xC,</span><br><span class="line">        0xB,</span><br><span class="line">        0x1F,</span><br><span class="line">        0xDC,</span><br><span class="line">        0x57,</span><br><span class="line">        0x64,</span><br><span class="line">        0x74,</span><br><span class="line">        0xB4,</span><br><span class="line">        0x6D,</span><br><span class="line">        0x5B,</span><br><span class="line">        0xD4,</span><br><span class="line">        0xEB,</span><br><span class="line">        0x1D,</span><br><span class="line">        0x51,</span><br><span class="line">        0xAE,</span><br><span class="line">        0xD5,</span><br><span class="line">        0x44,</span><br><span class="line">        8,</span><br><span class="line">        # 0</span><br><span class="line">    ])</span><br><span class="line">    for i in range(8):</span><br><span class="line">        for j in range(8):</span><br><span class="line">            b[i + j] ^= checksums[j]</span><br><span class="line">    i = 15</span><br><span class="line">    for j in range(8):</span><br><span class="line">        b[i + j] ^= checksums[j]</span><br><span class="line"></span><br><span class="line">    print(b)</span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    # xorstr()</span><br><span class="line">    # recoverlibb()</span><br><span class="line">    get_flag()</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;逆向题目中唯一一道android逆向，做出来的过程也比较费力，这里简单记录。&lt;/p&gt;
&lt;p&gt;安装程序发现会闪退，可能有反调试措施，首先进行静态分析。&lt;br&gt;JEB查看Java代码部分：&lt;br&gt;&lt;figure class=&quot;image-bubble&quot;&gt;
           
      
    
    </summary>
    
      <category term="WriteUp" scheme="http://www.w4ter5heep.com/categories/WriteUp/"/>
    
    
      <category term="CTF" scheme="http://www.w4ter5heep.com/tags/CTF/"/>
    
      <category term="Mobile" scheme="http://www.w4ter5heep.com/tags/Mobile/"/>
    
  </entry>
  
  <entry>
    <title>hellow_my_site</title>
    <link href="http://www.w4ter5heep.com/2018/04/05/hellow-my-site/"/>
    <id>http://www.w4ter5heep.com/2018/04/05/hellow-my-site/</id>
    <published>2018-04-05T09:19:55.000Z</published>
    <updated>2018-04-15T15:24:44.871Z</updated>
    
    <content type="html"><![CDATA[<p>can you see my secret</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;can you see my secret&lt;/p&gt;

      
    
    </summary>
    
      <category term="Welcome!" scheme="http://www.w4ter5heep.com/categories/Welcome/"/>
    
    
      <category term="MySite" scheme="http://www.w4ter5heep.com/tags/MySite/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.w4ter5heep.com/2018/04/05/hello-world/"/>
    <id>http://www.w4ter5heep.com/2018/04/05/hello-world/</id>
    <published>2018-04-05T02:35:01.800Z</published>
    <updated>2018-04-15T15:25:04.899Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="Welcome!" scheme="http://www.w4ter5heep.com/categories/Welcome/"/>
    
    
      <category term="MySite" scheme="http://www.w4ter5heep.com/tags/MySite/"/>
    
  </entry>
  
</feed>
