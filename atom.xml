<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>W4ter5heep&#39;s site</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.w4ter5heep.com/"/>
  <updated>2018-05-01T16:30:24.660Z</updated>
  <id>http://www.w4ter5heep.com/</id>
  
  <author>
    <name>W4ter5heep</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>StarCTF-BabyDroid</title>
    <link href="http://www.w4ter5heep.com/2018/05/02/StarCTF-BabyDroid/"/>
    <id>http://www.w4ter5heep.com/2018/05/02/StarCTF-BabyDroid/</id>
    <published>2018-05-01T16:04:08.000Z</published>
    <updated>2018-05-01T16:30:24.660Z</updated>
    
    <content type="html"><![CDATA[<p>逆向题目中唯一一道android逆向，做出来的过程也比较费力，这里简单记录。</p><p>安装程序发现会闪退，可能有反调试措施，首先进行静态分析。<br>JEB查看Java代码部分：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1525189773745.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br>关键方法是check0，同时注意到上面有许多check函数的native声明：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1525189793178.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br>从so文件中查找相关方法。首先在liba.so中找到了check0函数：<br>发现进一步调用的是check函数，但是在liba中没有相关信息，查找libb，没有直接找到check函数，考虑JNIOnLoad进行了注册，但是也没有找到JNIOnLoad函数，查找发现了sub_ED8函数：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1525189811484.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br>对一部分数据进行了解密，同时发现了：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1525189835087.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1525189839990.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br>所以JNIOnLoad函数会在运行时才解密：<br>解密的关键是这个值：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1525189852059.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br>进入sub_9B4发现计算的应该是一个校验和，<br>分析程序逻辑，写出计算校验和的脚本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">def crc32(ss):</span><br><span class="line">    v2 = i32(-1)</span><br><span class="line">    v7 = i32()</span><br><span class="line">    for s in ss:</span><br><span class="line">        if isinstance(s, bytes):</span><br><span class="line">            s = s[0]</span><br><span class="line">        for i in range(8):</span><br><span class="line">            v7.value = v2.value ^ (s &gt;&gt; i &lt;&lt; 31)</span><br><span class="line">            v2.value *= 2</span><br><span class="line">            if v7.value &lt;= -1:</span><br><span class="line">                # if not 0x4C11DB7 &amp; 1:</span><br><span class="line">                #     v2.value ^= 1</span><br><span class="line">                v2.value ^= 0x4C11DB7</span><br><span class="line">    return u32(-v2.value).value - 1</span><br></pre></td></tr></table></figure></p><p>得到libb的校验和：0x6674632a<br>解密libb.so可以得到JNIOnLoad：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1525189971044.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br>这里也进行了注册，将相关字符串进行解密可以发现就是对check函数的注册，解密脚本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">def xorstr():</span><br><span class="line">    def get_result(nums, key):</span><br><span class="line">        nums = [[((i &gt;&gt; (j * 8)) &amp; 0xff) for j in range(4)] for i in nums]</span><br><span class="line">        # nums = sum(nums, [])</span><br><span class="line">        nums = list(itertools.chain.from_iterable(nums))</span><br><span class="line">        nums = [i ^ key for i in itertools.takewhile(lambda i: i != 0, nums)]</span><br><span class="line"></span><br><span class="line">        b = bytes(nums)</span><br><span class="line">        return b</span><br><span class="line"></span><br><span class="line">    nums = [0xBCFEFCF0,</span><br><span class="line">            0xEAE9A1E2,</span><br><span class="line">            0xF1F2F1BC,</span><br><span class="line">            0xF7FDF2EA,</span><br><span class="line">            0xF7FAFCE1,</span><br><span class="line">            0xFAF2DEBC,</span><br><span class="line">            0xE7F0D2FD,</span><br><span class="line">            0xE7FAE5FA,</span><br><span class="line">            0xea]</span><br><span class="line"></span><br><span class="line">    print(get_result(nums, 0x93))</span><br><span class="line"></span><br><span class="line">    nums = [0x777C5A3E,</span><br><span class="line">            0x7A397760,</span><br><span class="line">            0x39717877,</span><br><span class="line">            0x7F646245,</span><br><span class="line">            0x3F2D7178,</span><br><span class="line">            0x4C]</span><br><span class="line">    print(get_result(nums, 0x16))</span><br><span class="line"></span><br><span class="line">    nums = [0x73757873, 0x7B]</span><br><span class="line">    print((get_result(nums, 0x10)))</span><br></pre></td></tr></table></figure></p><p>解密结果为：<br>com/q2zy/babyandroid/MainActivity<br> (Ljava/lang/String;)Z<br> check</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1525190067624.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><p>即是注册的函数，但是发现依然是乱码，注意到下面还有一段解密：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1525190079202.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure></p><p>这里用到了liba.so的校验和，计算发现也是0x6674632a<br>解密得到check 函数：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1525190090121.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br>再次用到了liba.so的校验和，分析逻辑写出解密脚本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">def get_flag():</span><br><span class="line">    crc = crc32(open(&apos;/Users/alset/Downloads/apk/lib/armeabi-v7a/liba.so&apos;, &apos;rb&apos;).read())</span><br><span class="line">    crc2 = crc * crc</span><br><span class="line">    checksums = [((crc2 &gt;&gt; (j * 8)) &amp; 0xff) for j in range(8)]</span><br><span class="line">    b = bytearray([</span><br><span class="line">        0xD5,</span><br><span class="line">        8,</span><br><span class="line">        0x4B,</span><br><span class="line">        0x11,</span><br><span class="line">        0xBF,</span><br><span class="line">        0xC,</span><br><span class="line">        0xB,</span><br><span class="line">        0x1F,</span><br><span class="line">        0xDC,</span><br><span class="line">        0x57,</span><br><span class="line">        0x64,</span><br><span class="line">        0x74,</span><br><span class="line">        0xB4,</span><br><span class="line">        0x6D,</span><br><span class="line">        0x5B,</span><br><span class="line">        0xD4,</span><br><span class="line">        0xEB,</span><br><span class="line">        0x1D,</span><br><span class="line">        0x51,</span><br><span class="line">        0xAE,</span><br><span class="line">        0xD5,</span><br><span class="line">        0x44,</span><br><span class="line">        8,</span><br><span class="line">        # 0</span><br><span class="line">    ])</span><br><span class="line">    for i in range(8):</span><br><span class="line">        for j in range(8):</span><br><span class="line">            b[i + j] ^= checksums[j]</span><br><span class="line">    i = 15</span><br><span class="line">    for j in range(8):</span><br><span class="line">        b[i + j] ^= checksums[j]</span><br><span class="line"></span><br><span class="line">    print(b)</span><br></pre></td></tr></table></figure></p><p>得到flag：1nTr3stIng-AnDr0id-A&amp;D!<br>完整解密脚本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">import mmap</span><br><span class="line">import itertools</span><br><span class="line">from ctypes import c_int32 as i32, c_uint32 as u32</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def memory_map(filename, access=mmap.ACCESS_COPY):</span><br><span class="line">    size = os.path.getsize(filename)</span><br><span class="line">    fd = os.open(filename, os.O_RDWR)</span><br><span class="line">    return mmap.mmap(fd, size, access=access)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def crc32(ss):</span><br><span class="line">    v2 = i32(-1)</span><br><span class="line">    v7 = i32()</span><br><span class="line">    for s in ss:</span><br><span class="line">        if isinstance(s, bytes):</span><br><span class="line">            s = s[0]</span><br><span class="line">        for i in range(8):</span><br><span class="line">            v7.value = v2.value ^ (s &gt;&gt; i &lt;&lt; 31)</span><br><span class="line">            v2.value *= 2</span><br><span class="line">            if v7.value &lt;= -1:</span><br><span class="line">                # if not 0x4C11DB7 &amp; 1:</span><br><span class="line">                #     v2.value ^= 1</span><br><span class="line">                v2.value ^= 0x4C11DB7</span><br><span class="line">    return u32(-v2.value).value - 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def recoverlibb():</span><br><span class="line">    m = memory_map(&apos;./apk/lib/armeabi-v7a/libb.so&apos;)</span><br><span class="line"></span><br><span class="line">    start = 0xab8</span><br><span class="line">    size = 0x420</span><br><span class="line">    # right_asm = [0xf0, 0xb5, 0x3, 0xaf]</span><br><span class="line">    # checksums = [m[start + i] ^ right_asm[i] for i in range(len(right_asm))]</span><br><span class="line">    checksum = crc32(m)</span><br><span class="line">    checksums = [((checksum &gt;&gt; (j * 8)) &amp; 0xff) for j in range(4)]</span><br><span class="line">    ichecksums = itertools.cycle(checksums)</span><br><span class="line">    for i in range(size):</span><br><span class="line">        m[start + i] = m[start + i] ^ next(ichecksums)</span><br><span class="line"></span><br><span class="line">    start += 0x27C</span><br><span class="line">    size -= 0x27C</span><br><span class="line">    for i in range(0, , 4):</span><br><span class="line">        m[start + i], m[start + i + 1], m[start + i + 2], m[start + i + 3] = m[start + i + 2], m[start + i + 3], m[</span><br><span class="line">            start + i], m[start + i + 1]</span><br><span class="line">    # right_asm = [0xFF, 0xF7, 0x3E, 0xEE]</span><br><span class="line">    # checksums = [m[start + size - 4 + i] ^ right_asm[i] for i in range(len(right_asm))]</span><br><span class="line">    checksum = crc32(open(&apos;./apk/lib/armeabi-v7a/liba.so&apos;, &apos;rb&apos;).read())</span><br><span class="line">    print(&apos;a: &apos;, checksum)</span><br><span class="line">    checksums = [((checksum &gt;&gt; (j * 8)) &amp; 0xff) for j in range(4)]</span><br><span class="line">    ichecksums = itertools.cycle(checksums)</span><br><span class="line">    for i in range(size):</span><br><span class="line">        m[start + i] = m[start + i] ^ next(ichecksums)</span><br><span class="line"></span><br><span class="line">    m.seek(0)</span><br><span class="line">    open(&apos;./apk/lib/armeabi-v7a/libbnew2.so&apos;, &apos;wb&apos;).write(m.read())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def xorstr():</span><br><span class="line">    def get_result(nums, key):</span><br><span class="line">        nums = [[((i &gt;&gt; (j * 8)) &amp; 0xff) for j in range(4)] for i in nums]</span><br><span class="line">        # nums = sum(nums, [])</span><br><span class="line">        nums = list(itertools.chain.from_iterable(nums))</span><br><span class="line">        nums = [i ^ key for i in itertools.takewhile(lambda i: i != 0, nums)]</span><br><span class="line"></span><br><span class="line">        b = bytes(nums)</span><br><span class="line">        return b</span><br><span class="line"></span><br><span class="line">    nums = [0xBCFEFCF0,</span><br><span class="line">            0xEAE9A1E2,</span><br><span class="line">            0xF1F2F1BC,</span><br><span class="line">            0xF7FDF2EA,</span><br><span class="line">            0xF7FAFCE1,</span><br><span class="line">            0xFAF2DEBC,</span><br><span class="line">            0xE7F0D2FD,</span><br><span class="line">            0xE7FAE5FA,</span><br><span class="line">            0xea]</span><br><span class="line"></span><br><span class="line">    print(get_result(nums, 0x93))</span><br><span class="line"></span><br><span class="line">    nums = [0x777C5A3E,</span><br><span class="line">            0x7A397760,</span><br><span class="line">            0x39717877,</span><br><span class="line">            0x7F646245,</span><br><span class="line">            0x3F2D7178,</span><br><span class="line">            0x4C]</span><br><span class="line">    print(get_result(nums, 0x16))</span><br><span class="line"></span><br><span class="line">    nums = [0x73757873, 0x7B]</span><br><span class="line">    print((get_result(nums, 0x10)))</span><br><span class="line"></span><br><span class="line">def get_flag():</span><br><span class="line">    crc = crc32(open(&apos;./apk/lib/armeabi-v7a/liba.so&apos;, &apos;rb&apos;).read())</span><br><span class="line">    crc2 = crc * crc</span><br><span class="line">    checksums = [((crc2 &gt;&gt; (j * 8)) &amp; 0xff) for j in range(8)]</span><br><span class="line">    b = bytearray([</span><br><span class="line">        0xD5,</span><br><span class="line">        8,</span><br><span class="line">        0x4B,</span><br><span class="line">        0x11,</span><br><span class="line">        0xBF,</span><br><span class="line">        0xC,</span><br><span class="line">        0xB,</span><br><span class="line">        0x1F,</span><br><span class="line">        0xDC,</span><br><span class="line">        0x57,</span><br><span class="line">        0x64,</span><br><span class="line">        0x74,</span><br><span class="line">        0xB4,</span><br><span class="line">        0x6D,</span><br><span class="line">        0x5B,</span><br><span class="line">        0xD4,</span><br><span class="line">        0xEB,</span><br><span class="line">        0x1D,</span><br><span class="line">        0x51,</span><br><span class="line">        0xAE,</span><br><span class="line">        0xD5,</span><br><span class="line">        0x44,</span><br><span class="line">        8,</span><br><span class="line">        # 0</span><br><span class="line">    ])</span><br><span class="line">    for i in range(8):</span><br><span class="line">        for j in range(8):</span><br><span class="line">            b[i + j] ^= checksums[j]</span><br><span class="line">    i = 15</span><br><span class="line">    for j in range(8):</span><br><span class="line">        b[i + j] ^= checksums[j]</span><br><span class="line"></span><br><span class="line">    print(b)</span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    # xorstr()</span><br><span class="line">    # recoverlibb()</span><br><span class="line">    get_flag()</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;逆向题目中唯一一道android逆向，做出来的过程也比较费力，这里简单记录。&lt;/p&gt;
&lt;p&gt;安装程序发现会闪退，可能有反调试措施，首先进行静态分析。&lt;br&gt;JEB查看Java代码部分：&lt;br&gt;&lt;figure class=&quot;image-bubble&quot;&gt;
           
      
    
    </summary>
    
      <category term="WriteUp" scheme="http://www.w4ter5heep.com/categories/WriteUp/"/>
    
    
      <category term="CTF" scheme="http://www.w4ter5heep.com/tags/CTF/"/>
    
      <category term="Mobile" scheme="http://www.w4ter5heep.com/tags/Mobile/"/>
    
  </entry>
  
  <entry>
    <title>hellow_my_site</title>
    <link href="http://www.w4ter5heep.com/2018/04/05/hellow-my-site/"/>
    <id>http://www.w4ter5heep.com/2018/04/05/hellow-my-site/</id>
    <published>2018-04-05T09:19:55.000Z</published>
    <updated>2018-04-15T15:24:44.871Z</updated>
    
    <content type="html"><![CDATA[<p>can you see my secret</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;can you see my secret&lt;/p&gt;

      
    
    </summary>
    
      <category term="Welcome!" scheme="http://www.w4ter5heep.com/categories/Welcome/"/>
    
    
      <category term="MySite" scheme="http://www.w4ter5heep.com/tags/MySite/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.w4ter5heep.com/2018/04/05/hello-world/"/>
    <id>http://www.w4ter5heep.com/2018/04/05/hello-world/</id>
    <published>2018-04-05T02:35:01.800Z</published>
    <updated>2018-04-15T15:25:04.899Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="Welcome!" scheme="http://www.w4ter5heep.com/categories/Welcome/"/>
    
    
      <category term="MySite" scheme="http://www.w4ter5heep.com/tags/MySite/"/>
    
  </entry>
  
</feed>
